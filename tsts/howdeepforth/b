0 0< 14 0  : 0< ;
0 (0BRANCH) 3 0  : (0BRANCH) ;
0 ! 71 0  : ! ;
0 @ 90 0  : @ ;
0 AND 9 0  : AND ;
0 (BRANCH) 4 0  : (BRANCH) ;
0 BYE 1 0  : BYE ;
0 C! 16 0  : C! ;
0 C@ 17 0  : C@ ;
0 COLD 1 0  : COLD ;
0 (COLON) 3 0  : (COLON) ;
0 (CONS 1 0  : (CONS ;
0 (DO) 2 0  : (DO) ;
0 (DOES) 2 0  : (DOES) ;
0 DROP 49 0  : DROP ;
0 DUP 77 0  : DUP ;
0 EXECUTE 4 0  : EXECUTE ;
0 EXIT 35 0  : EXIT ;
0 (FENCE) 1 0  : (FENCE) ;
0 I 11 0  : I ;
0 (LIT) 2 0  : (LIT) ;
0 (+LOOP) 2 0  : (+LOOP) ;
0 (/LOOP) 2 0  : (/LOOP) ;
0 (LOOP) 2 0  : (LOOP) ;
0 LSHIFT 3 0  : LSHIFT ;
0 OR 6 0  : OR ;
0 OVER 18 0  : OVER ;
0 >R 48 0  : >R ;
0 R> 53 0  : R> ;
0 R@ 9 0  : R@ ;
0 READ-BLOCK 2 0  : READ-BLOCK ;
0 RP@ 1 0  : RP@ ;
0 RP! 2 0  : RP! ;
0 RSHIFT 3 0  : RSHIFT ;
0 RX? 2 0  : RX? ;
0 ?SAME 2 0  : ?SAME ;
0 SP! 2 0  : SP! ;
0 SP@ 7 0  : SP@ ;
0 SWAP 58 0  : SWAP ;
0 TX! 2 0  : TX! ;
0 UM+ 10 0  : UM+ ;
0 (VAR) 2 0  : (VAR) ;
0 WRITE-BLOCK 3 0  : WRITE-BLOCK ;
0 XOR 7 0  : XOR ;
1 0 59 1  : 0 CONSTANT ;
1 1 15 1  : 1 CONSTANT ;
1 -1 19 1  : -1 CONSTANT ;
1 2 6 1  : 2 CONSTANT ;
1 ACTIVE 13 1  : ACTIVE VARIABLE ;
1 B0ADDR 5 1  : B0ADDR CONSTANT ;
1 B0BLK 7 1  : B0BLK VARIABLE ;
1 B0UPD 6 1  : B0UPD VARIABLE ;
1 B1ADDR 5 1  : B1ADDR CONSTANT ;
1 B1BLK 6 1  : B1BLK VARIABLE ;
1 B1UPD 6 1  : B1UPD VARIABLE ;
1 BASE 16 1  : BASE VARIABLE ;
1 B/BUF 4 1  : B/BUF CONSTANT ;
1 BEGIN 11 1  : BEGIN HERE ;
1 BL 18 1  : BL CONSTANT ;
1 B/LINE 7 1  : B/LINE CONSTANT ;
1 BLK 7 1  : BLK VARIABLE ;
1 <BUILDS 4 1  : <BUILDS VARIABLE ;
1 CELL 5 1  : CELL CONSTANT ;
1 CFA>PFA 2 1  : CFA>PFA CELL+ ;
1 CONTEXT 11 1  : CONTEXT VARIABLE ;
1 CURRENT 6 1  : CURRENT VARIABLE ;
1 DBL 2 1  : DBL VARIABLE ;
1 'EMIT 3 1  : 'EMIT VARIABLE ;
1 FENCE 3 1  : FENCE VARIABLE ;
1 FLUSH 1 1  : FLUSH SAVE-BUFFERS ;
1 (FORTH) 4 1  : (FORTH) VARIABLE ;
1 H 9 1  : H VARIABLE ;
1 HLD 5 1  : HLD VARIABLE ;
1 >IN 13 1  : >IN VARIABLE ;
1 '?KEY 3 1  : '?KEY VARIABLE ;
1 NOT 1 1  : NOT 0= ;
1 'NUMBER 2 1  : 'NUMBER VARIABLE ;
1 PFA>CFA 3 1  : PFA>CFA CELL- ;
1 R0 2 1  : R0 CONSTANT ;
1 S0 6 1  : S0 CONSTANT ;
1 SCR 2 1  : SCR VARIABLE ;
1 SPAN 5 1  : SPAN VARIABLE ;
1 STATE 8 1  : STATE VARIABLE ;
1 THEN 82 1  : THEN RESOLVE ;
1 TIB 3 1  : TIB CONSTANT ;
1 #TIB 7 1  : #TIB VARIABLE ;
1 TMP 12 1  : TMP VARIABLE ;
1 UP 3 1  : UP VARIABLE ;
2 0> 3 2  : 0> 0 > ;
2 1- 10 2  : 1- 1 - ;
2 1+ 25 2  : 1+ 1 + ;
2 */ 1 2  : */ */MOD NIP ;
2 / 1 2  : / /MOD NIP ;
2 = 15 2  : = XOR 0= ;
2 2/ 1 2  : 2/ 1 RSHIFT ;
2 2+ 1 2  : 2+ 2 + ;
2 2- 1 2  : 2- 2 - ;
2 ? 2 2  : ? @ . ;
2 2* 2 2  : 2* 1 LSHIFT ;
2 - 24 2  : - NEGATE + ;
2 2DROP 11 2  : 2DROP DROP DROP ;
2 2DUP 10 2  : 2DUP OVER OVER ;
2 + 32 2  : + UM+ DROP ;
2 * 3 2  : * UM* DROP ;
2 <> 4 2  : <> = 0= ;
2 > 8 2  : > SWAP < ;
2 BELL 2 2  : BELL 7 EMIT ;
2 BLANK 2 2  : BLANK BL FILL ;
2 CELL- 2 2  : CELL- CELL - ;
2 CELL+ 9 2  : CELL+ CELL + ;
2 CELLS 6 2  : CELLS 1 LSHIFT ;
2 >CFA 5 2  : >CFA 8 + ;
2 EMIT 17 2  : EMIT 'EMIT @EXECUTE ;
2 ERASE 1 2  : ERASE 0 FILL ;
2 EXTEND 3 2  : EXTEND DUP 0< ;
2 HERE 12 2  : HERE H @ ;
2 INVERT 4 2  : INVERT -1 XOR ;
2 ?KEY 2 2  : ?KEY '?KEY @EXECUTE ;
2 >LFA 4 2  : >LFA 6 + ;
2 MOD 2 2  : MOD /MOD DROP ;
2 MOVE 1 2  : MOVE CELLS CMOVE ;
2 NEGATE 9 2  : NEGATE INVERT 1+ ;
2 >NFA 6 2  : >NFA 10 - ;
2 NIP 8 2  : NIP SWAP DROP ;
2 NUMBER 4 2  : NUMBER 'NUMBER @EXECUTE ;
2 >PFA 5 2  : >PFA 10 + ;
2 -ROT 8 2  : -ROT ROT ROT ;
2 SPACE 11 2  : SPACE BL EMIT ;
2 U> 4 2  : U> SWAP U< ;
2 WHILE 8 2  : WHILE [COMPILE] IF ;
3 ($") 2 3  : ($") R> $+ >R ;
3 $" 5 3  : $" COMPILE ($") $, ;
3 ." 1 3  : ." COMPILE (.") $, ;
3 [ 2 3  : [ 0 STATE ! ;
3 ] 2 3  : ] -1 STATE ! ;
3 ['] 4 3  : ['] ' [COMPILE] LITERAL ;
3 ABORT" 5 3  : ABORT" COMPILE (ABORT") $, ;
3 AGAIN 3 3  : AGAIN COMPILE (BRANCH) , ;
3 BINARY 1 3  : BINARY 2 BASE ! ;
3 [COMPILE] 10 3  : [COMPILE] ' PFA>CFA , ;
3 DECIMAL 2 3  : DECIMAL 10 BASE ! ;
3 DO 20 3  : DO COMPILE (DO) HERE ;
3 FORTH 3 3  : FORTH (FORTH) CONTEXT ! ;
3 HEX 5 3  : HEX 16 BASE ! ;
3 IF 83 3  : IF COMPILE (0BRANCH) MARK ;
3 KEY 3 3  : KEY BEGIN ?KEY UNTIL ;
3 LITERAL 7 3  : LITERAL COMPILE (LIT) , ;
3 +LOOP 1 3  : +LOOP COMPILE (+LOOP) , ;
3 LOOP 19 3  : LOOP COMPILE (LOOP) , ;
3 /LOOP 2 3  : /LOOP COMPILE (/LOOP) , ;
3 MARK 3 3  : MARK HERE 0 , ;
3 RESOLVE 4 3  : RESOLVE HERE SWAP ! ;
3 UNTIL 2 3  : UNTIL COMPILE (0BRANCH) , ;
4 ( 1 4  : ( [CHAR] ) WORD DROP ;
4 2OVER 1 4  : 2OVER 3 PICK 3 PICK ;
4 2SWAP 1 4  : 2SWAP >R -ROT R> -ROT ;
4 : 5 4  : : CREATE PERFORMS (COLON) ] ;
4 <# 7 4  : <# DROP PAD HLD ! ;
4 ALLOT 4 4  : ALLOT HERE + H ! ;
4 COUNT 14 4  : COUNT DUP 1+ SWAP C@ ;
4 CR 9 4  : CR 13 EM/IT 10 EMIT ;
4 (DEFER) 2 4  : (DEFER) $" DEFER ERR" ?WHAT ;
4 DEFINITIONS 3 4  : DEFINITIONS CONTEXT @ CURRENT ! ;
4 ?DUP 5 4  : ?DUP DUP IF DUP THEN ;
4 */MOD 2 4  : */MOD >R M* R> M/MOD ;
4 /MOD 3 4  : /MOD SWAP EXTEND ROT M/MOD ;
4 PAD 4 4  : PAD HERE B/LINE 2* + ;
4 RECURSE 1 4  : RECURSE LAST @ >CFA , ;
4 ROT 10 4  : ROT >R SWAP R> SWAP ;
4 U/ 1 4  : U/ 0 SWAP UM/MOD NIP ;
4 VARIABLE 27 4  : VARIABLE CREATE 0 , LINK ;
5 $+ 4 5  : $+ DUP DUP C@ + 1+ ;
5 0= 16 5  : 0= IF 0 EXIT THEN -1 ;
5 .( 1 5  : .( [CHAR] ) WORD COUNT TYPE ;
5 ; 1 5  : ; COMPILE EXIT [COMPILE] [ LINK ;
5 2@ 1 5  : 2@ DUP CELL+ @ SWAP @ ;
5 2! 1 5  : 2! SWAP OVER ! CELL+ ! ;
5 (.") 2 5  : (.") R> $+ >R COUNT TYPE ;
5 ABS 5 5  : ABS DUP 0< IF NEGATE THEN ;
5 CONSTANT 14 5  : CONSTANT CREATE , PERFORMS (CONST) LINK ;
5 DLITERAL 2 5  : DLITERAL SWAP [COMPILE] LITERAL [COMPILE] LITERAL ;
5 ELSE 18 5  : ELSE COMPILE (BRANCH) MARK SWAP RESOLVE ;
5 @EXECUTE 4 5  : @EXECUTE @ ?DUP IF EXECUTE THEN ;
5 EXTRACT 5 5  : EXTRACT SOURCE >IN @ + C@ ;
5 IS 1 5  : IS LAST @ >CFA ' ! ;
5 LINK 5 5  : LINK LAST @ CURRENT @ ! ;
5 ?MORE 3 5  : ?MORE >IN @ #TIB @ < ;
5 PAGE 1 5  : PAGE 50 0 DO CR LOOP ;
5 PICK 3 5  : PICK 1+ CELLS SP@ + @ ;
5 REPEAT 8 5  : REPEAT COMPILE (BRANCH) SWAP , RESOLVE ;
5 #S 5 5  : #S BEGIN # DUP WHILE REPEAT ;
5 UNLOOP 4 5  : UNLOOP R> R> R> 2DROP >R ;
6 $, 4 6  : $, [CHAR] " WORD C@ 1+ ALLOT ;
6 , 19 6  : , H @ ! CELL H +! ;
6 #> 7 6  : #> DROP HLD @ PAD OVER - ;
6 +! 8 6  : +! SWAP OVER @ + SWAP ! ;
6 ABORT 3 6  : ABORT S0 SP! 0 STATE ! QUIT ;
6 ACTIVATE 2 6  : ACTIVATE B0BLK @ = 0= ACTIVE ! ;
6 BACKSPACE 3 6  : BACKSPACE 8 DUP EMIT BL EMIT EMIT ;
6 C, 1 6  : C, H @ C! 1 H +! ;
6 COMPILE 17 6  : COMPILE R> DUP @ , CELL+ >R ;
6 DEPTH 1 6  : DEPTH SP@ S0 SWAP - 1 RSHIFT ;
6 HOLD 3 6  : HOLD -1 HLD +! HLD @ C! ;
6 I' 1 6  : I' R> R> R@ -ROT >R >R ;
6 ?IMMEDIATE 2 6  : ?IMMEDIATE DUP >NFA C@ [HEX] 80 AND ;
6 MAX 1 6  : MAX 2DUP < IF SWAP THEN DROP ;
6 MIN 2 6  : MIN 2DUP > IF SWAP THEN DROP ;
6 U. 2 6  : U. 0 <# #S #> TYPE SPACE ;
6 VOCABULARY 1 6  : VOCABULARY <BUILDS 0 , DOES> CONTEXT ! ;
6 WITHIN 4 6  : WITHIN OVER - >R - R> U< ;
7 ' 5 7  : ' BL WORD ?FIND 0= IF ?WHAT THEN ;
7 ARRAY 1 7  : ARRAY <BUILDS CELLS ALLOT DOES> SWAP CELLS + ;
7 BLOCK 5 7  : BLOCK ?EXIT-CACHED DUP BUFFER DUP ROT READ-BLOCK ?I/O ;
7 D+ 1 7  : D+ >R ROT UM+ ROT + R> + ;
7 DNEGATE 3 7  : DNEGATE INVERT >R INVERT 1 UM+ R> + ;
7 DOES> 4 7  : DOES> PERFORMS (DOES) R> LAST @ >PFA ! ;
7 H. 1 7  : H. BASE @ HEX SWAP U. BASE ! ;
7 SIGN 3 7  : SIGN SWAP 0< IF [CHAR] - HOLD THEN ;
7 SPACES 3 7  : SPACES ?0>DUP IF 0 DO SPACE LOOP THEN ;
7 ?WHAT 8 7  : ?WHAT COUNT TYPE [CHAR] ? EMIT CR ABORT ;
8 ?0>DUP 6 8  : ?0>DUP DUP 0> IF DUP EXIT THEN DROP 0 ;
8 # 8 8  : # BASE @ 0 SWAP UM/MOD SWAP DIGIT HOLD ;
8 (ABORT") 2 8  : (ABORT") R> $+ >R SWAP IF ?WHAT THEN DROP ;
8 CONSOLE 2 8  : CONSOLE ['] TX! 'EMIT ! ['] RX? '?KEY ! ;
8 DEFER 2 8  : DEFER CREATE PERFORMS (COLON) COMPILE (DEFER) COMPILE EXIT LINK ;
8 ?ENOUGH 3 8  : ?ENOUGH [CHAR] : EMIT KEY BACKSPACE [CHAR] q = ;
8 ?EXIT-CACHED 3 8  : ?EXIT-CACHED DUP FIND-BLOCK IF SWAP ACTIVATE R> DROP THEN ;
8 LAST 11 8  : LAST @ C@ [HEX] 40 OR LAST @ C! ;
8 LEAVE 1 8  : LEAVE R> R> R> DROP DUP >R >R >R ;
8 (QUIT) 1 8  : (QUIT) BEGIN R0 RP! CONSOLE QUERY INTERPRET .OK AGAIN ;
8 THRU 1 8  : THRU 1+ SWAP DO I . I LOAD LOOP ;
8 U.R 1 8  : U.R >R 0 <# #S #> R> (PAD) /VARIABLETYPE ;
8 USER 1 8  : USER <BUILDS CELLS , DOES> @ UP @ + ;
9 . 4 9  : . DUP ABS 0 <# #S SIGN #> TYPE SPACE ;
9 D< 1 9  : D< ROT SWAP < IF 2DROP -1 EXIT THEN U< ;
9 ?I/O 5 9  : ?I/O DUP 0= IF EMPTY-BUFFERS THEN 0= ABORT" I/O ERR" ;
9 J 1 9  : J R> R> R> R@ -ROT >R >R SWAP >R ;
9 (PAD) 3 9  : (PAD) 2DUP < IF OVER - SPACES EXIT THEN DROP ;
9 SOURCE 2 9  : SOURCE BLK @ ?DUP IF FIND-BLOCK DROP EXIT THEN TIB ;
9 TYPE 13 9  : TYPE ?0>DUP IF 0 DO COUNT EMIT LOOP THEN DROP ;
10 0SAVE 3 10  : 0SAVE B0UPD @ IF B0ADDR B0BLK @ WRITE-BLOCK EXIT THEN -1 ;
10 1SAVE 3 10  : 1SAVE B1UPD @ IF B1ADDR B1BLK @ WRITE-BLOCK EXIT THEN -1 ;
10 < 6 10  : < 2DUP XOR 0< IF DROP 0< EXIT THEN - 0< ;
10 [CHAR] 18 10  : [CHAR] BL WORD 1+ C@ STATE @ IF [COMPILE] LITERAL THEN ;
10 FIND 1 10  : FIND BL WORD ?FIND IF >NFA >CFA EXIT THEN DROP 0 ;
10 PERFORMS 5 10  : PERFORMS R> DUP @ CFA>PFA LAST @ >CFA ! CELL+ >R ;
10 SAVE-BUFFERS 2 10  : SAVE-BUFFERS 0SAVE 1SAVE AND ?I/O 0 DUP B0UPD ! B1UPD ! ;
10 U< 7 10  : U< 2DUP XOR 0< IF NIP 0< EXIT THEN - 0< ;
11 COPY 1 11  : COPY SWAP BLOCK DROP ACTIVE @ IF B1BLK ELSE B0BLK THEN ! ;
11 DIGIT 2 11  : DIGIT DUP 9 > IF 55 + EXIT THEN [CHAR] 0 + ;
11 .R 3 11  : .R >R DUP ABS 0 <# #S SIGN #> R> (PAD) TYPE ;
12 >CHAR 2 12  : >CHAR 127 AND DUP BL 127 WITHIN 0= IF DROP [CHAR] _ THEN ;
12 ?COMPILE-ONLY 2 12  : ?COMPILE-ONLY DUP >NFA C@ [HEX] 40 AND IF $" COMP ONLY" ?WHAT THEN ;
12 M* 2 12  : M* 2DUP XOR 0< >R ABS SWAP ABS UM* R> IF DNEGATE THEN ;
12 .OK 2 12  : .OK STATE @ 0= IF [CHAR] O EMIT [CHAR] K EMIT THEN CR ;
13 CMOVE 2 13  : CMOVE ?0>DUP IF 0 DO >R COUNT R@ C! R> 1+ LOOP 2DROP THEN ;
13 QUERY 2 13  : QUERY TIB 80 EXPECT SPAN @ #TIB ! 0 >IN ! 0 BLK ! ;
14 CONVERT 2 14  : CONVERT 1+ BEGIN DUP C@ ?DIGIT WHILE ROT BASE @ * + SWAP 1+ REPEAT ;
14 ENTRY 2 14  : ENTRY DUP UPCASE COUNT 5 SWAP DO DUP I + BL SWAP C! LOOP DROP ;
14 FILL 3 14  : FILL OVER 0> IF -ROT 0 DO 2DUP C! 1+ LOOP ELSE DROP THEN 2DROP ;
14 LOOKUP 3 14  : LOOKUP BEGIN ?DUP WHILE 2DUP ?SAME IF NIP -1 EXIT THEN >LFA @ REPEAT 0 ;
14 RESET 1 14  : RESET FORTH DEFINITIONS EMPTY-BUFFERS DECIMAL [HEX] F380 UP ! $" T3XFORTH" COUNT TYPE CR ABORT ;
15 EMPTY-BUFFERS 3 15  : EMPTY-BUFFERS -1 ACTIVE ! 0 DUP B0UPD ! B1UPD ! -1 DUP B0BLK ! B1BLK ! ;
15 ?STACK 2 15  : ?STACK SP@ S0 U> SP@ PAD B/BUF + U< OR IF $" STK ERR" ?WHAT THEN ;
15 UPDATE 1 15  : UPDATE ACTIVE @ 0< IF EXIT THEN -1 ACTIVE @ IF B1UPD ELSE B0UPD THEN ! ;
15 WIPE 1 15  : WIPE ACTIVE @ 0< IF EXIT THEN ACTIVE @ IF B1ADDR ELSE B0ADDR THEN B/BUF BLANK ;
16 CREATE 5 16  : CREATE BL WORD ENTRY 6 ALLOT CURRENT @ @ , ['] (VAR) , HERE >NFA LAST ! ;
16 EMPTY 1 16  : EMPTY FORTH DEFINITIONS FENCE @ DUP DUP CONTEXT @ ! CURRENT @ ! >PFA CELL+ H ! ;
16 .S 1 16  : .S S0 SP@ CELL+ = IF EXIT THEN S0 SP@ CELL+ DO I @ . CELL /LOOP ;
19 FIND-BLOCK 3 19  : FIND-BLOCK DUP B0BLK @ = IF DROP B0ADDR -1 EXIT THEN B1BLK @ = IF B1ADDR -1 EXIT THEN 0 ;
19 UPCASE 4 19  : UPCASE COUNT 0 DO COUNT DUP [CHAR] a [CHAR] { WITHIN IF BL - THEN OVER 1- C! LOOP DROP ;
21 \ 1 21  : \ BLK @ 0= IF #TIB @ >IN ! EXIT THEN >IN @ B/LINE + 1- DUP B/LINE MOD - >IN ! ;
22 HD 1 22  : HD BASE @ >R HEX 0 DO CR DUP 0 <# # # # # #> TYPE SPACE DUMP LOOP R> BASE ! ;
23 -TRAILING 1 23  : -TRAILING ?0>DUP IF 1 SWAP 1- NEGATE DO DUP I - C@ BL XOR IF I 1- NEGATE UNLOOP EXIT THEN LOOP 0 THEN ;
24 M/MOD 3 24  : M/MOD EXTEND DUP >R IF NEGATE >R DNEGATE R> THEN >R DUP 0< IF R@ + THEN R> UM/MOD R> IF SWAP NEGATE SWAP THEN ;
24 UM* 3 24  : UM* 0 SWAP 16 0 DO DUP UM+ >R >R DUP UM+ R> + R> IF >R OVER UM+ R> + THEN LOOP ROT DROP ;
25 <CMOVE 1 25  : <CMOVE ?0>DUP IF >R SWAP R@ + 1- SWAP R@ + 1- R> 0 DO >R COUNT R@ C! 2 - R> 1- LOOP 2DROP THEN ;
25 ?DIGIT 2 25  : ?DIGIT DUP 64 > IF 55 - ELSE DUP 47 > IF 48 - THEN THEN DUP BASE @ U< IF -1 EXIT THEN DROP 0 ;
27 [HEX] 7 27  : [HEX] BASE @ >R BL WORD DUP UPCASE DUP HEX ?NUMBER 0= IF R> BASE ! ?WHAT THEN NIP R> BASE ! STATE @ IF [COMPILE] LITERAL THEN ;
28 BUFFER 2 28  : BUFFER ?EXIT-CACHED ACTIVE @ IF 0SAVE ?I/O B0BLK ! 0 ACTIVE ! 0 B0UPD ! B0ADDR ELSE 1SAVE ?I/O B1BLK ! 1 ACTIVE ! 0 B1UPD ! B1ADDR THEN ;
28 ?FIND 5 28  : ?FIND DUP UPCASE CONTEXT @ @ LOOKUP IF >PFA -1 EXIT THEN (FORTH) CONTEXT @ = IF 0 EXIT THEN (FORTH) @ LOOKUP IF >PFA -1 EXIT THEN 0 ;
29 DUMP 2 29  : DUMP BASE @ >R HEX DUP 16 0 DO COUNT 0 <# # # #> TYPE SPACE LOOP DROP 16 0 DO COUNT >CHAR EMIT LOOP R> BASE ! SPACE ;
29 LIST 1 29  : LIST DUP SCR ! BLOCK 16 0 DO CR I 1+ 2 .R [CHAR] : EMIT SPACE DUP I B/LINE * + B/LINE TYPE [CHAR] : EMIT LOOP DROP SPACE ;
31 FORGET 1 31  : FORGET CURRENT @ CONTEXT @ <> ABORT" CURRENT" ' >NFA DUP FENCE @ U> 0= ABORT" FENCE" DUP CONTEXT @ U> 0= ABORT" CONTEXT" DUP H ! >LFA @ CONTEXT @ ! ;
31 ?NUMBER 3 31  : ?NUMBER DUP 1+ C@ [CHAR] - = DUP >R IF 1+ THEN 0 SWAP CONVERT C@ BL = IF -1 ELSE DROP 0 THEN R> OVER AND IF SWAP NEGATE SWAP THEN ;
31 -TEXT 1 31  : -TEXT SWAP DUP 0= IF 2DROP DROP 0 EXIT THEN 0 DO OVER C@ OVER C@ - DUP IF -ROT 2DROP UNLOOP EXIT THEN DROP 1+ SWAP 1+ SWAP LOOP 2DROP 0 ;
33 INDEX 1 33  : INDEX 0 -ROT 1+ SWAP DO CR I 0 .R [CHAR] : EMIT SPACE I BLOCK B/LINE TYPE 1+ DUP 20 > IF ?ENOUGH IF UNLOOP DROP EXIT THEN DROP 0 THEN LOOP DROP ;
36 LOAD 2 36  : LOAD BLK @ >R >IN @ >R #TIB @ >R ACTIVE @ >R DUP BLOCK DROP BLK ! B/BUF #TIB ! 0 >IN ! INTERPRET R> ACTIVE ! R> #TIB ! R> >IN ! R> BLK ! ;
42 INTERPRET 3 42  : INTERPRET BEGIN BL WORD DUP C@ WHILE STATE @ IF ?FIND IF ?IMMEDIATE IF EXECUTE ELSE PFA>CFA , THEN ELSE NUMBER DBL @ IF [COMPILE] DLITERAL ELSE [COMPILE] LITERAL THEN THEN ELSE ?FIND IF ?COMPILE-ONLY EXECUTE ELSE NUMBER THEN THEN ?STACK REPEAT DROP ;
42 UM/MOD 4 42  : UM/MOD 2DUP U< IF NEGATE 16 0 DO >R DUP UM+ >R >R DUP UM+ R> + DUP R> R@ SWAP >R UM+ R> OR IF >R DROP 1+ R> ELSE DROP THEN R> LOOP DROP SWAP EXIT THEN DROP 2DROP -1 DUP ;
44 WORD 10 44  : WORD TMP ! HERE 1+ BEGIN ?MORE EXTRACT TMP @ = AND WHILE 1 >IN +! REPEAT BEGIN ?MORE EXTRACT TMP @ <> AND WHILE EXTRACT OVER C! 1+ 1 >IN +! REPEAT EXTRACT OVER C! 1 >IN +! HERE 1+ - HERE C! HERE ;
44 WORDS 1 44  : WORDS 0 TMP ! CR CONTEXT @ @ BEGIN ?DUP WHILE DUP COUNT [HEX] 1F AND 5 MIN DUP >R TYPE 8 R> - SPACES 1 TMP +! TMP @ 199 > IF 0 TMP ! ?ENOUGH IF DROP EXIT THEN THEN >LFA @ REPEAT ;
91 EXPECT 2 91  : EXPECT DUP TMP ! BEGIN DUP 0= IF DROP BL SWAP C! TMP @ SPAN ! EXIT THEN KEY DUP 13 = IF DROP TMP @ SWAP - SPAN ! BL SWAP C! SPACE EXIT ELSE DUP 8 = OVER 127 = OR IF DROP DUP TMP @ <> IF SWAP 1- SWAP 1+ BACKSPACE THEN ELSE DUP 24 = IF DROP 2DROP 0 SPAN ! EXIT ELSE DUP BL 127 WITHIN IF DUP EMIT SWAP >R OVER C! R> 1- SWAP 1+ SWAP ELSE DROP BELL THEN THEN THEN THEN AGAIN ;
