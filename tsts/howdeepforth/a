# 35
(  DEFINED CONSTANTS                              WFR-78MAR22 )
HEX
00  CONSTANT  0       01  CONSTANT  1
02  CONSTANT  2       03  CONSTANT  3
20  CONSTANT  BL                               ( ASCII BLANK *)
40  CONSTANT  C/L                 ( TEXT CHARACTERS PER LINE *)
  6
3BE0    CONSTANT   FIRST   ( FIRST BYTE RESERVED FOR BUFFERS *)
4000    CONSTANT   LIMIT            ( JUST BEYOND TOP OF RAM *)
  80    CONSTANT   B/BUF            ( BYTES PER DISC BUFFER  *)
   8     CONSTANT  B/SCR  ( BLOCKS PER SCREEN = 1024 B/BUF / *)
 11
           00  +ORIGIN
: +ORIGIN  LITERAL  +  ; ( LEAVES ADDRESS RELATIVE TO ORIGIN *)
-->
 15

H INTEREST GROUP                                 MAY 1, 1979

# 36
(  USER VARIABLES                                 WFR-78APR29 )
HEX              ( 0 THRU 5 RESERVED,    REFERENCED TO $00A0 *)
( 06 USER  S0 )             ( TOP OF EMPTY COMPUTATION STACK *)
( 08 USER  R0 )                  ( TOP OF EMPTY RETURN STACK *)
0A   USER  TIB                       ( TERMINAL INPUT BUFFER *)
0C   USER  WIDTH                  ( MAXIMUM NAME FIELD WIDTH *)
0E   USER  WARNING                   ( CONTROL WARNING MODES *)
10   USER  FENCE                    ( BARRIER FOR FORGETTING *)
12   USER  DP                           ( DICTIONARY POINTER *)
14   USER  VOC-LINK                   ( TO NEWEST VOCABULARY *)
16   USER  BLK                        ( INTERPRETATION BLOCK *)
18   USER  IN                      ( OFFSET INTO SOURCE TEXT *)
1A   USER  OUT                     ( DISPLAY CURSOR POSITION *)
1C   USER  SCR                              ( EDITING SCREEN *)
-->
 15


# 37
(  USER VARIABLES, CONT.                          WFR-79APR29 )
1E   USER  OFFSET                 ( POSSIBLY TO OTHER DRIVES *)
20   USER  CONTEXT               ( VOCABULARY FIRST SEARCHED *)
22   USER  CURRENT          ( SEARCHED SECOND, COMPILED INTO *)
24   USER  STATE                         ( COMPILATION STATE *)
26   USER  BASE                   ( FOR NUMERIC INPUT-OUTPUT *)
28   USER  DPL                      ( DECIMAL POINT LOCATION *)
2A   USER  PLO                          ( OUTPUT FIELD WIDTH *)
2C   USER  CSP                        ( CHECK STACK POSITION *)
2E   USER  R#                     (  EDITING CURSOR POSITION *)
30   USER  HLD        ( POINTS TO LAST CHARACTER HELD IN PAD *)
-->
 12
 13
 14
 15


# 38
(  HI-LEVEL MISC.                                 WFR-79APR29 )
: 1+      1   +  ;           ( INCREMENT STACK NUMBER BY ONE *)
: 2+      2   +  ;           ( INCREMENT STACK NUMBER BY TWO *)
: HERE    DP  @  ;        ( FETCH NEXT FREE ADDRESS IN DICT. *)
: ALLOT   DP  +! ;                ( MOVE DICT. POINTER AHEAD *)
: ,   HERE  !  2  ALLOT  ;     ( ENTER STACK NUMBER TO DICT. *)
: C,   HERE  C!  1   ALLOT  ;    ( ENTER STACK BYTE TO DICT. *)
: -   MINUS  +  ;                 ( LEAVE DIFF. SEC - BOTTOM *)
: =   -  0=  ;                   ( LEAVE BOOLEAN OF EQUALITY *)
: <   -  0<  ;                  ( LEAVE BOOLEAN OF SEC < BOT *)
: >   SWAP  <  ;                ( LEAVE BOOLEAN OF SEC > BOT *)
: ROT   >R  SWAP  R>  SWAP  ;       ( ROTATE THIRD TO BOTTOM *)
: SPACE     BL  EMIT  ;            ( PRINT BLANK ON TERMINAL *)
: -DUP     DUP  IF  DUP  ENDIF  ;       ( DUPLICATE NON-ZERO *)
-->
 15

H INTEREST GROUP                                 MAY 1, 1979

# 39
(  VARIABLE LENGTH NAME SUPPORT                   WFR-79MAR30 )
: TRAVERSE                          ( MOVE ACROSS NAME FIELD *)
         ( ADDRESS-2, DIRECTION-1, I.E. -1=R TO L, +1=L TO R *)
       SWAP
       BEGIN  OVER  +  7F  OVER  C@  <  UNTIL  SWAP  DROP  ;
  5
: LATEST       CURRENT  @  @  ;         ( NFA OF LATEST WORD *)
  7
  8
( FOLLOWING HAVE LITERALS DEPENDENT ON COMPUTER WORD SIZE )
 10
: LFA    4  -  ;                ( CONVERT A WORDS PFA TO LFA *)
: CFA    2  -  ;                ( CONVERT A WORDS PFA TO CFA *)
: NFA    5  -  -1  TRAVERSE  ;  ( CONVERT A WORDS PFA TO NFA *)
: PFA     1  TRAVERSE  5  +  ;  ( CONVERT A WORDS NFA TO PFA *)
    -->


# 40
(  ERROR PROCEEDURES, PER SHIRA                   WFR-79MAR23 )
: !CSP     SP@  CSP  !  ;     ( SAVE STACK POSITION IN 'CSP' *)
  2
: ?ERROR          ( BOOLEAN-2,  ERROR TYPE-1,  WARN FOR TRUE *)
         SWAP  IF         ERROR    ELSE  DROP  ENDIF  ;
  5
: ?COMP   STATE @  0= 11 ?ERROR ;   ( ERROR IF NOT COMPILING *)
  7
: ?EXEC   STATE  @  12  ?ERROR  ;   ( ERROR IF NOT EXECUTING *)
  9
: ?PAIRS  -  13  ?ERROR  ;  ( VERIFY STACK VALUES ARE PAIRED *)
 11
: ?CSP   SP@  CSP @ -  14  ?ERROR  ; ( VERIFY STACK POSITION *)
 13
: ?LOADING                        ( VERIFY LOADING FROM DISC *)
         BLK  @  0=  16  ?ERROR  ;   -->


# 41
(  COMPILE,  SMUDGE,  HEX, DECIMAL                WFR-79APR20 )
  1
: COMPILE          ( COMPILE THE EXECUTION ADDRESS FOLLOWING *)
        ?COMP  R>  DUP  2+  >R  @  ,  ;
  4
: [    0  STATE  !  ;  IMMEDIATE          ( STOP COMPILATION *)
  6
: ]    C0  STATE  !  ;             ( ENTER COMPILATION STATE *)
  8
: SMUDGE    LATEST  20  TOGGLE  ;   ( ALTER LATEST WORD NAME *)
 10
: HEX      10  BASE  !  ;         ( MAKE HEX THE IN-OUT BASE *)
 12
: DECIMAL  0A  BASE  !  ;     ( MAKE DECIMAL THE IN-OUT BASE *)
-->
 15

H INTEREST GROUP                                 MAY 1, 1979

# 42
(  ;CODE                                          WFR-79APR20 )
  1
: (;CODE)     ( WRITE CODE FIELD POINTING TO CALLING ADDRESS *)
        R>  LATEST  PFA  CFA  !  ;
  4
  5
: ;CODE                      ( TERMINATE A NEW DEFINING WORD *)
      ?CSP  COMPILE  (;CODE)
      [COMPILE]  [  SMUDGE  ;   IMMEDIATE
-->
 10
 11
 12
 13
 14
 15


# 43
(  <BUILD,  DOES>                                 WFR-79MAR20 )
  1
: <BUILDS   0  CONSTANT  ;  ( CREATE HEADER FOR 'DOES>' WORD *)
  3
: DOES>          ( REWRITE PFA WITH CALLING HI-LEVEL ADDRESS *)
                             ( REWRITE CFA WITH 'DOES>' CODE *)
             R>  LATEST  PFA  !  ;CODE
        IP 1+ LDA,  PHA,  IP LDA,  PHA,  ( BEGIN FORTH NESTING )
        2 # LDY,  W )Y LDA,  IP STA,       ( FETCH FIRST PARAM )
        INY,  W )Y LDA,  IP 1+ STA,      ( AS NEXT INTERP. PTR )
        CLC,  W LDA,  4 # ADC,  PHA,  ( PUSH ADDRESS OF PARAMS )
        W 1+ LDA,  00 # ADC,  PUSH JMP,
 12
-->
 14
 15


# 44
(  TEXT OUTPUTS                                   WFR-79APR02 )
: COUNT    DUP 1+ SWAP C@  ;  ( LEAVE TEXT ADDR. CHAR. COUNT *)
: TYPE            ( TYPE STRING FROM ADDRESS-2, CHAR.COUNT-1 *)
        -DUP  IF OVER + SWAP
                 DO I C@ EMIT LOOP  ELSE DROP ENDIF ;
: -TRAILING   ( ADJUST CHAR. COUNT TO DROP TRAILING BLANKS *)
        DUP  0  DO  OVER  OVER  +  1  -  C@
        BL  -  IF  LEAVE  ELSE  1  -  ENDIF  LOOP  ;
: (.")             ( TYPE IN-LINE STRING, ADJUSTING RETURN *)
        R  COUNT  DUP  1+  R>  +  >R  TYPE  ;
 10
 11
: ."     22  STATE  @      ( COMPILE OR PRINT QUOTED STRING *)
    IF  COMPILE  (.")       WORD    HERE  C@  1+  ALLOT
        ELSE        WORD   HERE   COUNT  TYPE  ENDIF  ;
               IMMEDIATE    -->

H INTEREST GROUP                                 MAY 1, 1979

# 45
(  TERMINAL INPUT                                 WFR-79APR29 )
  1
: EXPECT            ( TERMINAL INPUT MEMORY-2,  CHAR LIMIT-1 *)
    OVER  +  OVER  DO  KEY  DUP  0E  +ORIGIN ( BS )  @  =
    IF  DROP  08  OVER  I  =  DUP  R>  2  -  +  >R  -
       ELSE ( NOT BS )  DUP  0D  =
           IF ( RET ) LEAVE  DROP  BL  0  ELSE  DUP  ENDIF
           I  C!  0  I  1+  !
       ENDIF EMIT  LOOP  DROP  ;
: QUERY     TIB  @  50  EXPECT  0  IN  !  ;
8081  HERE
: X   BLK @                            ( END-OF-TEXT IS NULL *)
      IF ( DISC ) 1 BLK +!  0 IN !  BLK @  7  AND  0=
         IF ( SCR END )  ?EXEC  R>  DROP  ENDIF ( disc dependent )
       ELSE  ( TERMINAL )    R>  DROP
         ENDIF  ;   !   IMMEDIATE     -->


# 46
(  FILL, ERASE, BLANKS, HOLD, PAD                 WFR-79APR02 )
: FILL               ( FILL MEMORY BEGIN-3,  QUAN-2,  BYTE-1 *)
        SWAP  >R  OVER  C!  DUP  1+  R>  1  -  CMOVE  ;
  3
: ERASE           ( FILL MEMORY WITH ZEROS  BEGIN-2,  QUAN-1 *)
        0  FILL  ;
  6
: BLANKS                  ( FILL WITH BLANKS BEGIN-2, QUAN-1 *)
        BL  FILL  ;
  9
: HOLD                               ( HOLD CHARACTER IN PAD *)
        -1  HLD  +!   HLD  @  C!  ;
 12
: PAD        HERE  44  +  ;     ( PAD IS 68 BYTES ABOVE HERE *)
        ( DOWNWARD HAS NUMERIC OUTPUTS; UPWARD MAY HOLD TEXT *)
-->


# 47
(  WORD,                                          WFR-79APR02 )
: WORD         ( ENTER WITH DELIMITER, MOVE STRING TO 'HERE' *)
   BLK  @  IF  BLK  @        BLOCK    ELSE  TIB  @  ENDIF
   IN  @  +  SWAP    ( ADDRESS-2, DELIMITER-1 )
   ENCLOSE         ( ADDRESS-4, START-3, END-2, TOTAL COUNT-1 )
   HERE  22  BLANKS      ( PREPARE FIELD OF 34 BLANKS )
   IN  +!          ( STEP OVER THIS STRING )
   OVER  -  >R     ( SAVE CHAR COUNT )
   R  HERE  C!     ( LENGTH STORED FIRST )
   +  HERE  1+
   R>  CMOVE  ;    ( MOVE STRING FROM BUFFER TO HERE+1 )
 11
 12
 13
 14
-->

H INTEREST GROUP                                 MAY 1, 1979

# 48
(  (NUMBER-,  NUMBER,  -FIND,                     WFR-79APR29 )
: (NUMBER)    ( CONVERT DOUBLE NUMBER, LEAVING UNCONV. ADDR. *)
   BEGIN  1+  DUP  >R  C@  BASE  @  DIGIT
      WHILE  SWAP  BASE  @  U*  DROP  ROT  BASE  @  U*  D+
      DPL  @  1+  IF  1  DPL  +!  ENDIF  R>  REPEAT  R>  ;
  5
: NUMBER   ( ENTER W/ STRING ADDR.  LEAVE DOUBLE NUMBER *)
      0  0  ROT  DUP  1+  C@  2D  =  DUP  >R  +  -1
   BEGIN  DPL  !  (NUMBER)  DUP  C@  BL  -
      WHILE  DUP  C@  2E  -  0  ?ERROR    0  REPEAT
      DROP  R>  IF  DMINUS  ENDIF  ;
 11
: -FIND       ( RETURN PFA-3, LEN BYTE-2, TRUE-1; ELSE FALSE *)
      BL  WORD         HERE  CONTEXT  @  @  (FIND)
      DUP  0=  IF  DROP  HERE  LATEST  (FIND)  ENDIF  ;
-->


# 49
(  ERROR HANDLER                                  WFR-79APR20 )
  1
: (ABORT)           ABORT    ;  ( USER ALTERABLE ERROR ABORT *)
  3
: ERROR              ( WARNING:  -1=ABORT, 0=NO DISC, 1=DISC *)
    WARNING  @  0<           ( PRINT TEXT LINE REL TO SCR #4 *)
    IF  (ABORT)  ENDIF  HERE  COUNT  TYPE  ."   ? "
          MESSAGE    SP!  IN  @  BLK  @        QUIT    ;
  8
: ID.   ( PRINT NAME FIELD FROM ITS HEADER ADDRESS *)
     PAD  020  5F  FILL  DUP  PFA  LFA  OVER  -
     PAD  SWAP  CMOVE  PAD  COUNT  01F  AND  TYPE  SPACE  ;
-->
 13
 14
 15


# 50
(  CREATE                                         WFR-79APR28 )
  1
: CREATE              ( A SMUDGED CODE HEADER TO PARAM FIELD *)
                     ( WARNING IF DUPLICATING A CURRENT NAME *)
      TIB  HERE  0A0  +  <  2  ?ERROR  ( 6502 only )
      -FIND    ( CHECK IF UNIQUE IN CURRENT AND CONTEXT )
      IF ( WARN USER )  DROP  NFA  ID.
                        4         MESSAGE    SPACE  ENDIF
      HERE  DUP  C@  WIDTH  @        MIN    1+  ALLOT
      DP  C@  0FD  =  ALLOT   ( 6502 only )
      DUP  A0  TOGGLE  HERE  1  -  80  TOGGLE ( DELIMIT BITS )
      LATEST  ,  CURRENT  @  !
      HERE  2+  ,  ;
-->
 14
 15

H INTEREST GROUP                                 MAY 1, 1979

# 51
(  LITERAL,  DLITERAL,  [COMPILE],  ?STACK        WFR-79APR29 )
  1
: [COMPILE]         ( FORCE COMPILATION OF AN IMMEDIATE WORD *)
      -FIND  0=  0  ?ERROR  DROP  CFA  ,  ;  IMMEDIATE
  4
: LITERAL                     ( IF COMPILING, CREATE LITERAL *)
      STATE  @  IF  COMPILE  LIT  ,  ENDIF  ;  IMMEDIATE
  7
: DLITERAL             ( IF COMPILING, CREATE DOUBLE LITERAL *)
      STATE  @  IF  SWAP  [COMPILE]  LITERAL
                          [COMPILE]  LITERAL  ENDIF ; IMMEDIATE
 11
(  FOLLOWING DEFINITION IS INSTALLATION DEPENDENT )
: ?STACK    ( QUESTION UPON OVER OR UNDERFLOW OF STACK *)
      09E  SP@  <  1  ?ERROR   SP@  020  <  7  ?ERROR  ;
-->


# 52
(  INTERPRET,                                     WFR-79APR18 )
  1
: INTERPRET   ( INTERPRET OR COMPILE SOURCE TEXT INPUT WORDS *)
      BEGIN  -FIND
         IF  ( FOUND )  STATE  @  <
                IF  CFA  ,  ELSE  CFA  EXECUTE  ENDIF  ?STACK
            ELSE  HERE  NUMBER  DPL  @  1+
                IF  [COMPILE]  DLITERAL
                  ELSE   DROP  [COMPILE]  LITERAL  ENDIF  ?STACK
          ENDIF  AGAIN  ;
-->
 11
 12
 13
 14
 15


# 53
(  IMMEDIATE,  VOCAB,  DEFIN,  FORTH,  (      DJK-WFR-79APR29 )
: IMMEDIATE        ( TOGGLE PREC. BIT OF LATEST CURRENT WORD *)
         LATEST  40  TOGGLE  ;
  3
: VOCABULARY  ( CREATE VOCAB WITH 'V-HEAD' AT VOC INTERSECT. *)
       <BUILDS  A081  ,  CURRENT  @  CFA  ,
       HERE  VOC-LINK  @  ,  VOC-LINK  !
       DOES>  2+  CONTEXT  !  ;
  8
VOCABULARY  FORTH     IMMEDIATE       ( THE TRUNK VOCABULARY *)
 10
: DEFINITIONS        ( SET THE CONTEXT ALSO AS CURRENT VOCAB *)
       CONTEXT  @  CURRENT  !  ;
 13
: (              ( SKIP INPUT TEXT UNTIL RIGHT PARENTHESIS *)
       29  WORD  ;   IMMEDIATE   -->

H INTEREST GROUP                                 MAY 1, 1979

# 54
(  QUIT,  ABORT                                  WFR-79MAR30 )
  1
: QUIT                   ( RESTART,  INTERPRET FROM TERMINAL *)
      0  BLK  !  [COMPILE]  [
      BEGIN  RP!  CR  QUERY  INTERPRET
             STATE  @  0=  IF  ."  OK"  ENDIF  AGAIN  ;
  6
: ABORT                  ( WARM RESTART, INCLUDING REGISTERS *)
      SP!  DECIMAL            DR0
      CR  ." FORTH-65 V 4.0"
      [COMPILE]  FORTH  DEFINITIONS  QUIT  ;
 11
 12
-->
 14
 15


# 55
(  COLD START                                     WFR-79APR29 )
CODE COLD               ( COLD START, INITIALIZING USER AREA *)
   HERE  02  +ORIGIN  !  ( POINT COLD ENTRY TO HERE )
         0C +ORIGIN LDA,  'T FORTH 4 + STA,  ( FORTH VOCAB. )
         0D +ORIGIN LDA,  'T FORTH 5 + STA,
         15 # LDY, ( INDEX TO VOC-LINK ) 0= IF, ( FORCED )
    HERE  06 +ORIGIN !   ( POINT RE-ENTRY TO HERE )
      0F # LDY,  ( INDEX TO WARNING )   THEN, ( FROM IF, )
      10 +ORIGIN LDA,   UP    STA,  ( LOAD UP )
      11 +ORIGIN LDA,   UP 1+ STA,
       BEGIN,  0C +ORIGIN ,Y LDA,  ( FROM LITERAL AREA )
                       UP )Y STA,  ( TO USER AREA )
            DEY,  0< END,
     'T ABORT  100  /MOD  # LDA,  IP 1+ STA,
                          # LDA,  IP    STA,
      6C # LDA,  W 1 - STA,    'T RP! JMP, ( RUN )  -->


# 56
(  MATH UTILITY                               DJK-WFR-79APR29 )
CODE S->D                  ( EXTEND SINGLE INTEGER TO DOUBLE *)
      BOT 1+ LDA,  0< IF, DEY, THEN,  TYA, PHA, PUSH JMP,
  3
: +-    0< IF MINUS ENDIF ;   ( APPLY SIGN TO NUMBER BENEATH *)
  5
: D+-                  ( APPLY SIGN TO DOUBLE NUMBER BENEATH *)
        0<  IF  DMINUS  ENDIF  ;
  8
: ABS     DUP  +-   ;                 ( LEAVE ABSOLUTE VALUE *)
: DABS    DUP  D+-  ;        ( DOUBLE INTEGER ABSOLUTE VALUE *)
 11
: MIN                         ( LEAVE SMALLER OF TWO NUMBERS *)
        OVER  OVER  >  IF  SWAP  ENDIF  DROP  ;
: MAX                          ( LEAVE LARGER OF TWO NUMBERS *)
        OVER  OVER  <  IF  SWAP  ENDIF  DROP  ; -->

H INTEREST GROUP                                 MAY 1, 1979

# 57
(  MATH PACKAGE                               DJK-WFR-79APR29 )
: M*     ( LEAVE SIGNED DOUBLE PRODUCT OF TWO SINGLE NUMBERS *)
        OVER  OVER  XOR  >R  ABS  SWAP  ABS  U*  R>  D+-  ;
: M/              ( FROM SIGNED DOUBLE-3-2, SIGNED DIVISOR-1 *)
               ( LEAVE SIGNED REMAINDER-2, SIGNED QUOTIENT-1 *)
        OVER  >R  >R  DABS  R  ABS  U/
        R>  R  XOR  +-  SWAP  R>  +-  SWAP  ;
: *      U*  DROP  ;                        ( SIGNED PRODUCT *)
: /MOD   >R  S->D  R>  M/  ;           ( LEAVE REM-2, QUOT-1 *)
: /      /MOD  SWAP  DROP  ;                ( LEAVE QUOTIENT *)
: MOD    /MOD  DROP  ;                     ( LEAVE REMAINDER *)
: */MOD              ( TAKE RATION OF THREE NUMBERS, LEAVING *)
         >R  M*  R>  M/  ;               ( REM-2, QUOTIENT-1 *)
: */     */MOD  SWAP  DROP  ;   ( LEAVE RATIO OF THREE NUMBS *)
: M/MOD   ( DOUBLE, SINGLE DIVISOR ...  REMAINDER, DOUBLE *)
          >R  0  R  U/  R>  SWAP  >R  U/  R>   ;   -->


# 58
(  DISC UTILITY,  GENERAL USE                     WFR-79APR02 )
FIRST  VARIABLE  USE           ( NEXT BUFFER TO USE, STALEST *)
FIRST  VARIABLE  PREV      ( MOST RECENTLY REFERENCED BUFFER *)
  3
: +BUF     ( ADVANCE ADDRESS-1 TO NEXT BUFFER. RETURNS FALSE *)
      84 ( I.E. B/BUF+4 )  +  DUP  LIMIT  =     ( IF AT PREV *)
      IF  DROP  FIRST  ENDIF  DUP  PREV  @  -  ;
  7
: UPDATE     ( MARK THE BUFFER POINTED TO BY PREV AS ALTERED *)
      PREV  @  @  8000  OR  PREV  @  !  ;
 10
: EMPTY-BUFFERS   ( CLEAR BLOCK BUFFERS; DON'T WRITE TO DISC *)
      FIRST  LIMIT  OVER  -  ERASE  ;
 13
: DR0      0  OFFSET  !  ;                 ( SELECT DRIVE #0 *)
: DR1   07D0  OFFSET  !  ;   -->           ( SELECT DRIVE #1 *)


# 59
(  BUFFER                                         WFR-79APR02 )
: BUFFER                 ( CONVERT BLOCK# TO STORAGE ADDRESS *)
    USE  @  DUP  >R   ( BUFFER ADDRESS TO BE ASSIGNED )
    BEGIN  +BUF  UNTIL ( AVOID PREV )  USE  !  ( FOR NEXT TIME )
    R  @  0<  ( TEST FOR UPDATE IN THIS BUFFER )
    IF ( UPDATED, FLUSH TO DISC )
       R  2+ ( STORAGE LOC. )
       R  @  7FFF  AND  ( ITS BLOCK # )
       0         R/W     ( WRITE SECTOR TO DISC )
      ENDIF
    R  !  ( WRITE NEW BLOCK # INTO THIS BUFFER )
    R  PREV  !  ( ASSIGN THIS BUFFER AS 'PREV' )
    R>  2+  ( MOVE TO STORAGE LOCATION )  ;
 13
-->
 15

H INTEREST GROUP                                 MAY 1, 1979

# 60
(  BLOCK                                          WFR-79APR02 )
: BLOCK         ( CONVERT BLOCK NUMBER TO ITS BUFFER ADDRESS *)
   OFFSET  @  +  >R   ( RETAIN BLOCK # ON RETURN STACK )
   PREV  @  DUP  @  R  -  DUP  +  ( BLOCK = PREV ? )
   IF ( NOT PREV )
      BEGIN  +BUF  0=  ( TRUE UPON REACHING 'PREV' )
         IF ( WRAPPED )  DROP  R  BUFFER
             DUP  R  1         R/W    ( READ SECTOR FROM DISC )
             2  - ( BACKUP )
           ENDIF
           DUP  @  R  -  DUP  +  0=
        UNTIL  ( WITH BUFFER ADDRESS )
      DUP  PREV  !
     ENDIF
     R>  DROP    2+  ;
-->


# 61
(  TEXT OUTPUT FORMATTING                         WFR-79MAY03 )
  1
: (LINE)        ( LINE#, SCR#, ...  BUFFER ADDRESS, 64 COUNT *)
         >R  C/L  B/BUF  */MOD  R>  B/SCR  *  +
         BLOCK  +  C/L  ;
  5
: .LINE   ( LINE#,  SCR#,  ...  PRINTED *)
         (LINE)  -TRAILING  TYPE  ;
  8
: MESSAGE      ( PRINT LINE RELATIVE TO SCREEN #4 OF DRIVE 0 *)
    WARNING  @
    IF  ( DISC IS AVAILABLE )
        -DUP  IF  4  OFFSET  @  B/SCR  /  -  .LINE  ENDIF
        ELSE  ." MSG # "          .    ENDIF  ;
-->
 15


# 62
(  LOAD,  -->                                     WFR-79APR02 )
  1
: LOAD                         ( INTERPRET SCREENS FROM DISC *)
    BLK  @  >R  IN  @  >R  0  IN  !  B/SCR  *  BLK !
    INTERPRET  R>  IN  !  R>  BLK  !  ;
  5
: -->               ( CONTINUE INTERPRETATION ON NEXT SCREEN *)
     ?LOADING  0  IN  !  B/SCR  BLK  @  OVER
     MOD  -  BLK  +!  ;    IMMEDIATE
  9
-->
 11
 12
 13
 14
 15

H INTEREST GROUP                                 MAY 1, 1979

# 63
(  INSTALLATION DEPENDENT TERMINAL I-O,  TIM      WFR-79APR26 )
( EMIT )        ASSEMBLER
  HERE  -2  BYTE.IN  EMIT  !       ( VECTOR EMITS' CF TO HERE )
  XSAVE STX,  BOT LDA,  7F # AND, 72C6 JSR,  XSAVE LDX,
  CLC,  1A # LDY,  UP )Y LDA,  01 # ADC,  UP )Y STA,
             INY,  UP )Y LDA,  00 # ADC,  UP )Y STA,  POP JMP,
                                      ( AND INCREMENT 'OUT' )
( KEY )
      HERE  -2  BYTE.IN  KEY  !   ( VECTOR KEYS' CF TO HERE )
      XSAVE STX,  BEGIN,  8 # LDX,
      BEGIN,  6E02 LDA,  .A LSR,  CS END,  7320 JSR,
      BEGIN,  731D JSR,  0 X) CMP,  0 X) CMP,  0 X) CMP,
      0 X) CMP,  0 X) CMP,  6E02 LDA,  .A LSR,  PHP,  TYA,
      .A LSR,  PLP,  CS IF,  80 # ORA,  THEN,  TAY,  DEX,
      0= END,  731D JSR,  FF # EOR,  7F # AND,  0= NOT END,
      XSAVE LDX,   PUSH0A JMP,     -->


# 64
(  INSTALLATION DEPENDENT TERMINAL I-O,  TIM      WFR-79APR02 )
  1
( ?TERMINAL )
     HERE  -2  BYTE.IN  ?TERMINAL  !    ( VECTOR LIKEWISE )
     1 # LDA, 6E02 BIT, 0= NOT  IF,
     BEGIN,  731D JSR,  6E02 BIT,  0= END,  INY,  THEN,
      TYA,    PUSH0A JMP,
  7
( CR )
    HERE  -2  BYTE.IN  CR  !  ( VECTOR CRS' CF TO HERE )
    XSAVE STX,  728A JSR,  XSAVE LDX, NEXT JMP,
 11
-->
 13
 14
 15


# 65
(  INSTALLATION DEPENDENT DISC                    WFR-79APR02 )
6900    CONSTANT  DATA                     ( CONTROLLER PORT *)
6901    CONSTANT  STATUS                   ( CONTROLLER PORT *)
  3
  4
: #HL            ( CONVERT DECIMAL DIGIT FOR DISC CONTROLLER *)
      0  0A  U/  SWAP  30  +  HOLD  ;
  7
-->
  9
 10
 11
 12
 13
 14
 15

H INTEREST GROUP                                 MAY 1, 1979

# 66
(  D/CHAR,  ?DISC,                                WFR-79MAR23 )
CODE D/CHAR    ( TEST CHAR-1. EXIT TEST BOOL-2, NEW CHAR-1 *)
      DEX,  DEX,  BOT 1+ STY,  C0 # LDA,
   BEGIN,  STATUS BIT,  0= NOT END,  ( TILL CONTROL READY )
      DATA LDA,  BOT STA,  ( SAVE CHAR )
      SEC CMP,  0= IF,  INY,  THEN,  SEC STY,  NEXT JMP,
  6
: ?DISC         ( UPON NAK SHOW ERR MSG, QUIT.  ABSORBS TILL *)
      1  D/CHAR  >R  0=                ( EOT, EXCEPT FOR SOH *)
    IF  ( NOT SOH )  R  15 =
         IF ( NAK )  CR
             BEGIN  4  D/CHAR  EMIT
                UNTIL ( PRINT ERR MSG TIL EOT )  QUIT
           ENDIF  ( FOR ENQ, ACK )
          BEGIN  4  D/CHAR  DROP  UNTIL  ( AT EOT )
     ENDIF  R>  DROP  ;   -->


# 67
(  BLOCK-WRITE                                     WFR-790103 )
CODE BLOCK-WRITE     ( SEND TO DISC FROM ADDRESS-2,  COUNT-1 *)
      2 # LDA,  SETUP JSR,                 ( WITH EOT AT END *)
   BEGIN,  02 # LDA,
      BEGIN,    STATUS BIT,  0= END,  ( TILL IDLE )
      N CPY, 0=
        IF, ( DONE )  04 # LDA,  STATUS STA,  DATA STA,
             NEXT JMP,
        THEN,
      N 2+ )Y LDA,  DATA STA,  INY,
      0=  END,   ( FORCED TO BEGIN )
 11
-->
 13
 14
 15


# 68
(  BLOCK-READ,                                     WFR-790103 )
  1
CODE BLOCK-READ   ( BUF.ADDR-1. EXIT AT 128 CHAR OR CONTROL *)
    1 # LDA,  SETUP JSR,
   BEGIN,  C0 # LDA,
      BEGIN,   STATUS BIT,  0=  NOT END,  ( TILL FLAG )
      50 ( BVC, D6=DATA )
     IF,  DATA LDA,  N )Y STA,  INY,      SWAP
          0< END,  ( LOOP TILL 128 BYTES )
       THEN,   ( OR D6=0, SO D7=1, )
       NEXT JMP,
 11
-->
 13
 14
 15

H INTEREST GROUP                                 MAY 1, 1979

# 69
(  R/W   FOR PERSCI 1070 CONTROLLER               WFR-79MAY03 )
0A  ALLOT  HERE      ( WORKSPACE TO PREPARE DISC CONTROL TEXT )
        ( IN FORM:  C TT SS /D,  TT=TRACK, SS=SECTOR, D=DRIVE )
                                 ( C = 1 TO READ, 0 TO WRITE *)
: R/W                                ( READ/WRITE DISC BLOCK *)
               ( BUFFER ADDRESS-3, BLOCK #-2, 1=READ 0=WRITE *)
   LITERAL  HLD  ! ( JUST AFTER WORKSPACE )   SWAP
   0  OVER  >  OVER  0F9F  >  OR  6  ?ERROR
   07D0  ( 2000 SECT/DR )  /MOD  #HL  DROP  2F  HOLD  BL  HOLD
   1A  /MOD  SWAP 1+ #HL  #HL  DROP  BL  HOLD  ( SECTOR 01-26 )
                     #HL  #HL  DROP  BL  HOLD  ( TRACK  00-76 )
   DUP
   IF  49 ( 1=READ)  ELSE 4F ( 0=WRITE )  ENDIF
   HOLD  HLD  @  0A  BLOCK-WRITE  ( SEND TEXT ) ?DISC
   IF  BLOCK-READ  ELSE  B/BUF  BLOCK-WRITE  ENDIF
   ?DISC  ;     -->


# 70
(  FORWARD REFERENCES                             WFR-79MAR30 )
00  BYTE.IN  :         REPLACED.BY  ?EXEC
02  BYTE.IN  :         REPLACED.BY  !CSP
04  BYTE.IN  :         REPLACED.BY  CURRENT
08  BYTE.IN  :         REPLACED.BY  CONTEXT
0C  BYTE.IN  :         REPLACED.BY  CREATE
0E  BYTE.IN  :         REPLACED.BY  ]
10  BYTE.IN  :         REPLACED.BY  (;CODE)
00  BYTE.IN  ;         REPLACED.BY  ?CSP
02  BYTE.IN  ;         REPLACED.BY  COMPILE
06  BYTE.IN  ;         REPLACED.BY  SMUDGE
08  BYTE.IN  ;         REPLACED.BY  [
00  BYTE.IN  CONSTANT  REPLACED.BY  CREATE
02  BYTE.IN  CONSTANT  REPLACED.BY  SMUDGE
04  BYTE.IN  CONSTANT  REPLACED.BY  ,
06  BYTE.IN  CONSTANT  REPLACED.BY  (;CODE)    -->


# 71
(  FORWARD REFERENCES                             WFR-79APR29 )
02  BYTE.IN  VARIABLE    REPLACED.BY  (;CODE)
02  BYTE.IN  USER        REPLACED.BY  (;CODE)
06  BYTE.IN  ?ERROR      REPLACED.BY  ERROR
0F  BYTE.IN  ."          REPLACED.BY  WORD
1D  BYTE.IN  ."          REPLACED.BY  WORD
00  BYTE.IN  (ABORT)     REPLACED.BY  ABORT
19  BYTE.IN  ERROR       REPLACED.BY  MESSAGE
25  BYTE.IN  ERROR       REPLACED.BY  QUIT
0C  BYTE.IN  WORD        REPLACED.BY  BLOCK
1E  BYTE.IN  CREATE      REPLACED.BY  MESSAGE
2C  BYTE.IN  CREATE      REPLACED.BY  MIN
04  BYTE.IN  ABORT       REPLACED.BY  DR0
2C  BYTE.IN  BUFFER      REPLACED.BY  R/W
30  BYTE.IN  BLOCK       REPLACED.BY  R/W      DECIMAL  ;S
 15

H INTEREST GROUP                                 MAY 1, 1979

# 72
(  ',  FORGET,                                DJK-WFR-79DEC02 )
: '          ( FIND NEXT WORDS PFA; COMPILE IT, IF COMPILING *)
    -FIND  0=  0  ?ERROR  DROP  [COMPILE]  LITERAL  ;
                                    IMMEDIATE
HEX
: FORGET                      ( Dave Kilbridge's Smart Forget )
    [COMPILE]  '  NFA    DUP  FENCE  @  U<  15  ?ERROR
    >R  VOC-LINK  @  ( start with latest vocabulary )
  BEGIN  R  OVER  U<  WHILE  [COMPILE]  FORTH  DEFINITIONS
      @  DUP  VOC-LINK  !  REPEAT  ( unlink from voc list )
  BEGIN  DUP  4  -     ( start with phantom nfa )
      BEGIN  PFA  LFA  @  DUP  R  U<  UNTIL
      OVER  2  -  !  @  -DUP  0=  UNTIL ( end of list ? )
    R>  DP  !  ;    -->
 14
 15

# 72
(  ',  FORGET,  \                                 WFR-79APR28 )
HEX    3   WIDTH
: '          ( FIND NEXT WORDS PFA; COMPILE IT, IF COMPILING *)
    -FIND  0=  0  ?ERROR  DROP  [COMPILE]  LITERAL  ;
                                    IMMEDIATE
  5
: FORGET            ( FOLLOWING WORD FROM CURRENT VOCABULARY *)
    CURRENT  @  CONTEXT  @  -  18  ?ERROR
    [COMPILE]  '  DUP  FENCE  @  <  15  ?ERROR
    DUP  NFA  DP  !  LFA  @  CURRENT  @  !  ;
 10
 11
 12
-->
 14
 15


# 73
(  CONDITIONAL COMPILER, PER SHIRA                WFR-79APR01 )
: BACK     HERE  -  ,  ;           ( RESOLVE BACKWARD BRANCH *)
  2
: BEGIN    ?COMP  HERE  1  ;                  IMMEDIATE
  4
: ENDIF    ?COMP 2 ?PAIRS  HERE  OVER  -  SWAP  !  ;  IMMEDIATE
  6
: THEN     [COMPILE]  ENDIF  ;    IMMEDIATE
  8
: DO       COMPILE  (DO)  HERE  3  ;            IMMEDIATE
 10
: LOOP     3  ?PAIRS  COMPILE  (LOOP)  BACK  ;  IMMEDIATE
 12
: +LOOP    3  ?PAIRS  COMPILE  (+LOOP)  BACK  ;     IMMEDIATE
 14
: UNTIL    1  ?PAIRS  COMPILE  0BRANCH  BACK  ; IMMEDIATE  -->


# 74
(  CONDITIONAL COMPILER                           WFR-79APR01 )
: END      [COMPILE]  UNTIL  ;  IMMEDIATE
  2
: AGAIN    1  ?PAIRS  COMPILE  BRANCH   BACK  ;   IMMEDIATE
  4
: REPEAT   >R  >R  [COMPILE]  AGAIN
              R>  R>  2  -  [COMPILE]  ENDIF  ;  IMMEDIATE
  7
: IF       COMPILE  0BRANCH   HERE  0  ,  2  ;  IMMEDIATE
  9
: ELSE     2  ?PAIRS  COMPILE  BRANCH  HERE  0  ,
           SWAP  2  [COMPILE]  ENDIF  2  ;      IMMEDIATE
 12
: WHILE   [COMPILE]  IF  2+  ;    IMMEDIATE
 14
-->

H INTEREST GROUP                                 MAY 1, 1979

# 75
(  NUMERIC PRIMITIVES                             WFR-79APR01 )
: SPACES     0  MAX  -DUP  IF  0  DO  SPACE  LOOP  ENDIF  ;
  2
: <#     PAD  HLD  !  ;
  4
: #>     DROP  DROP  HLD  @  PAD  OVER  -  ;
  6
: SIGN   ROT  0<  IF  2D  HOLD  ENDIF  ;
  8
: #                     ( CONVERT ONE DIGIT, HOLDING IN PAD * )
         BASE @ M/MOD ROT 9 OVER < IF  7 + ENDIF 30  +  HOLD  ;
 11
: #S     BEGIN  #  OVER  OVER  OR  0=  UNTIL  ;
-->
 14
 15


# 76
(  OUTPUT OPERATORS                               WFR-79APR20 )
: D.R        ( DOUBLE INTEGER OUTPUT, RIGHT ALIGNED IN FIELD *)
       >R  SWAP  OVER  DABS  <#  #S  SIGN  #>
       R>  OVER  -  SPACES  TYPE  ;
  4
: D.     0  D.R  SPACE  ;            ( DOUBLE INTEGER OUTPUT *)
  6
: .R     >R  S->D  R>  D.R  ;       ( ALIGNED SINGLE INTEGER *)
  8
: .      S->D  D.  ;                 ( SINGLE INTEGER OUTPUT *)
 10
: ?      @  .  ;                  ( PRINT CONTENTS OF MEMORY *)
 12
   .  CFA       MESSAGE  2A  +  !  ( PRINT MESSAGE NUMBER )
-->
 15


# 77
(  PROGRAM DOCUMENTATION                          WFR-79APR20 )
HEX
: LIST                      ( LIST SCREEN BY NUMBER ON STACK *)
          DECIMAL   CR  DUP  SCR  !
         ." SCR # "   .  10  0  DO  CR  I  3  .R  SPACE
         I  SCR  @  .LINE  LOOP  CR  ;
  6
: INDEX      ( PRINT FIRST LINE OF EACH SCREEN FROM-2,  TO-1 *)
         0C  EMIT ( FORM FEED )  CR  1+  SWAP
         DO  CR  I  3  .R  SPACE
             0  I  .LINE
             ?TERMINAL  IF  LEAVE  ENDIF  LOOP  ;
: TRIAD     ( PRINT 3 SCREENS ON PAGE, CONTAINING # ON STACK *)
         0C  EMIT ( FF )  3  /  3  *  3  OVER  +  SWAP
         DO  CR  I  LIST  LOOP  CR
         0F  MESSAGE  CR  ;     DECIMAL   -->

H INTEREST GROUP                                 MAY 1, 1979

# 78
(  TOOLS                                          WFR-79APR20 )
HEX
: VLIST                            ( LIST CONTEXT VOCABULARY *)
               80  OUT  !    CONTEXT  @  @
     BEGIN  OUT  @  C/L  >  IF  CR  0  OUT  !  ENDIF
            DUP  ID.  SPACE  SPACE    PFA  LFA  @
            DUP  0=  ?TERMINAL  OR  UNTIL  DROP  ;
-->
  8
  9
 10
 11
 12
 13
 14
 15


# 79
(  TOOLS                                          WFR-79MAY03 )
HEX
  2
CREATE  MON         ( CALL MONITOR, SAVING RE-ENTRY TO FORTH *)
        0  C,    4C C,   ' LIT 18 + ,    SMUDGE
  5
  6
  7
  8
  9
DECIMAL
HERE             FENCE  !
HERE       28  +ORIGIN  !   ( COLD START FENCE )
HERE       30  +ORIGIN  !   ( COLD START DP )
LATEST     12  +ORIGIN  !   ( TOPMOST WORD )
'  FORTH  6  +  32  +ORIGIN  !  ( COLD VOC-LINK )  ;S


# 80
-->
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15

H INTEREST GROUP                                 MAY 1, 1979
