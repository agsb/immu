: COLD ;
: BYE ;
: (LIT) ;
: (COLON) ;
: (VAR) ;
: (CONS ;
: (DOES) ;
: EXECUTE ;
: EXIT ;
: (BRANCH) ;
: (0BRANCH) ;
: (DO) ;
: (+LOOP) ;
: (LOOP) ;
: (/LOOP) ;
: ! ;
: @ ;
: C! ;
: C@ ;
: RP! ;
: RP@ ;
: >R ;
: R@ ;
: I ;
: R> ;
: SP! ;
: SP@ ;
: DROP ;
: DUP ;
: SWAP ;
: OVER ;
: 0< ;
: AND ;
: OR ;
: XOR ;
: LSHIFT ;
: RSHIFT ;
: UM+ ;
: ?SAME ;
: TX! ;
: RX? ;
: READ-BLOCK ;
: WRITE-BLOCK ;
: -1 CONSTANT ;
: 0 CONSTANT ;
: 1 CONSTANT ;
: 2 CONSTANT ;
: H VARIABLE ;
: HLD VARIABLE ;
: UP VARIABLE ;
: BASE VARIABLE ;
: 'EMIT VARIABLE ;
: '?KEY VARIABLE ;
: SPAN VARIABLE ;
: >IN VARIABLE ;
: BLK VARIABLE ;
: #TIB VARIABLE ;
: FENCE VARIABLE ;
: BL CONSTANT ;
: CELL CONSTANT ;
: B/BUF CONSTANT ;
: B/LINE CONSTANT ;
: S0 CONSTANT ;
: TIB CONSTANT ;
: R0 CONSTANT ;
: TMP VARIABLE ;
: B0ADDR CONSTANT ;
: B1ADDR CONSTANT ;
: ACTIVE VARIABLE ;
: B0BLK VARIABLE ;
: B1BLK VARIABLE ;
: B0UPD VARIABLE ;
: B1UPD VARIABLE ;
: LAST VARIABLE ;
: CONTEXT VARIABLE ;
: CURRENT VARIABLE ;
: (FORTH) VARIABLE ;
: STATE VARIABLE ;
: DBL VARIABLE ;
: 'NUMBER VARIABLE ;
: SCR VARIABLE ;

: ?DUP DUP IF DUP THEN ;
: NIP SWAP DROP ;
: ROT >R SWAP R> SWAP ;
: -ROT ROT ROT ;
: 2DROP DROP DROP ;
: 2DUP OVER OVER ;
: 2SWAP >R -ROT R> -ROT ;
: INVERT -1 XOR ;
: + UM+ DROP ;
: 1+ 1 + ;
: 2+ 2 + ;
: NEGATE INVERT 1+ ;
: DNEGATE INVERT >R INVERT 1 UM+ R> + ;
: - NEGATE + ;
: 1- 1 - ;
: 2- 2 - ;
: ABS DUP 0< IF NEGATE THEN ;
: 0= IF 0 EXIT THEN -1 ;
: NOT 0= ;
: = XOR 0= ;
: <> = 0= ;
: U< 2DUP XOR 0< IF NIP 0< EXIT THEN - 0< ;
: < 2DUP XOR 0< IF DROP 0< EXIT THEN - 0< ;
: U> SWAP U< ;
: > SWAP < ;
: 0> 0 > ;
: D+ >R ROT UM+ ROT + R> + ;
: D< ROT SWAP < IF 2DROP -1 EXIT THEN U< ;
: MAX 2DUP < IF SWAP THEN DROP ;
: MIN 2DUP > IF SWAP THEN DROP ;
: WITHIN OVER - >R - R> U< ;
: UM* 0 SWAP 16 0 DO DUP UM+ >R >R DUP UM+ R> + R> IF >R OVER UM+ R> + THEN LOOP ROT DROP ;
: * UM* DROP ;
: M* 2DUP XOR 0< >R ABS SWAP ABS UM* R> IF DNEGATE THEN ;
: 2* 1 LSHIFT ;
: 2/ 1 RSHIFT ;
: UM/MOD 2DUP U< IF NEGATE 16 0 DO >R DUP UM+ >R >R DUP UM+ R> + DUP R> R@ SWAP >R UM+ R> OR IF >R DROP 1+ R> ELSE DROP THEN R> LOOP DROP SWAP EXIT THEN DROP 2DROP -1 DUP ;
: U/ 0 SWAP UM/MOD NIP ;
: EXTEND DUP 0< ;
: M/MOD EXTEND DUP >R IF NEGATE >R DNEGATE R> THEN >R DUP 0< IF R@ + THEN R> UM/MOD R> IF SWAP NEGATE SWAP THEN ;
: /MOD SWAP EXTEND ROT M/MOD ;
: MOD /MOD DROP ;
: / /MOD NIP ;
: */MOD >R M* R> M/MOD ;
: */ */MOD NIP ;
: HERE H @ ;
: PAD HERE B/LINE 2* + ;
: CELL+ CELL + ;
: CELL- CELL - ;
: CELLS 1 LSHIFT ;
: >CHAR 127 AND DUP BL 127 WITHIN 0= IF DROP [CHAR] _ THEN ;
: DEPTH SP@ S0 SWAP - 1 RSHIFT ;
: PICK 1+ CELLS SP@ + @ ;
: 2OVER 3 PICK 3 PICK ;
: +! SWAP OVER @ + SWAP ! ;
: 2! SWAP OVER ! CELL+ ! ;
: 2@ DUP CELL+ @ SWAP @ ;
: ?0>DUP DUP 0> IF DUP EXIT THEN DROP 0 ;
: @EXECUTE @ ?DUP IF EXECUTE THEN ;
: EMIT 'EMIT @EXECUTE ;
: ?KEY '?KEY @EXECUTE ;
: CONSOLE ['] TX! 'EMIT ! ['] RX? '?KEY ! ;
: KEY BEGIN ?KEY UNTIL ;
: COUNT DUP 1+ SWAP C@ ;
: TYPE ?0>DUP IF 0 DO COUNT EMIT LOOP THEN DROP ;
: CR 13 EM/IT 10 EMIT ;
: BELL 7 EMIT ;
: BACKSPACE 8 DUP EMIT BL EMIT EMIT ;
: PAGE 50 0 DO CR LOOP ;
: SPACE BL EMIT ;
: SPACES ?0>DUP IF 0 DO SPACE LOOP THEN ;
: HEX 16 BASE ! ;
: DECIMAL 10 BASE ! ;
: BINARY 2 BASE ! ;
: DIGIT DUP 9 > IF 55 + EXIT THEN [CHAR] 0 + ;
: <# DROP PAD HLD ! ;
: HOLD -1 HLD +! HLD @ C! ;
: # BASE @ 0 SWAP UM/MOD SWAP DIGIT HOLD ;
: #S BEGIN # DUP WHILE REPEAT ;
: SIGN SWAP 0< IF [CHAR] - HOLD THEN ;
: #> DROP HLD @ PAD OVER - ;
: (PAD) 2DUP < IF OVER - SPACES EXIT THEN DROP ;
: . DUP ABS 0 <# #S SIGN #> TYPE SPACE ;
: U. 0 <# #S #> TYPE SPACE ;
: .R >R DUP ABS 0 <# #S SIGN #> R> (PAD) TYPE ;
: U.R >R 0 <# #S #> R> (PAD) /VARIABLETYPE ;
: H. BASE @ HEX SWAP U. BASE ! ;
: ? @ . ;
: EXPECT DUP TMP ! BEGIN DUP 0= IF DROP BL SWAP C! TMP @ SPAN ! EXIT THEN KEY DUP 13 = IF DROP TMP @ SWAP - SPAN ! BL SWAP C! SPACE EXIT ELSE DUP 8 = OVER 127 = OR IF DROP DUP TMP @ <> IF SWAP 1- SWAP 1+ BACKSPACE THEN ELSE DUP 24 = IF DROP 2DROP 0 SPAN ! EXIT ELSE DUP BL 127 WITHIN IF DUP EMIT SWAP >R OVER C! R> 1- SWAP 1+ SWAP ELSE DROP BELL THEN THEN THEN THEN AGAIN ;
: QUERY TIB 80 EXPECT SPAN @ #TIB ! 0 >IN ! 0 BLK ! ;
: ACTIVATE B0BLK @ = 0= ACTIVE ! ;
: FIND-BLOCK DUP B0BLK @ = IF DROP B0ADDR -1 EXIT THEN B1BLK @ = IF B1ADDR -1 EXIT THEN 0 ;
: SOURCE BLK @ ?DUP IF FIND-BLOCK DROP EXIT THEN TIB ;
: EXTRACT SOURCE >IN @ + C@ ;
: ?MORE >IN @ #TIB @ < ;
: WORD TMP ! HERE 1+ BEGIN ?MORE EXTRACT TMP @ = AND WHILE 1 >IN +! REPEAT BEGIN ?MORE EXTRACT TMP @ <> AND WHILE EXTRACT OVER C! 1+ 1 >IN +! REPEAT EXTRACT OVER C! 1 >IN +! HERE 1+ - HERE C! HERE ;
: .S S0 SP@ CELL+ = IF EXIT THEN S0 SP@ CELL+ DO I @ . CELL /LOOP ;
: CMOVE ?0>DUP IF 0 DO >R COUNT R@ C! R> 1+ LOOP 2DROP THEN ;
: <CMOVE ?0>DUP IF >R SWAP R@ + 1- SWAP R@ + 1- R> 0 DO >R COUNT R@ C! 2 - R> 1- LOOP 2DROP THEN ;
: MOVE CELLS CMOVE ;
: UNLOOP R> R> R> 2DROP >R ;
: -TRAILING ?0>DUP IF 1 SWAP 1- NEGATE DO DUP I - C@ BL XOR IF I 1- NEGATE UNLOOP EXIT THEN LOOP 0 THEN ;
: -TEXT SWAP DUP 0= IF 2DROP DROP 0 EXIT THEN 0 DO OVER C@ OVER C@ - DUP IF -ROT 2DROP UNLOOP EXIT THEN DROP 1+ SWAP 1+ SWAP LOOP 2DROP 0 ;
: FILL OVER 0> IF -ROT 0 DO 2DUP C! 1+ LOOP ELSE DROP THEN 2DROP ;
: ERASE 0 FILL ;
: BLANK BL FILL ;
: ?DIGIT DUP 64 > IF 55 - ELSE DUP 47 > IF 48 - THEN THEN DUP BASE @ U< IF -1 EXIT THEN DROP 0 ;
: CONVERT 1+ BEGIN DUP C@ ?DIGIT WHILE ROT BASE @ * + SWAP 1+ REPEAT ;
: FORTH (FORTH) CONTEXT ! ;
: DEFINITIONS CONTEXT @ CURRENT ! ;
: >NFA 10 - ;
: >LFA 6 + ;
: >CFA 8 + ;
: >PFA 10 + ;
: LOOKUP BEGIN ?DUP WHILE 2DUP ?SAME IF NIP -1 EXIT THEN >LFA @ REPEAT 0 ;
: UPCASE COUNT 0 DO COUNT DUP [CHAR] a [CHAR] { WITHIN IF BL - THEN OVER 1- C! LOOP DROP ;
: ?FIND DUP UPCASE CONTEXT @ @ LOOKUP IF >PFA -1 EXIT THEN (FORTH) CONTEXT @ = IF 0 EXIT THEN (FORTH) @ LOOKUP IF >PFA -1 EXIT THEN 0 ;
: FIND BL WORD ?FIND IF >NFA >CFA EXIT THEN DROP 0 ;
: ?NUMBER DUP 1+ C@ [CHAR] - = DUP >R IF 1+ THEN 0 SWAP CONVERT C@ BL = IF -1 ELSE DROP 0 THEN R> OVER AND IF SWAP NEGATE SWAP THEN ;
: ABORT S0 SP! 0 STATE ! QUIT ;
: ?WHAT COUNT TYPE [CHAR] ? EMIT CR ABORT ;
: $+ DUP DUP C@ + 1+ ;
: ($") R> $+ >R ;
: ?STACK SP@ S0 U> SP@ PAD B/BUF + U< OR IF $" STK ERR" ?WHAT THEN ;
: ( [CHAR] ) WORD DROP ;
: .( [CHAR] ) WORD COUNT TYPE ;
: \ BLK @ 0= IF #TIB @ >IN ! EXIT THEN >IN @ B/LINE + 1- DUP B/LINE MOD - >IN ! ;
: ?ENOUGH [CHAR] : EMIT KEY BACKSPACE [CHAR] q = ;
: WORDS 0 TMP ! CR CONTEXT @ @ BEGIN ?DUP WHILE DUP COUNT [HEX] 1F AND 5 MIN DUP >R TYPE 8 R> - SPACES 1 TMP +! TMP @ 199 > IF 0 TMP ! ?ENOUGH IF DROP EXIT THEN THEN >LFA @ REPEAT ;
: ?COMPILE-ONLY DUP >NFA C@ [HEX] 40 AND IF $" COMP ONLY" ?WHAT THEN ;
: ?IMMEDIATE DUP >NFA C@ [HEX] 80 AND ;
: , H @ ! CELL H +! ;
: C, H @ C! 1 H +! ;
: ' BL WORD ?FIND 0= IF ?WHAT THEN ;
: COMPILE R> DUP @ , CELL+ >R ;
: LITERAL COMPILE (LIT) , ;
: DUMP BASE @ >R HEX DUP 16 0 DO COUNT 0 <# # # #> TYPE SPACE LOOP DROP 16 0 DO COUNT >CHAR EMIT LOOP R> BASE ! SPACE ;
: HD BASE @ >R HEX 0 DO CR DUP 0 <# # # # # #> TYPE SPACE DUMP LOOP R> BASE ! ;
: PFA>CFA CELL- ;
: CFA>PFA CELL+ ;
: NUMBER DUP ?NUMBER IF NIP EXIT THEN ?WHAT ;
: NUMBER 'NUMBER @EXECUTE ;
: DLITERAL SWAP [COMPILE] LITERAL [COMPILE] LITERAL ;
: INTERPRET BEGIN BL WORD DUP C@ WHILE STATE @ IF ?FIND IF ?IMMEDIATE IF EXECUTE ELSE PFA>CFA , THEN ELSE NUMBER DBL @ IF [COMPILE] DLITERAL ELSE [COMPILE] LITERAL THEN THEN ELSE ?FIND IF ?COMPILE-ONLY EXECUTE ELSE NUMBER THEN THEN ?STACK REPEAT DROP ;
: .OK STATE @ 0= IF [CHAR] O EMIT [CHAR] K EMIT THEN CR ;
: ['] ' [COMPILE] LITERAL ;
: [HEX] BASE @ >R BL WORD DUP UPCASE DUP HEX ?NUMBER 0= IF R> BASE ! ?WHAT THEN NIP R> BASE ! STATE @ IF [COMPILE] LITERAL THEN ;
: [CHAR] BL WORD 1+ C@ STATE @ IF [COMPILE] LITERAL THEN ;
: [COMPILE] ' PFA>CFA , ;
: ALLOT HERE + H ! ;
: ENTRY DUP UPCASE COUNT 5 SWAP DO DUP I + BL SWAP C! LOOP DROP ;
: CREATE BL WORD ENTRY 6 ALLOT CURRENT @ @ , ['] (VAR) , HERE >NFA LAST ! ;
: PERFORMS R> DUP @ CFA>PFA LAST @ >CFA ! CELL+ >R ;
: LINK LAST @ CURRENT @ ! ;
: VARIABLE CREATE 0 , LINK ;
: CONSTANT CREATE , PERFORMS (CONST) LINK ;
: [ 0 STATE ! ;
: ] -1 STATE ! ;
: : CREATE PERFORMS (COLON) ] ;
: ; COMPILE EXIT [COMPILE] [ LINK ;
: (DEFER) $" DEFER ERR" ?WHAT ;
: DEFER CREATE PERFORMS (COLON) COMPILE (DEFER) COMPILE EXIT LINK ;
: IS LAST @ >CFA ' ! ;
: MARK HERE 0 , ;
: RESOLVE HERE SWAP ! ;
: IF COMPILE (0BRANCH) MARK ;
: ELSE COMPILE (BRANCH) MARK SWAP RESOLVE ;
: THEN RESOLVE ;
: DO COMPILE (DO) HERE ;
: LOOP COMPILE (LOOP) , ;
: +LOOP COMPILE (+LOOP) , ;
: /LOOP COMPILE (/LOOP) , ;
: LEAVE R> R> R> DROP DUP >R >R >R ;
: BEGIN HERE ;
: WHILE [COMPILE] IF ;
: REPEAT COMPILE (BRANCH) SWAP , RESOLVE ;
: AGAIN COMPILE (BRANCH) , ;
: UNTIL COMPILE (0BRANCH) , ;
: LAST @ C@ [HEX] 80 OR LAST @ C! ;
: LAST @ C@ [HEX] 40 OR LAST @ C! ;
: RECURSE LAST @ >CFA , ;
: I' R> R> R@ -ROT >R >R ;
: J R> R> R> R@ -ROT >R >R SWAP >R ;
: $, [CHAR] " WORD C@ 1+ ALLOT ;
: $" COMPILE ($") $, ;
: (.") R> $+ >R COUNT TYPE ;
: ." COMPILE (.") $, ;
: (ABORT") R> $+ >R SWAP IF ?WHAT THEN DROP ;
: ABORT" COMPILE (ABORT") $, ;
: <BUILDS VARIABLE ;
: DOES> PERFORMS (DOES) R> LAST @ >PFA ! ;
: ARRAY <BUILDS CELLS ALLOT DOES> SWAP CELLS + ;
: USER <BUILDS CELLS , DOES> @ UP @ + ;
: VOCABULARY <BUILDS 0 , DOES> CONTEXT ! ;
: EMPTY FORTH DEFINITIONS FENCE @ DUP DUP CONTEXT @ ! CURRENT @ ! >PFA CELL+ H ! ;
: FORGET CURRENT @ CONTEXT @ <> ABORT" CURRENT" ' >NFA DUP FENCE @ U> 0= ABORT" FENCE" DUP CONTEXT @ U> 0= ABORT" CONTEXT" DUP H ! >LFA @ CONTEXT @ ! ;
: EMPTY-BUFFERS -1 ACTIVE ! 0 DUP B0UPD ! B1UPD ! -1 DUP B0BLK ! B1BLK ! ;
: ?I/O DUP 0= IF EMPTY-BUFFERS THEN 0= ABORT" I/O ERR" ;
: ?EXIT-CACHED DUP FIND-BLOCK IF SWAP ACTIVATE R> DROP THEN ;
: 0SAVE B0UPD @ IF B0ADDR B0BLK @ WRITE-BLOCK EXIT THEN -1 ;
: 1SAVE B1UPD @ IF B1ADDR B1BLK @ WRITE-BLOCK EXIT THEN -1 ;
: BUFFER ?EXIT-CACHED ACTIVE @ IF 0SAVE ?I/O B0BLK ! 0 ACTIVE ! 0 B0UPD ! B0ADDR ELSE 1SAVE ?I/O B1BLK ! 1 ACTIVE ! 0 B1UPD ! B1ADDR THEN ;
: BLOCK ?EXIT-CACHED DUP BUFFER DUP ROT READ-BLOCK ?I/O ;
: UPDATE ACTIVE @ 0< IF EXIT THEN -1 ACTIVE @ IF B1UPD ELSE B0UPD THEN ! ;
: WIPE ACTIVE @ 0< IF EXIT THEN ACTIVE @ IF B1ADDR ELSE B0ADDR THEN B/BUF BLANK ;
: COPY SWAP BLOCK DROP ACTIVE @ IF B1BLK ELSE B0BLK THEN ! ;
: SAVE-BUFFERS 0SAVE 1SAVE AND ?I/O 0 DUP B0UPD ! B1UPD ! ;
: FLUSH SAVE-BUFFERS ;
: LIST DUP SCR ! BLOCK 16 0 DO CR I 1+ 2 .R [CHAR] : EMIT SPACE DUP I B/LINE * + B/LINE TYPE [CHAR] : EMIT LOOP DROP SPACE ;
: LOAD BLK @ >R >IN @ >R #TIB @ >R ACTIVE @ >R DUP BLOCK DROP BLK ! B/BUF #TIB ! 0 >IN ! INTERPRET R> ACTIVE ! R> #TIB ! R> >IN ! R> BLK ! ;
: THRU 1+ SWAP DO I . I LOAD LOOP ;
: INDEX 0 -ROT 1+ SWAP DO CR I 0 .R [CHAR] : EMIT SPACE I BLOCK B/LINE TYPE 1+ DUP 20 > IF ?ENOUGH IF UNLOOP DROP EXIT THEN DROP 0 THEN LOOP DROP ;
: RESET FORTH DEFINITIONS EMPTY-BUFFERS DECIMAL [HEX] F380 UP ! $" T3XFORTH" COUNT TYPE CR ABORT ;
: (QUIT) BEGIN R0 RP! CONSOLE QUERY INTERPRET .OK AGAIN ;
: (FENCE) ;

