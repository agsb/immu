 : HOME ;
 : SCROLL ;
 : KEY ;
 : EMIT ;
 : CR ;
 : ?TERMINAL ;
 : LIT ;
 : SETUP ;
 : EXECUTE ;
 : BRANCH ;
 : 0BRANCH ;
 : (LOOP) ;
 : (+LOOP) ;
 : (DO) ;
 : I ;
 : DIGIT ;
 : (FIND) ;
 : ENCLOSE ;
 : EMIT ;
 : KEY ;
 : ?TERMINAL ;
 : CR ;
 : CMOVE ;
 : U* ;
 : U/ ;
 : AND ;
 : OR ;
 : XOR ;
 : SP@ ;
 : SP! ;
 : RP! ;
 : ;S ;
 : LEAVE ;
 : >R ;
 : R> ;
 : R ;
 : 0= ;
 : 0< ;
 : + ;
 : D+ ;
 : MINUS ;
 : DMINUS ;
 : OVER ;
 : DROP ;
 : SWAP ;
 : DUP ;
 : +! ;
 : TOGGLE ;
 : @ ;
 : C@ ;
 : ! ;
 : C! ;
 : : ?EXEC !CSP CURRENT @ CONTEXT ! CREATE ] ;
 : DOCOL ;
 : ; ?CSP COMPILE ;S SMUDGE [ ; 
 : CONSTANT CREATE SMUDGE , ;
 : DOCON ;
 : VARIABLE CONSTANT ;
 : DOVAR ;
 : USER CONSTANT ;
 : DOUSE ;
 : 0 CONSTANT ;
 : 1 CONSTANT ;
 : 2 CONSTANT ;
 : 3 CONSTANT ;
 : BL CONSTANT ;
 : C/L CONSTANT ;
 : FIRST CONSTANT ;
 : LIMIT CONSTANT ;
 : B/BUF CONSTANT ;
 : B/SCR CONSTANT ;
 : +ORIGIN LITERAL + ;
 : TIB USER ;
 : WIDTH USER ;
 : WARNING USER ;
 : FENCE USER ;
 : DP USER ;
 : VOC-LINK USER ;
 : BLK USER ;
 : IN USER ;
 : OUT USER ;
 : SCR USER ;
 : OFFSET USER ;
 : CONTEXT USER ;
 : CURRENT USER ;
 : STATE USER ;
 : BASE USER ;
 : DPL USER ;
 : PLO USER ;
 : CSP USER ;
 : R# USER ;
 : HLD USER ;
 : 1+ 1 + ;
 : 2+ 2 + ;
 : HERE DP @ ;
 : ALLOT DP +! ;
 : , HERE ! 2 ALLOT ;
 : C, HERE C! 1 ALLOT ;
 : - MINUS + ;
 : = - 0= ;
 : < - 0< ;
 : > SWAP < ;
 : ROT >R SWAP R> SWAP ;
 : SPACE BL EMIT ;
 : -DUP DUP IF DUP ENDIF ;
 : TRAVERSE SWAP BEGIN OVER + 7F OVER C@ < UNTIL SWAP DROP ;
 : LATEST CURRENT @ @ ;
 : LFA 4 - ;
 : CFA 2 - ;
 : NFA 5 - -1 TRAVERSE ;
 : PFA 1 TRAVERSE 5 + ;
 : !CSP SP@ CSP ! ;
 : ?ERROR SWAP IF ERROR ELSE DROP ENDIF ;
 : ?COMP STATE @ 0= 11 ?ERROR ;
 : ?EXEC STATE @ 12 ?ERROR ;
 : ?PAIRS - 13 ?ERROR ;
 : ?CSP SP@ CSP @ - 14 ?ERROR ;
 : ?LOADING BLK @ 0= 16 ?ERROR ;
 : COMPILE ?COMP R> DUP 2+ >R @ , ;
 : [ 0 STATE ! ;
 : ] C0 STATE ! ;
 : SMUDGE LATEST 20 TOGGLE ;
 : HEX 10 BASE ! ;
 : DECIMAL 0A BASE ! ;
 : R> LATEST PFA CFA ! ;
 : ;: ?CSP COMPILE [COMPILE] [ SMUDGE ;
 : <BUILDS 0 CONSTANT ;
 : DOES> R> LATEST PFA ! ;
 : DODOE ;
 : COUNT DUP 1+ SWAP C@ ;
 : TYPE -DUP IF OVER + SWAP DO I C@ EMIT LOOP ELSE DROP ENDIF ;
 : -TRAILING DUP 0 DO OVER OVER + 1 - C@ BL - IF LEAVE ELSE 1 - ENDIF LOOP ;
 : R COUNT DUP 1+ R> + >R TYPE ;
 : ." 22 STATE @ IF COMPILE WORD HERE C@ 1+ ALLOT ELSE WORD HERE COUNT TYPE ENDIF ;
 : EXPECT OVER + OVER DO KEY DUP 0E +ORIGIN @ = IF DROP 08 OVER I = DUP R> 2 - + >R - ELSE DUP 0D = IF LEAVE DROP BL 0 ELSE DUP ENDIF I C! 0 I 1+ ! ENDIF EMIT LOOP DROP ;
 : QUERY TIB @ 50 EXPECT 0 IN ! ;
 : X BLK @ IF 1 BLK +! 0 IN ! BLK @ 7 AND 0= IF ?EXEC R> DROP ENDIF ELSE R> DROP ENDIF ;
 : FILL SWAP >R OVER C! DUP 1+ R> 1 - CMOVE ;
 : ERASE 0 FILL ;
 : BLANKS BL FILL ;
 : HOLD -1 HLD +! HLD @ C! ;
 : PAD HERE 44 + ;
 : WORD BLK @ IF BLK @ BLOCK ELSE TIB @ ENDIF IN @ + SWAP ENCLOSE HERE 22 BLANKS IN +! OVER - >R R HERE C! + HERE 1+ R> CMOVE ;
 : BEGIN 1+ DUP >R C@ BASE @ DIGIT WHILE SWAP BASE @ U* DROP ROT BASE @ U* D+ DPL @ 1+ IF 1 DPL +! ENDIF R> REPEAT R> ;
 : NUMBER 0 0 ROT DUP 1+ C@ 2D = DUP >R + -1 BEGIN DPL ! DUP C@ BL - WHILE DUP C@ 2E - 0 ?ERROR 0 REPEAT DROP R> IF DMINUS ENDIF ;
 : -FIND BL WORD HERE CONTEXT @ @ DUP 0= IF DROP HERE LATEST ENDIF ;
 : (ABORT) ABORT ;
 : ERROR WARNING @ 0< IF (ABORT) ENDIF HERE COUNT TYPE ." ? " MESSAGE SP! IN @ BLK @ QUIT ;
 : ID. PAD 020 5F FILL DUP PFA LFA OVER - PAD SWAP CMOVE PAD COUNT 01F AND TYPE SPACE ;
 : CREATE TIB HERE 0A0 + < 2 ?ERROR -FIND IF DROP NFA ID. 4 MESSAGE SPACE ENDIF HERE DUP C@ WIDTH @ MIN 1+ ALLOT DP C@ 0FD = ALLOT DUP A0 TOGGLE HERE 1 - 80 TOGGLE LATEST , CURRENT @ ! HERE 2+ , ;
 : [COMPILE] -FIND 0= 0 ?ERROR DROP CFA , ;
 : LITERAL STATE @ IF COMPILE LIT , ENDIF ;
 : DLITERAL STATE @ IF SWAP [COMPILE] LITERAL [COMPILE] LITERAL ENDIF ;
 : ?STACK 09E SP@ < 1 ?ERROR SP@ 020 < 7 ?ERROR ;
 : INTERPRET BEGIN -FIND IF STATE @ < IF CFA , ELSE CFA EXECUTE ENDIF ?STACK ELSE HERE NUMBER DPL @ 1+ IF [COMPILE] DLITERAL ELSE DROP [COMPILE] LITERAL ENDIF ?STACK ENDIF AGAIN ;
 : IMMEDIATE LATEST 40 TOGGLE ;
 : VOCABULARY <BUILDS A081 , CURRENT @ CFA , HERE VOC-LINK @ , VOC-LINK ! DOES> 2+ CONTEXT ! ;
 : DEFINITIONS CONTEXT @ CURRENT ! ;
 : ( 29 WORD ;
 : QUIT 0 BLK ! [COMPILE] [ BEGIN RP! CR QUERY INTERPRET STATE @ 0= IF ." OK" ENDIF AGAIN ;
 : ABORT SP! DECIMAL DR0 CR ." FORTH-65 V 4.0" [COMPILE] FORTH DEFINITIONS QUIT ;
 : COLD ;
 : S->D ;
 : +- 0< IF MINUS ENDIF ;
 : D+- 0< IF DMINUS ENDIF ;
 : ABS DUP +- ;
 : DABS DUP D+- ;
 : MIN OVER OVER > IF SWAP ENDIF DROP ;
 : MAX OVER OVER < IF SWAP ENDIF DROP ;
 : M* OVER OVER XOR >R ABS SWAP ABS U* R> D+- ;
 : M/ OVER >R >R DABS R ABS U/ R> R XOR +- SWAP R> +- SWAP ;
 : * U* DROP ;
 : /MOD >R S->D R> M/ ;
 : / /MOD SWAP DROP ;
 : MOD /MOD DROP ;
 : */MOD >R M* R> M/ ;
 : */ */MOD SWAP DROP ;
 : M/MOD >R 0 R U/ R> SWAP >R U/ R> ;
 : USE VARIABLE ;
 : USE VARIABLE ;
 : +BUF 84 + DUP LIMIT = IF DROP FIRST ENDIF DUP PREV @ - ;
 : UPDATE PREV @ @ 8000 OR PREV @ ! ;
 : EMPTY-BUFFERS FIRST LIMIT OVER - ERASE ;
 : DR0 0 OFFSET ! ;
 : DR1 07D0 OFFSET ! ;
 : BUFFER USE @ DUP >R BEGIN +BUF UNTIL USE ! R @ 0< IF R 2+ R @ 7FFF AND 0 R/W ENDIF R ! R PREV ! R> 2+ ;
 : BLOCK OFFSET @ + >R PREV @ DUP @ R - DUP + IF BEGIN +BUF 0= IF DROP R BUFFER DUP R 1 R/W 2 - ENDIF DUP @ R - DUP + 0= UNTIL DUP PREV ! ENDIF R> DROP 2+ ;
 : >R C/L B/BUF */MOD R> B/SCR * + BLOCK + C/L ;
 : .LINE -TRAILING TYPE ;
 : MESSAGE WARNING @ IF -DUP IF 4 OFFSET @ B/SCR / - .LINE ENDIF ELSE ." MSG # " . ENDIF ;
 : LOAD BLK @ >R IN @ >R 0 IN ! B/SCR * BLK ! INTERPRET R> IN ! R> BLK ! ;
 : ?LOADING 0 IN ! B/SCR BLK @ OVER MOD - BLK +! ;
 : (EMIT) ;
 : (KEY) ;
 : (TERMINAL) ;
 : (CR) ;
 : DATA CONSTANT ;
 : STATUS CONSTANT ;
 : #HL 0 0A U/ SWAP 30 + HOLD ;
 : D/CHAR ;
 : ?DISC 1 D/CHAR >R 0= IF R 15 = IF CR BEGIN 4 D/CHAR EMIT UNTIL QUIT ENDIF BEGIN 4 D/CHAR DROP UNTIL ENDIF R> DROP ;
 : BLOCK-WRITE ;
 : BLOCK-READ ;
 : R/W LITERAL HLD ! SWAP 0 OVER > OVER 0F9F > OR 6 ?ERROR 07D0 /MOD #HL DROP 2F HOLD BL HOLD 1A /MOD SWAP 1+ #HL #HL DROP BL HOLD
 #HL #HL DROP BL HOLD DUP IF 49 ELSE 4F ENDIF HOLD HLD @ 0A BLOCK-WRITE ?DISC IF BLOCK-READ ELSE B/BUF BLOCK-WRITE ENDIF ?DISC ;
 : ' -FIND 0= 0 ?ERROR DROP [COMPILE] LITERAL ;
 : FORGET [COMPILE] ' NFA DUP FENCE @ U< 15 ?ERROR >R VOC-LINK @ BEGIN R OVER U< WHILE [COMPILE] FORTH DEFINITIONS @ DUP VOC-LINK ! REPEAT BEGIN DUP 4 - BEGIN PFA LFA @ DUP R U< UNTIL OVER 2 - ! @ -DUP 0= UNTIL R> DP ! ;
 : ' -FIND 0= 0 ?ERROR DROP [COMPILE] LITERAL ;
 : FORGET CURRENT @ CONTEXT @ - 18 ?ERROR [COMPILE] ' DUP FENCE @ < 15 ?ERROR DUP NFA DP ! LFA @ CURRENT @ ! ;
 : BACK HERE - , ;
 : BEGIN ?COMP HERE 1 ;
 : ENDIF ?COMP 2 ?PAIRS HERE OVER - SWAP ! ;
 : THEN [COMPILE] ENDIF ;
 : DO COMPILE (DO) HERE 3 ;
 : LOOP 3 ?PAIRS COMPILE (LOOP) BACK ;
 : +LOOP 3 ?PAIRS COMPILE (+LOOP) BACK ;
 : UNTIL 1 ?PAIRS COMPILE 0BRANCH BACK ;
 : END [COMPILE] UNTIL ;
 : AGAIN 1 ?PAIRS COMPILE BRANCH BACK ;
 : REPEAT >R >R [COMPILE] AGAIN R> R> 2 - [COMPILE] ENDIF ;
 : IF COMPILE 0BRANCH HERE 0 , 2 ;
 : ELSE 2 ?PAIRS COMPILE BRANCH HERE 0 , SWAP 2 [COMPILE] ENDIF 2 ;
 : WHILE [COMPILE] IF 2+ ;
 : SPACES 0 MAX -DUP IF 0 DO SPACE LOOP ENDIF ;
 : <# PAD HLD ! ;
 : #> DROP DROP HLD @ PAD OVER - ;
 : SIGN ROT 0< IF 2D HOLD ENDIF ;
 : # BASE @ M/MOD ROT 9 OVER < IF 7 + ENDIF 30 + HOLD ;
 : #S BEGIN # OVER OVER OR 0= UNTIL ;
 : D.R >R SWAP OVER DABS <# #S SIGN #> R> OVER - SPACES TYPE ;
 : D. 0 D.R SPACE ;
 : .R >R S->D R> D.R ;
 : . S->D D. ;
 : ? @ . ;
 : LIST DECIMAL CR DUP SCR ! ." SCR # " . 10 0 DO CR I 3 .R SPACE I SCR @ .LINE LOOP CR ;
 : INDEX 0C EMIT CR 1+ SWAP DO CR I 3 .R SPACE 0 I .LINE ?TERMINAL IF LEAVE ENDIF LOOP ;
 : TRIAD 0C EMIT 3 / 3 * 3 OVER + SWAP DO CR I LIST LOOP CR 0F MESSAGE CR ;
 : VLIST 80 OUT ! CONTEXT @ @ BEGIN OUT @ C/L > IF CR 0 OUT ! ENDIF DUP ID. SPACE SPACE PFA LFA @ DUP 0= ?TERMINAL OR UNTIL DROP ;
 : MON 0 C, 4C C, ' LIT 18 + , SMUDGE DECIMAL HERE FENCE ! HERE 28 +ORIGIN ! HERE 30 +ORIGIN ! LATEST 12 +ORIGIN ! ' FORTH 6 + 32 +ORIGIN ! ;
 
