   1               	# 1 "main.S"
   1               	
   0               	
   0               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	; atmega8 avr
  30               	;
  31               	; UPDATE: 10/2022 to include stuff for atmega328 
  32               	;---------------------------------------------------------------------- 
  33               	;
  34               	; version information
  35               	;
  36               	.equ version, 12 ; 0.00.10
  37               	
  38               	#include "macros.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	;
  30               	;   MUST use gnu cpp 
  31               	;   use with .S (upper S) or
  32               	;   use with -x assembler-with-cpp
  33               	;
  34               	;     can't use alias 
  35               	;----------------------------------------------------------------------
  36               	;
  37               	; all defines, equs, macros are defined in this file
  38               	;
  39               	
  40               	#define atmega328
  41               	
  42               	;----------------------------------------------------------------------
  43               	;
  44               	;    about registers 
  45               	;
  46               	; r1:r0 reserved and used in internal atmega8
  47               	;   instructions, as spm, mul, des, etc
  48               	;   do not use inside interrupts
  49               	
  50               	#define _reserved_r0_ r0
  51               	#define _reserved_r1_ r1
  52               	
  53               	;----------------------------------------------------------------------
  54               	;
  55               	;  reserved for use inside timer0 interrupt
  56               	;
  57               	; sreg keep in interrupts
  58               	#define _sreg_ r2
  59               	
  60               	; offset for adjust timer0 interrupt counter
  61               	#define _offs_ r3
  62               	
  63               	; ticks counter for timer0 at 1 ms, (count 65 sec)
  64               	#define ticks_low  r4
  65               	#define ticks_high r5
  66               	
  67               	;-----------------------------------------------------------------------
  68               	;
  69               	; forth model (like pdp-11)
  70               	;
  71               	; must be 16bits (16 to 31) registers
  72               	;
  73               	; avr virtual machine as https://www.controllersandpcs.de/Project_sources/Macro_Reference.pdf
  74               	;
  75               	
  76               	; Z generic pointer for access sram and flash memory, lpm, spm, index, etc
  77               	#define zpm_low r30
  78               	#define zpm_high r31
  79               	
  80               	; Y parameter stack pointer for access sram
  81               	#define psp_low r28
  82               	#define psp_high r29
  83               	
  84               	; X return stack pointer for access sram
  85               	#define rsp_low r26
  86               	#define rsp_high r27
  87               	
  88               	; top, Top parameter stack, A in avr virtual machine
  89               	#define tos_low r24
  90               	#define tos_high r25
  91               	
  92               	; nos, Next temporary, B in avr virtual machine
  93               	#define nos_low r22
  94               	#define nos_high r23
  95               	
  96               	; wrk, Work temporary, C in avr virtual machine 
  97               	#define wrk_low r20
  98               	#define wrk_high r21
  99               	
 100               	; ipt, instruction pointer, C in avr virtual machine 
 101               	#define ipt_low r18
 102               	#define ipt_high r19
 103               	
 104               	; extras
 105               	#define _zero_ r6
 106               	#define _work_ r7
 107               	
 108               	; registers r8 to r17 free
 109               	
 110               	;.altmacro
 111               	
 112               	;----------------------------------------------------------------------
 113               	;
 114               	;  trick adapted from amforth-6.9
 115               	;
 116               	.macro STRINGS string
 117               	    .byte 8f - 7f
 118               	7:  .string "\string"
 119               	8:  .balign 2
 120               	.endm
 121               	
 122               	;----------------------------------------------------------------------
 123               	;
 124               	; header of leaf word in dictionary
 125               	;    flags must be 0x80, 0x40, 0x20, 0x10
 126               	;    size  must be 1 to 15
 127               	;
 128               	;----------------------------------------------------------------------
 129               	;
 130               	; set start reverse linked list
 131               	;
 132               	.set _link_, 0x0
 133               	.set _list_, 0x0
 134               	.set _last_, 0x0
 135               	
 136               	.macro HEADER name, label, flags=0x0
 137               	is_\label:
 138               	10:
 139               	    .p2align 1, 0x00
 140               	7:    
 141               	    .word _link_
 142               	    .set _link_, 7b
 143               	    .byte (9f - 8f) + \flags
 144               	8:    
 145               	    .ascii "\name"
 146               	9:    
 147               	    .p2align 1, 0x20
 148               	\label:
 149               	11:
 150               	    .set _last_, _list_
 151               	    .set _list_, _last_ + (11b - 10b + 1)
 152               	.endm
 153               	
 154               	;----------------------------------------------------------------------
 155               	; little endian !!! AVR
 156               	;
 157               	;    A    Z (r31:r30) is used as generic address pointer, deed by avr ISA
 158               	;
 159               	;    RSP  Y (r29:r28) used as return stack pointer    
 160               	;    PSP  X (r27:r26) used as data/parameter stack pointer
 161               	;    TOS  T (r25:r24) used as top in stack
 162               	;    NOS  N (r22:r23) used as second in stack
 163               	;    WRK  W (r20:r21) used as work
 164               	;    IPT  I (r18:r19) used as instruction pointer
 165               	;
 166               	;   all stacks grows downwards.
 167               	;
 168               	;----------------------------------------------------------------------
 169               	;    push into return stack, 
 170               	.macro rspush low, high 
 171               	    st -X, \low
 172               	    st -X, \high
 173               	.endm
 174               	
 175               	;----------------------------------------------------------------------
 176               	;    pull from return stack, 
 177               	.macro rspull low, high
 178               	    ld \high, X+
 179               	    ld \low, X+
 180               	.endm
 181               	
 182               	;----------------------------------------------------------------------
 183               	;    push into data stack, 
 184               	.macro pspush low, high
 185               	    st -Y, \low
 186               	    st -Y, \high
 187               	.endm
 188               	
 189               	;----------------------------------------------------------------------
 190               	;    pull from data stack, 
 191               	.macro pspull low, high
 192               	    ld \high, Y+
 193               	    ld \low, Y+
 194               	.endm
 195               	
 196               	;----------------------------------------------------------------------
 197               	;    load a word from program memory (flash)
 198               	;    ( only works with TWO lpm !!! )
 199               	;    Z address in bytes!
 200               	.macro pmload low, high
 201               	    lsl zpm_low
 202               	    rol zpm_high
 203               	    lpm \low, Z+
 204               	    lpm \high, Z+
 205               	    ror zpm_high
 206               	    ror zpm_low
 207               	.endm
 208               	
 209               	;----------------------------------------------------------------------
 210               	;    load from static memory (sram), increments pointer
 211               	;
 212               	.macro srload byte
 213               	    ld \byte, Z+
 214               	.endm
 215               	
 216               	;----------------------------------------------------------------------
 217               	;    save to static memory (sram), increments pointer
 218               	;
 219               	.macro srsave byte
 220               	    st Z+, \byte 
 221               	.endm
 222               	
 223               	;----------------------------------------------------------------------
 224               	;
 225               	; for Atmega8:
 226               	;
 227               	
 228               	;----------------------------------------------------------------------
 229               	; all primitives must start bellow init_
 230               	;
 231               	
 232               	.macro POON
 233               	;	for atmega8 could use rjmp
 234               	    jmp _next
 235               	.endm
 236               	
 237               	;**********************************************************************
 238               	;  constant values
 239               	;
 240               	;    %s/#define *\([^ ]*\) */ \1 = /
 241               	;    %s/ *\([^ ]*\) *= */#define \1 /
 242               	
 243               	;----------------------------------------------------------------------
 244               	;    sizes
 245               	;
 246               	; "Column 72 means Continue", 72 always \0
 247               	; Readability is good standart is 80
 248               	;
 249               	TIB_SIZE = 80
 250               	
 251               	; PAD minimum size
 252               	;
 253               	PAD_SIZE = TIB_SIZE
 254               	
 255               	; HDS minimum size, 16bits (16*2+2) +2 
 256               	;
 257               	HDS_SIZE = 36
 258               	
 259               	; stacks 18 words deep. WISE as M00re said.
 260               	;
 261               	STACK_SIZE = 36
 262               	
 263               	; default cell size
 264               	;
 265               	CELL_SIZE = 2
 266               	
 267               	; maximum word size
 268               	;
 269               	WORD_SIZE = 15
 270               	
 271               	; default base
 272               	;
 273               	BASE_DEFAULT = 16
 274               	
 275               	;----------------------------------------------------------------------
 276               	;   words can be 1 to 15 chars lenght, 
 277               	;
 278               	;   almost over for normal english ~10 letters words 
 279               	;   http://norvig.com/mayzner.html
 280               	;
 281               	;   flags 
 282               	;
 283               	;   tradicional:
 284               	;
 285               	;   IMMEDIATE, COMPILE, SMUDGE, LEAP
 286               	;
 287               	;   IMMEDIATE is mandatory execute words.
 288               	;
 289               	;   COMPILE is for compile only words.
 290               	;
 291               	;   HIDDEN or SMUDGE is not used, free to reassign any words but not change already compliled
 292               	;
 293               	;   LEAP is to mark as pure assembler routines, no calls inside.
 294               	;
 295               	;   RESERVED as 0x80, marks the byte as size+flag byte and allow
 296               	;   backtrace to name from execute address, names are ASCII < 0x80
 297               	;
 298               	;   if need 32 chars ANSI names, forget HIDDEN
 299               	;
 300               	F_RESERVED = 0x80
 301               	F_IMMEDIATE = 0x40
 302               	F_COMPILE = 0x20
 303               	F_HIDDEN = 0x10
 304               	
 305               	F_TOMASK = 0xF0
 306               	F_UNMASK = 0x0F
 307               	
 308               	; not flags but usefull to remember
 309               	F_LEAP = 0x00	; for primitives, pure assembler no calls for forth words
 310               	F_CORE = 0x00	; for core words
 311               	
 312               	;---------------------------------------------------------------------
 313               	;
 314               	; minimal error codes from forth 2012
 315               	;
 316               	NO_ERROR = 0
 317               	INVALID_MEMORY = -9
 318               	OUT_OF_RANGE = -11
 319               	INVALID_WORD = -13
 320               	TO_READ_ONLY = -20
 321               	NOT_A_NUMBER = -24
 322               	
 323               	;---------------------------------------------------------------------
 324               	; ASCII constants
 325               	;
 326               	; Flow Control
 327               	; assumes that all line edit is done at remote!
 328               	; no backspace, no delete, no moving cursor, just a static line.
 329               	; works as a screen or block, just receives a line till a CR or CR LF
 330               	; uses BS, for edit last char
 331               	;
 332               	;NAK_   =   0x15    ; ascii NAK ^U
 333               	
 334               	XON_   =   0x11    ; ascii DC1 ^Q
 335               	XOFF_  =   0x13    ; ascii DC3 ^S
 336               	
 337               	CR_    =   0x0d    ; ascci carriage return ^M
 338               	LF_    =   0x0a    ; ascii line feed ^J
 339               	TB_    =   0x09    ; ascii horizontal tab ^I
 340               	VT_    =   0x0b    ; ascii vertical tab ^K, somewhere also used as CR/LF 
 341               	BS_    =   0x08    ; ascii backspace ^H
 342               	BL_    =   0x20    ; ascii space 
 343               	
 344               	QT_    =   0x22    ; quotation mark "
 345               	
 346               	;----------------------------------------------------------------------
 347               	; AVR SREG constants
 348               	;
 349               	
 350               	BIT_CARRY = 0
 351               	
 352               	BIT_ZERO = 1
 353               	
 354               	BIT_NEG = 2
 355               	
 356               	;----------------------------------------------------------------------
 357               	
 358               	#ifdef atmega8
 359               	
 360               	; atmega8 have flash memory of 128 pages of 32 words
 361               	
 362               	SPM_SIZE = 64
 363               	
 364               	SRAM_START = 0x060  ; SRAM from AVR manual
 365               	
 366               	SRAM_END = 0x45F    ; SRAM from AVR manual 
 367               	
 368               	FLASH_RWW = 0x0000
 369               	
 370               	FLASH_NRWW = 0x1E00    ; using optiboot in 512 bytes !!!!
 371               	
 372               	FLASH_END = 0x1FFF 
 373               	
 374               	E2P_END = 0x1FF
 375               	
 376               	#endif
 377               	
 378               	#ifdef atmega328
 379               	
 380               	; atmega328 have flash memory of 256 pages of 64 words
 381               	
 382               	SPM_SIZE = 128
 383               	
 384               	SRAM_START = 0x0100  ; SRAM from AVR manual
 385               	
 386               	SRAM_END = 0x08FF  ; SRAM from AVR manual
 387               	
 388               	FLASH_RWW = 0x0000
 389               	
 390               	FLASH_NRWW = 0x3E00    ; using optiboot in 512 bytes !!!!
 391               	
 392               	FLASH_END = 0x3FFF 
 393               	
 394               	E2P_END = 0x3FF
 395               	
 396               	#endif
 397               	
 398               	/* for eeprom use */
 399               	
 400               	E2P_PAGESIZE = 4
 401               	
 402               	E2P_START = 0x000
 403               	
 404               	/* avr signature bytes */
 405               	
 406               	SIGNATURE_000	= 0x1e
 407               	SIGNATURE_001	= 0x95
 408               	
 409               	; for atmega328
 410               	SIGNATURE_002	= 0x0f
 411               	; for atmega328P
 412               	SIGNATURE_003	= 0x0f
 413               	; for atmega328PB
 414               	SIGNATURE_004	= 0x16
 415               	
 416               	/* task states, QNX */
 417               	
 418               	HALT = 0x0
 419               	IDLE = 0x1
 420               	BUSY = 0x2
 421               	WAIT = 0x3
 422               	
 423               	GIVE = 0x4
 424               	TAKE = 0x8
 425               	
 426               	;----------------------------------------------------------------------
 427               	/* temporary where start forth */
 428               	
 429               	;----------------------------------------------------------------------
 430               	...
  39               	;----------------------------------------------------------------------
  40               	;
  41               	; for sake stacks grows down, heaps grows up
  42               	;
  43               	;----------------------------------------------------------------------
  44               	.section .eeprom
  45               	.org 0x000
  46               	
  47 ???? 0000      	e_void:	.word 0 ; always zero
  48 ???? 0000      	e_live:	.word 0 ; seed for random
  49 ???? 0000      	e_turn:	.word 0 ; routine after boot
  50 ???? 0000      	e_rest:	.word 0 ; routine before reset
  51 ???? 0000      	e_last:	.word 0 ; link to last word in dictionary
  52 ???? 0000      	e_dp:	.word 0 ; next free flash address for dictionary
  53 ???? 0000      	e_up:	.word 0 ; next free sram address for variables, backwards
  54 ???? 0000      	e_ep:	.word 0 ; next free eprom address for values, 
  55               	
  56               	EP0 = .
  57               	
  58               	;----------------------------------------------------------------------
  59               	.section data
  60 ???? 0000 0000 	.org SRAM_START
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  61               	
  62               	;----------------------------------------------------------------------
  63               	; Terminal input buffer
  64 ???? 0000 0000 	TIB0:	.space TIB_SIZE, 0x0
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  65               	
  66               	;----------------------------------------------------------------------
  67               	; Stacks
  68 ???? 0000 0000 	SPZ:    .space STACK_SIZE, 0x0
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  69               	SP0 = .
  70 ???? 0000 0000 	PSZ:    .space STACK_SIZE, 0x0
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  71               	PS0 = .
  72 ???? 0000 0000 	RSZ:    .space STACK_SIZE, 0x0
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	RS0 = .
  74               	
  75               	;----------------------------------------------------------------------
  76               	; non volatile, must be saved in eeprom
  77 ???? 0000      	VOID:	.word 0		; always 0x0000
  78 ???? 0000      	LIVE:   .word 0     ; count boots
  79               	
  80 ???? 0000      	TURN:	.word 0		; routine to run after boot
  81 ???? 0000      	REST:	.word 0		; routine to run before reset
  82               	
  83 ???? 0000      	LAST:	.word 0		; reference to latest word in dictionary
  84 ???? 0000      	VDP:	.word 0		; next free cell in flash dictionary
  85               	
  86 ???? 0000      	VUP:    .word 0     ; next free cell in static ram, backwards
  87 ???? 0000      	VEP: 	.word 0		; next free cell in eeprom
  88               	
  89               	;----------------------------------------------------------------------
  90               	; those are volatile, dont care
  91 ???? 0000      	VHP:    .word 0     ; next free cell in static ram, forward
  92 ???? 0000      	SEED:   .word 0     ; random seed
  93               	
  94 ???? 0000      	STAT:	.word 0		; state of interpreter, 0 interprete, 1 compile
  95 ???? 0000      	RADX:	.word 0		; numeric radix for convertion
  96               	
  97 ???? 0000      	TOIN:   .word 0     ; offset in TIB
  98 ???? 0000      	SPAN:   .word 0     ; offset in user buffer
  99               	
 100 ???? 0000      	SCRS:   .word 0     ; screen number
 101 ???? 0000      	BLKS:   .word 0     ; block number
 102               	
 103 ???? 0000      	HAND:   .word 0     ; handler for catch and throw
 104 ???? 0000      	CSPP:   .word 0     ; keep last ps
 105               	
 106 ???? 0000      	CURR:   .word 0     ; reference to current vocabulary
 107 ???? 0000      	CTXT:   .word 0     ; reference to context vocabulary
 108               	
 109 ???? 0000      	HLD:    .word 0     ; picture number buffer
 110 ???? 0000      	HLDS:   .word 0     ; picture number cursor
 111               	
 112 ???? 0000      	WARN:   .word 0     ; warning number
 113 ???? 0000      	ERRN:   .word 0     ; error number
 114               	
 115 ???? 0000      	TMP0:   .word 0     ; temporary
 116 ???? 0000      	TMP1:   .word 0     ; temporary
 117 ???? 0000      	TMP2:   .word 0     ; temporary
 118 ???? 0000      	TMP3:   .word 0     ; temporary
 119               	
 120               	;----------------------------------------------------------------------
 121               	UH0 = .
 122               	
 123               	US0 = SRAM_END
 124               	
 125               	;.equ is_free_sram,  US0 - UH0
 126               	
 127               	;----------------------------------------------------------------------
 128               	;
 129               	; code segment, flash
 130               	;
 131               	; all start text segment is in bios.S
 132               	;----------------------------------------------------------------------
 133               	.p2align 1, 0x00
 134               	#include "bios.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	; review for atmega328
  30               	;   10/2022 @agsb
  31               	
  32               	
  33               	;---------------------------------------------------------------------
  34               	; from avr manual, do not change 
  35               	; reserved I/O Memory address
  36               	;
  37               	; FOR AVRs
  38               	
  39               	__SREG__ = 0x3f
  40               	__SP_H__ = 0x3e
  41               	__SP_L__ = 0x3d
  42               	
  43               	/* USART */
  44               	UBRRL = 0x09
  45               	UCSRC = 0x20
  46               	UCSRB = 0x0a
  47               	UCSRA = 0x0b
  48               	
  49               	/* Watch dog */
  50               	WDTCR = 0x21
  51               	
  52               	/* timer0 */
  53               	TCNT0 = 0x32
  54               	TCCR0 = 0x33
  55               	TIMSK = 0x39
  56               	
  57               	/* SPMCR */
  58               	SPMCR = 0x37
  59               	
  60               	/* SPM BITS */
  61               	SPMIE = 7
  62               	RWWSB = 6
  63               	/* bit 5 reserved */
  64               	RWWSRE = 4
  65               	BLBSET = 3
  66               	PGWRT = 2
  67               	PGERS = 1
  68               	SPMEN = 0
  69               	
  70               	;----------------------------------------------------------------------
  71               	;792486AA–AVR–02/2013 ATmega8(L)Note:1.   See “About Code Examples” on page 8
  72               	;
  73               	; from atmeg8 datasheet
  74               	;
  75               	EEARH =  0x1F
  76               	EEARL =  0x1E
  77               	EEDR  =  0x1D
  78               	EECR  =  0x1C
  79               	EEWE  =  1
  80               	EEMWE =  2
  81               	EERE  =  0
  82               	
  83               	;----------------------------------------------------------------------
  84               	; sleep register
  85               	MCUCR = 0x35 
  86               	
  87               	;----------------------------------------------------------------------
  88               	;
  89               	; code segment, flash
  90               	;
  91               	.section .text
  92               	.org 0x000
  93               	.global boot
  94               	
  95               	;----------------------------------------------------------------------
  96               	;
  97               	; classic interrup vector table
  98               	;
  99               	;----------------------------------------------------------------------
 100               	
 101               	boot:
 102               	
 103 ???? 00C0      	    rjmp RESET ; Reset Handler
 104 ???? 1895      	    reti ; rjmp EXT_INT0 ; IRQ0 Handler
 105 ???? 1895      	    reti ; rjmp EXT_INT1 ; IRQ1 Handler
 106 ???? 1895      	    reti ; rjmp TIM2_COMP ; Timer2 Compare Handler
 107 ???? 1895      	    reti ; rjmp TIM2_OVF ; Timer2 Overflow Handler
 108 ???? 1895      	    reti ; rjmp TIM1_CAPT ; Timer1 Capture Handler
 109 ???? 1895      	    reti ; rjmp TIM1_COMPA ; Timer1 CompareA Handler
 110 ???? 1895      	    reti ; rjmp TIM1_COMPB ; Timer1 CompareB Handler
 111 ???? 1895      	    reti ; rjmp TIM1_OVF ; Timer1 Overflow Handler
 112 ???? 00C0      	    rjmp TIM0_OVF ; Timer0 Overflow Handler
 113 ???? 1895      	    reti ; rjmp SPI_STC ; SPI Transfer Complete Handler
 114 ???? 1895      	    reti ; rjmp USART_RXC ; USART RX Complete Handler
 115 ???? 1895      	    reti ; rjmp USART_UDRE ; ((0x0C) + 0x20) Empty Handler
 116 ???? 1895      	    reti ; rjmp USART_TXC ; USART TX Complete Handler
 117 ???? 1895      	    reti ; rjmp ADC ; ADC Conversion Complete Handler
 118 ???? 1895      	    reti ; rjmp EE_RDY ; EEPROM Ready Handler
 119 ???? 1895      	    reti ; rjmp ANA_COMP ; Analog Comparator Handler
 120 ???? 1895      	    reti ; rjmp TWSI ; Two-wire Serial Interface Handler
 121 ???? 1895      	    reti ; rjmp SPM_RDY ; Store Program Memory Ready Handler;
 122               	
 123               	; todo: use USART_RXC to allow ^C, ^D controls
 124               	
 125               	;----------------------------------------------------------------------
 126               	; 
 127               	RESET:
 128               	;   yes, is a nop. allways.
 129 ???? 0000      	    nop
 130               	; clear interrupts
 131 ???? F894      	    cli
 132               	; init _zero_ as zero
 133 ???? 6624      	    clr _zero_
 134 ???? 6FBE      	    out __SREG__, _zero_ ; clear sreg
 135               	; init real sp at end of sram
 136 ???? 8FEF      	    ldi r24, lo8(SRAM_END)
 137 ???? 98E0      	    ldi r25, hi8(SRAM_END)
 138               	; reserve
 139 ???? 8DBF      	    out __SP_L__, r24
 140 ???? 9EBF      	    out __SP_H__, r25
 141               	
 142               	;----------------------------------------------------------------------
 143               	/*
 144               	
 145               	OSCAL calibration,
 146               	from atmel 2555 note:
 147               	for atmega8 theorical for 25oC at 5V, value is 168.
 148               	for optiboot, value is 143 as sample better for 38400 bauds, maybe less for 40oC
 149               	CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DOSC_CAL=142' '-DNUM_LED_FLASHES=2' -DBAUD_RATE=38400
 150               	*/
 151               	
 152               	;----------------------------------------------------------------------
 153               	; init timer0, with internal clock 8MHz, 
 154               	;   from gcc public code, io ports as constants
 155               	;
 156               	; preset of timer0, with internal clock 8MHz ; cycle 64 ; offset 131
 157               	; timer cycle * offset / clock = 8k/8M = 1ms
 158               	;
 159               	; so it counts 125 clocks inside the interrup routines
 160               	;
 161               	; offset counter 256 - 125 = 131
 162               	; but was 8 clocks in routine timer0, 
 163               	; then 131 + 12 = 143
 164               	OFFSETCNT = 143
 165               	;
 166               	TIMER0_SET:
 167               	; enable pre-escaler
 168 ???? 03B7      	    in r16, TCCR0
 169 ???? 0360      	    ori r16, (1 << 1) | (1 << 0)
 170 ???? 03BF      	    out TCCR0, r16
 171               	; offset counter
 172 ???? 0FE8      	    ldi r16, OFFSETCNT
 173               	; preserve offset
 174 ???? 302E      	    mov r3, r16
 175 ???? 02BF      	    out TCNT0, r16
 176               	; enable counter
 177 ???? 09B7      	    in r16, TIMSK
 178 ???? 0160      	    ori r16, (1 << 0) 
 179 ???? 09BF      	    out TIMSK, r16
 180               	;   clear click counter
 181 ???? 4424      	    clr r4
 182 ???? 5524      	    clr r5
 183               	
 184               	;----------------------------------------------------------------------
 185               	; init watch dog, from avr-gcc public code, io ports as constants
 186               	; write logical one to WDCE and WDE, set WDP2, WDP1, WDP0 to ~ 2.0 s
 187               	;
 188               	WATCHDOG_SET:
 189 ???? 01B5      	    in r16, WDTCR
 190 ???? 0861      	    ori r16, (1 << 4) | (1 << 3)
 191 ???? 0760      	    ori r16, (1 << 2) | (1 << 1) | (1 << 0)
 192 ???? 01BD      	    out WDTCR, r16
 193               	
 194               	;----------------------------------------------------------------------
 195               	; init usart, from avr-gcc public code
 196               	;
 197               	;   defaults to 9600, 8N1, no control
 198               	;
 199               	USART_SET:
 200 ???? 0027      	    clr r16
 201 ???? 00BD      	    out UCSRC, r16
 202 ???? 04E3      	    ldi r16, lo8(52)
 203 ???? 09B9      	    out UBRRL, r16
 204 ???? 0AB1      	    in r16, UCSRB
 205 ???? 0861      	    ori r16, lo8(24)
 206 ???? 0AB9      	    out UCSRB, r16
 207 ???? 0EE8      	    ldi r16, lo8(-114)
 208 ???? 00BD      	    out UCSRC, r16
 209 ???? 00B5      	    in r16, UCSRC
 210 ???? 0064      	    ori r16,lo8(64)
 211 ???? 00BD      	    out UCSRC, r16
 212               	
 213               	;----------------------------------------------------------------------
 214               	; enable interrupts
 215               	GOOD:
 216 ???? 7894      	    sei
 217 ???? 00C0      	    rjmp COLD 
 218 ???? C7CF      	    rjmp HALT
 219               	
 220               	;----------------------------------------------------------------------
 221               	;
 222               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 223               	;
 224               	;   generic:
 225               	;   r2 , save_SREG
 226               	;   r3 , offset prescale timer0
 227               	;   r4 , counter each 1ms low byte
 228               	;   r5 , counter each 1ms high byte
 229               	;   r6 , _zero_
 230               	;
 231               	;   timer0 prescale 
 232               	;   for 8 MHz, prescale 64, offset 131, results about 1 ms
 233               	;   64 * 125 = 8000 ; 
 234               	;   256 - 125 = 131 ; offset for miliseconds
 235               	;   plus 12 cycles inside routine
 236               	;
 237               	;   ticks counts till 65 seconds
 238               	;
 239               	;   60000 is EA60 aka 1 minute
 240               	;
 241               	; interrupt routine
 242               	TIM0_OVF:
 243               	; disable interrups
 244 ???? F894      	    cli
 245               	; save flags
 246 ???? 2FB6      	    in r2, __SREG__
 247               	; increase counter and also clear 
 248 ???? 4394      	    inc r4
 249 ???? 01F0      	    brbs BIT_ZERO, TIM0_ADJ
 250 ???? 5394      	    inc r5
 251               	TIM0_ADJ:
 252 ???? 32BE      	    out TCNT0, r3
 253               	;  reset watch dog
 254 ???? A895      	    wdr
 255               	; clear _zero_  
 256 ???? 6624      	    clr r6
 257               	; load flags and return
 258 ???? 2FBE      	    out __SREG__, r2
 259               	; enable interrups
 260 ???? 7894      	    sei
 261 ???? 1895      	    reti
 262               	
 263               	;----------------------------------------------------------------------
 264               	;
 265               	;   do not use r0 and r1 are scratch registers used in spm, mul, des, etc
 266               	;
 267               	HALT:
 268 ???? 0000      	    nop
 269 ???? 7894      	    sei
 270 ???? 00E8      	    ldi r16, 0x80 ; Enable sleep mode
 271 ???? 05BF      	    out MCUCR, r16
 272 ???? 8895      	    sleep           ; Put MCU in sleep mode
 273 ???? 00C0      	    rjmp RESET
 274               	
 135               	
 136               	;----------------------------------------------------------------------
 137               	.p2align 1, 0x00
 138               	#include "messages.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	 disclaimer : 
  29 ???? 4449 5343 	 .ascii  "DISCLAIMER\nthis software is provided \"AS IS\".\n"
  29      4C41 494D 
  29      4552 0A74 
  29      6869 7320 
  29      736F 6674 
  30 ???? 436F 7079 	 .ascii  "Copyright © 2020, Alvaro Gomes Sobral Barcellos,\n"
  30      7269 6768 
  30      7420 C2A9 
  30      2032 3032 
  30      302C 2041 
  31 ???? 4C69 6365 	 .ascii  "Licence Creative Commons,f8f98284-589e-4290-867c-0ac3824721ac,\n"
  31      6E63 6520 
  31      4372 6561 
  31      7469 7665 
  31      2043 6F6D 
  32 ???? 4174 7472 	 .ascii  "Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n"
  32      6962 7574 
  32      696F 6E2D 
  32      4E6F 6E43 
  32      6F6D 6D65 
  33               	 .asciiz "please read the disclaimer.\n"
  34               	 
  35 ???? 04        	 .byte 4
  36               	 prompt : ; 4
  37 ???? 204F 6B00 	 .asciz " Ok"
  38               	 
  39 ???? 04        	 .byte 4
  40               	 question : ; 4
  41 ???? 203F 3F00 	 .asciz " ??"
  42               	 
  43 ???? 0C        	 .byte 12
  44               	 undefined : ; 12
  45 ???? 2075 6E64 	 .asciz " undefined?"
  45      6566 696E 
  45      6564 3F00 
  46               	 
  47 ???? 0C        	 .byte 12
  48               	 exception : ; 12
  49 ???? 2065 7863 	 .asciz " exception!"
  49      6570 7469 
  49      6F6E 2100 
  50               	 
  51 ???? 0A        	 .byte 10
  52               	 abort : ; 10
  53 ???? 2061 626F 	 .asciz " aborted."
  53      7274 6564 
  53      2E00 
  54               	 
  55               	 roullete: ; 37, Pascal
  56               	 ; french: 0-32-15-19-4-21-2-25-17-34-6-27-13-36-11-30-8-23-10-5-24-16-33-1-20-14-31-9-22-18-29-7-2
  57               	 ; double: 0-28-9-26-30-11-7-20-32-17-5-22-34-15-3-24-36-13-1-00-27-10-25-29-12-8-19-31-18-6-21-33-
  58               	 ; triple: 0-000-00-32-15-19-4-21-2-25-17-34-6-27-13-36-11-30-8-23-10-5-24-16-33-1-20-14-31-9-22-18
  59 ???? 0000      	 .word  0
  60 ???? 2000 0F00 	 .word 32, 15, 19,  4, 21,  2, 25, 17, 34 
  60      1300 0400 
  60      1500 0200 
  60      1900 1100 
  60      2200 
  61 ???? 0600 1B00 	 .word  6, 27, 13, 36, 11, 30,  8, 23, 10
  61      0D00 2400 
  61      0B00 1E00 
  61      0800 1700 
  61      0A00 
  62 ???? 0500 1800 	 .word  5, 24, 16, 33,  1, 20, 14, 31,  9
  62      1000 2100 
  62      0100 1400 
  62      0E00 1F00 
  62      0900 
  63 ???? 1600 1200 	 .word 22, 18, 29,  7, 28, 12, 35,  3, 26
  63      1D00 0700 
  63      1C00 0C00 
  63      2300 0300 
  63      1A00 
  64               	
 139               	
 140               	;----------------------------------------------------------------------
 141 ???? 00        	.p2align 1, 0x00
 142               	#include "forth-leafs.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	;
  30               	;    A small Forth for ATmega8, ATmega328 
  31               	;
  32               	;---------------------------------------------------------------------
  33               	; dictionary structure 
  34               	;
  35               	; cell size is a word of 16 bits 
  36               	;
  37               	; .word  link    link to previous 
  38               	; .byte  size    sizeof name (1..15) OR flags 
  39               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is even 
  40               	; .word  param,  many references 
  41               	;
  42               	;----------------------------------------------------------------------
  43               	 
  44               	;
  45               	; classics 
  46               	;
  48               	.LIST 
  49               	 
  50               	;----------------------------------------------------------------------
  51               	; start of dictionary 
  52               	;
  53               	 
  54               	;----------------------------------------------------------------------
  55               	;
  56               	; this is the forth inner engine, 
  57               	;
  58               	; a compound word, aka twig, must end with a reference to ENDS 
  59               	;
  60               	; a primitive work, aka leaf, ends with POON 
  61               	;
  62               	; the size byte must be masked by: or 0xF0 
  63               	;
  64               	; memory pointer r30:r31 as Z 
  65               	; parameter stack pointer r28:r29 as Y 
  66               	; return stack pointer r26:r27 as X 
  67               	; top of stack r24:r25 
  68               	; nos, temporary next of stack r22:r23 
  69               	; wrk, temporary working r20:r21 
  70               	; ipt, instruction pointer r18:r19 
  71               	;
  72               	; _zero_, always zero, keeped by timer0
  73               	; _work_, scratch
  74               	;
  75               	; Can only use LPM to access flash memory ? YES! 
  76               	;
  77               	; forth: all constants in flash
  78               	;
  79               	; user: no constants and variables in sdram 
  80               	;
  81               	; why ? flash memory suports only 10.000 cycles 
  82               	;
  83               	;----------------------------------------------------------------------
  84               	; starts just above sram ends 
  85               	;
  86               	; use the address to determine if is flash or is sram, above is flash :)
  87               	;
  88               	.section .text 
  89               	__forth__: 
  90               	
  91               	;----------------------------------------------------------------------
  92               	; inner interpreter, 
  93               	; it is also a primitive word 
  94               	;
  95               	; on AVR use Z for access flash
  96               	;
  97               	;   temporary use zpm, wrk, _word_
  98               	;
  99 ???? 0000 0445 	HEADER "ENDS", "ENDS", F_LEAP | F_CORE
  99      4E44 5320 
 100               	; does nothing and mark as primitive 
 101               	    NOOP 
 102               	 
 103               	; zzzzzz
 104               	
 105               	; pull ips from rsp 
 106               	_unnest:  
 107 ???? FD91 ED91 	    rspull zpm_low, zpm_high 
 108               	    ; rjump _next
 109               	 
 110               	; load w with contents of cell at ips 
 111               	_next: 
 112 ???? EE0F FF1F 	    pmload wrk_low, wrk_high ; also increments zpm 
 112      4591 5591 
 112      F795 E795 
 113               	 
 114               	; if bellow _init_ is a primitive word 
 115               	_pick:
 116 ???? 0714      	    cp mov _work_, wrk_low 
****  Error: constant value required
****  Error: `,' required
****  Error: garbage at end of line
 117 ???? 752A      	    or _work_, wrk_high 
 118 ???? 01F0      	    brbs BIT_ZERO, _jump
 119               	
 120               	; else is a reference ( 2 extra cycles )
 121               	_nest: 
 122 ???? EE93 FE93 	    rspush zpm_low, zpm_high ; push next reference 
 123 ???? FA01      	    movw zpm_low, wrk_low ; point to this reference 
 124 ???? 00C0      	    rjmp _next 
 125               	 
 126               	; then jump, for exec it 
 127               	_jump: 
 128               	   
 129 ???? 002C      	    mov
****  Error: constant value required
****  Error: `,' required
****  Error: constant value required
****  Error: garbage at end of line
 130 ???? 0994      	    ijmp 
 131               	 
 132               	; then link, for continue 
 133               	_link: 
 134 ???? 00C0      	    rjmp _unnest 
 135               	 
 136               	;----------------------------------------------------------------------
 137               	;
 138               	; ok ( -- ) 
 139               	;
 140 ???? 0000 044E 	HEADER "NOOP", "NO_OP", F_LEAP 
 140      4F4F 5020 
 141               	    NOOP
 142 ???? 0C94 0000 	    POON
 143               	
 144               	;********************************************************************** 
 145               	;
 146               	;   bios i/O 
 147               	;
 148               	;----------------------------------------------------------------------
 149               	;
 150               	; ok ( -- w) 
 151               	; beware, it blocks while test if can receive a char 
 152               	;
 153 ???? 0000 034B 	HEADER "KEY", "KEY", F_LEAP | F_CORE
 153      4559 
 154               	    NOOP 
 155               	1: 
 156 ???? 5F9B      	    sbis 0x0b, 7 
 157 ???? 00C0      	    rjmp 1b 
 158               	2: 
 159 ???? 8A93 9A93 	    pspush tos_low, tos_high
 160 ???? 8CB1      	    in tos_low, 0x0c 
 161 ???? 9927      	    clr tos_high 
 162 ???? 0C94 0000 	    POON 
 163               	 
 164               	;----------------------------------------------------------------------
 165               	;
 166               	; ok ( -- FALSE | TRUE ) 
 167               	; test if can receive a char, or return FALSE 
 168               	;
 169 ???? 0000 044B 	HEADER "KEY?", "QKEY", F_LEAP | F_CORE
 169      4559 3F20 
 170               	    NOOP 
 171               	3: 
 172 ???? 5F9B      	    sbis 0x0b, 7 
 173 ???? 00C0      	    rjmp _iffalse 
 174 ???? 00C0      	    rjmp _iftrue 
 175               	 
 176               	;----------------------------------------------------------------------
 177               	;
 178               	; ok ( w -- ) 
 179               	; beware, it blocks while test if can send a char 
 180               	;
 181 ???? 0000 0445 	HEADER "EMIT", "EMIT", F_LEAP | F_CORE
 181      4D49 5420 
 182               	    NOOP 
 183               	1: 
 184 ???? 5D9B      	    sbis 0x0b, 5 
 185 ???? 00C0      	    rjmp 1b 
 186               	2: 
 187 ???? 8CB9      	    out 0x0c, tos_low 
 188 ???? 9991 8991 	    pspull tos_low, tos_high
 189 ???? 0C94 0000 	    POON 
 190               	 
 191               	;----------------------------------------------------------------------
 192               	;
 193               	; ok ( -- FALSE | TRUE ) 
 194               	; test if can send a char, or return FALSE 
 195               	;
 196 ???? 0000 0545 	HEADER "EMIT?", "QEMIT", F_LEAP | F_CORE
 196      4D49 543F 
 197               	    NOOP 
 198               	3: 
 199 ???? 5D9B      	    sbis 0x0b, 5 
 200 ???? 00C0      	    rjmp _iffalse 
 201 ???? 00C0      	    rjmp _iftrue 
 202               	 
 203               	;----------------------------------------------------------------------
 204               	;
 205               	; ok ( c e -- ) 
 206               	;   pull up port 
 207               	;   zzzz
 208               	;
 209 ???? 0000 0750 	HEADER "PULLUP!", "PUPTO", F_LEAP 
 209      554C 4C55 
 209      5021 
 210               	    NOOP 
 211 ???? 0C94 0000 	    POON
 212               	
 213               	;----------------------------------------------------------------------
 214               	;
 215               	; ok ( c e -- ) 
 216               	;   pull down port 
 217               	;   zzzz
 218               	;
 219 ???? 0000 0750 	HEADER "PULLDN!", "PDNTO", F_LEAP 
 219      554C 4C44 
 219      4E21 
 220               	    NOOP 
 221 ???? 0C94 0000 	    POON
 222               	
 223               	;----------------------------------------------------------------------
 224               	;
 225               	; ok ( c e -- ) 
 226               	;   write a byte to eprom 
 227               	;
 228 ???? 0000 0345 	HEADER "EC!", "ECTO", F_LEAP 
 228      4321 
 229               	    NOOP 
 230 ???? 7991 6991 	    pspull nos_low, nos_high
 231               	
 232               	_ee_write:
 233               	; Wait for completion of previous write
 234 ???? E199      	    sbic EECR, EEWE
 235 ???? 00C0      	    rjmp _ee_write
 236               	
 237               	; Set up address  in address register
 238 ???? 9FBB      	    out EEARH, tos_high
 239 ???? 8EBB      	    out EEARL, tos_low
 240               	
 241               	; Write data to Data Register
 242 ???? 6DBB      	    out EEDR, nos_low
 243               	
 244               	; prepare    
 245 ???? F894      	    cli
 246 ???? 2FB6      	    in r2, __SREG__
 247               	
 248               	; Write logical one to EEMPE
 249 ???? E29A      	    sbi EECR, EEMWE
 250               	; Start eeprom write by setting EEWE
 251 ???? E19A      	    sbi EECR, EEWE
 252               	
 253               	; restore
 254 ???? 2FBE      	    out __SREG__, r2
 255 ???? 7894      	    sei
 256 ???? 0C94 0000 	    POON
 257               	
 258               	;----------------------------------------------------------------------
 259               	;
 260               	; ok ( e -- u ) 
 261               	;   read eeprom
 262               	;
 263 ???? 0000 0345 	HEADER "EC@", "ECAT", F_LEAP
 263      4340 
 264               	    NOOP 
 265 ???? 7991 6991 	    pspull nos_low, nos_high
 266               	
 267               	_ee_read:
 268               	; Wait for completion of previous write
 269 ???? E199      	    sbic EECR, EEWE
 270 ???? 00C0      	    rjmp _ee_read
 271               	
 272               	; Set up address in address register
 273 ???? 9FBB      	    out EEARH, tos_high
 274 ???? 8EBB      	    out EEARL, tos_low
 275               	
 276               	; Start eeprom read by writing EERE
 277 ???? E09A      	    sbi EECR, EERE
 278               	; Read data from Data Register
 279 ???? 8DB3      	    in tos_low, EEDR
 280 ???? 9927      	    clr tos_high
 281 ???? 0C94 0000 	    POON
 282               	
 283               	;----------------------------------------------------------------------
 284               	;
 285               	; ok ( w -- u ) 
 286               	; also io@
 287               	; only sram
 288               	;
 289 ???? 0000 0350 	HEADER "PC@", "PCAT", F_LEAP 
 289      4340 
 290               	    NOOP 
 291               	_peek:
 292 ???? FC01      	    movw zpm_low, tos_low  
 293 ???? 8081      	    ld tos_low, Z
 294 ???? 9927      	    clr tos_high
 295 ???? 0C94 0000 	    POON
 296               	
 297               	;----------------------------------------------------------------------
 298               	;
 299               	; ok ( u w -- ) 
 300               	; also io!
 301               	; only sram
 302               	;
 303 ???? 0000 0350 	HEADER "PC!", "PCTO", F_LEAP
 303      4321 
 304               	    NOOP
 305               	_poke:
 306 ???? FC01      	    movw zpm_low, tos_low  
 307 ???? 8083      	    st Z, tos_low
 308 ???? 9991 8991 	    pspull tos_low, tos_high
 309 ???? 0C94 0000 	    POON
 310               	    
 311               	;----------------------------------------------------------------------
 312               	;
 313               	; ok ( -- w) 
 314               	; push timer counter 
 315               	;
 316 ???? 0000 064D 	HEADER "MILLIS", "MILLIS", F_LEAP
 316      494C 4C49 
 316      5320 
 317               	    NOOP 
 318 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 319 ???? 842D      	    mov tos_low, ticks_low 
 320 ???? 952D      	    mov tos_high, ticks_high 
 321 ???? 0C94 0000 	    POON 
 322               	 
 323               	/*
 324               	;----------------------------------------------------------------------
 325               	;
 326               	; ok ( -- w) 
 327               	; strat watchdog 
 328               	;
 329               	HEADER "WDCLR", "WDCLR", F_LEAP 
 330               	    NOOP 
 331               	    wdr
 332               	    POON
 333               	
 334               	HEADER "WDON", "WDON", F_LEAP
 335               	    NOOP 
 336               	    in r16, WDTCR
 337               	    ori r16, (WDE)|(WDP2)|(WDP1)|WDP0)
 338               	    out WDTCR, r16
 339               	    POON
 340               	
 341               	HEADER "WDOFF", "WDOFF", F_LEAP
 342               	    NOOP 
 343               		wdr
 344               	    in r16, WDTCR
 345               	    ori r16, (WDTOE)|(WDE)
 346               	    out WDTCR, r16
 347               	    clr r16
 348               	    out WDTCR, r16
 349               	    POON
 350               	*/
 351               	
 352               	;********************************************************************** 
 353               	;
 354               	;   primitive words 
 355               	;
 356               	;----------------------------------------------------------------------
 357               	 
 358               	;----------------------------------------------------------------------
 359               	;
 360               	; ok ( -- -1 ) 
 361               	;
 362 ???? 0000 0454 	HEADER "TRUE", "FTRUE", F_LEAP | F_CORE
 362      5255 4520 
 363               	    NOOP 
 364 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 365               	_iftrue: 
 366 ???? 8FEF      	    ser tos_low 
 367 ???? 9FEF      	    ser tos_high 
 368 ???? 0C94 0000 	    POON 
 369               	 
 370               	;----------------------------------------------------------------------
 371               	;
 372               	; ok ( -- 0 ) 
 373               	;
 374 ???? 0000 0546 	HEADER "FALSE", "FFALSE", F_LEAP | F_CORE
 374      414C 5345 
 375               	    NOOP 
 376 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 377               	_iffalse: 
 378 ???? 8827      	    clr tos_low 
 379 ???? 9927      	    clr tos_high 
 380 ???? 0C94 0000 	    POON 
 381               	 
 382               	;----------------------------------------------------------------------
 383               	;
 384               	; ok 0= 
 385               	;
 386 ???? 0000 0230 	HEADER "0=", "ZEQU", F_LEAP | F_CORE
 386      3D20 
 387               	    NOOP 
 388 ???? 892B      	    or tos_low, tos_high
 389 ???? 01F0      	    brbs BIT_ZERO, _iftrue
 390 ???? 01F4      	    brbc BIT_ZERO, _iffalse
 391 ???? 0C94 0000 	    POON
 392               	 
 393               	;----------------------------------------------------------------------
 394               	;
 395               	; ok 0< 
 396               	;   using 2's complement, negative always have 0x8000
 397 ???? 0000 0230 	HEADER "0<", "ZLTH", F_LEAP | F_CORE
 397      3C20 
 398               	    NOOP 
 399               	    ; 0x80
 400 ???? 9078      	    andi tos_high, 0x80
 401 ???? 01F4      	    brbc BIT_ZERO, _iftrue
 402 ???? 01F0      	    brbs BIT_ZERO, _iffalse
 403 ???? 0C94 0000 	    POON
 404               	
 405               	;----------------------------------------------------------------------
 406               	;
 407               	; ok ( u1 u2 -- f ) 
 408               	;   unsigned lessthan 
 409               	;   if u1 < u2, true, else, false
 410               	;
 411 ???? 0000 0255 	HEADER "U<", "UMLESS", F_LEAP | F_CORE
 411      3C20 
 412               	    NOOP 
 413 ???? 7991 6991 	    pspull nos_low, nos_high 
 414 ???? 8894      	    clc 
 415 ???? 6817      	    cp  nos_low, tos_low 
 416 ???? 7907      	    cpc nos_high, tos_high 
 417               	1:    
 418 ???? 04F0      	    brlt 2f 
 419 ???? 00C0      	    rjmp _iffalse
 420               	2:
 421 ???? 00C0      	    rjmp _iftrue
 422 ???? 0C94 0000 	    POON
 423               	
 424               	;----------------------------------------------------------------------
 425               	;
 426               	; ok ( w1 w2 -- w3 c ) 
 427               	;   unsigned plus 
 428               	;
 429 ???? 0000 0355 	HEADER "UM+", "UMPLUS", F_LEAP | F_CORE
 429      4D2B 
 430               	    NOOP 
 431 ???? 7991 6991 	    pspull nos_low, nos_high 
 432 ???? 8894      	    clc 
 433 ???? 860F      	    add tos_low, nos_low 
 434 ???? 971F      	    adc tos_high, nos_high 
 435 ???? 8A93 9A93 	    pspush tos_low, tos_high
 436               	    ; preserve carry
 437               	1:
 438 ???? 9927      	    clr tos_high
 439 ???? 8827      	    clr tos_low
 440               	2:    
 441 ???? 00F4      	    brcc 3f
 442 ???? 8395      	    inc tos_low
 443               	3:
 444 ???? 0C94 0000 	    POON 
 445               	 
 446               	;----------------------------------------------------------------------
 447               	;
 448               	; ok ! to (w a -- ) 
 449               	; only in sram 
 450               	;
 451 ???? 0000 0121 	HEADER "!", "TO", F_LEAP | F_CORE
 452               	    NOOP 
 453 ???? FC01      	    movw  zpm_low, tos_low
 454 ???? 9991 8991 	    pspull tos_low, tos_high 
 455 ???? 8193      	    srsave tos_low 
 456 ???? 9193      	    srsave tos_high
 457 ???? 9991 8991 	    pspull tos_low, tos_high 
 458 ???? 0C94 0000 	    POON 
 459               	 
 460               	;----------------------------------------------------------------------
 461               	;
 462               	; ok @ at ( a -- w ) 
 463               	; only in sram 
 464               	;
 465 ???? 0000 0140 	HEADER "@", "AT", F_LEAP | F_CORE
 466               	    NOOP 
 467 ???? FC01      	    movw zpm_low, tos_low 
 468 ???? 8191      	    srload tos_low 
 469 ???? 9191      	    srload tos_high 
 470 ???? 0C94 0000 	    POON
 471               	 
 472               	;----------------------------------------------------------------------
 473               	;
 474               	; ok @@ at ( a -- a' ) 
 475               	; only in flash, fetches a reference to sram 
 476               	;	that could be used by @ and ! 
 477               	;
 478 ???? 0000 0240 	HEADER "@@", "ATAT", F_LEAP 
 478      4020 
 479               	    NOOP 
 480 ???? FC01      	    movw zpm_low, tos_low
 481 ???? EE0F FF1F 	    pmload tos_low, tos_high
 481      8591 9591 
 481      F795 E795 
 482 ???? 0C94 0000 		POON
 483               	    
 484               	;----------------------------------------------------------------------
 485               	; 
 486               	; Note on return stack operations:
 487               	;
 488               	;   the values in ( >R R@ R> ) are placed onto/from second cell of return stack.
 489               	;
 490               	;   this keeps the adjacent reference for inner interpreter, "where it comes" 
 491               	;
 492               	;   that's a side effect of MITC, there is no IP keeped.
 493               	;
 494               	;   that's transparent for user.
 495               	
 496               	;----------------------------------------------------------------------
 497               	;
 498               	; ok ( w -- ) ( -- w) 
 499               	;   vide note above
 500               	;
 501 ???? 0000 223E 	HEADER ">R", "TOR", F_COMPILE | F_LEAP | F_CORE
 501      5220 
 502               	    NOOP 
 503 ???? 7D91 6D91 	    rspull nos_low, nos_high
 504 ???? 8E93 9E93 	    rspush tos_low, tos_high 
 505 ???? 6E93 7E93 	    rspush nos_low, nos_high
 506 ???? 9991 8991 	    pspull tos_low, tos_high 
 507 ???? 0C94 0000 	    POON 
 508               	 
 509               	;----------------------------------------------------------------------
 510               	;
 511               	; ok ( -- w ) ( w -- ) 
 512               	;   vide note above
 513               	;
 514 ???? 0000 2252 	HEADER "R>", "RTO", F_COMPILE | F_LEAP | F_CORE
 514      3E20 
 515               	    NOOP 
 516 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 517 ???? 7D91 6D91 	    rspull nos_low, nos_high
 518 ???? 9D91 8D91 	    rspull tos_low, tos_high 
 519 ???? 6E93 7E93 	    rspush nos_low, nos_high
 520 ???? 0C94 0000 	    POON 
 521               	 
 522               	;----------------------------------------------------------------------
 523               	;
 524               	; ok ( -- w ) ( w -- w ) 
 525               	;   vide note above
 526               	;
 527 ???? 0000 2252 	HEADER "R@", "RAT", F_COMPILE | F_LEAP | F_CORE
 527      4020 
 528               	    NOOP 
 529 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 530 ???? 7D91 6D91 	    rspull nos_low, nos_high
 531 ???? 9D91 8D91 	    rspull tos_low, tos_high 
 532 ???? 8E93 9E93 	    rspush tos_low, tos_high 
 533 ???? 6E93 7E93 	    rspush nos_low, nos_high
 534 ???? 0C94 0000 	    POON 
 535               	 
 536               	;----------------------------------------------------------------------
 537               	;
 538               	; ok ( rsp -- w )  
 539               	;
 540 ???? 0000 0352 	HEADER "RS!", "RSTO", F_LEAP | F_CORE
 540      5321 
 541               	    NOOP 
 542 ???? DC01      	    movw rsp_low, tos_low 
 543 ???? 9991 8991 	    pspull tos_low, tos_high 
 544 ???? 0C94 0000 	    POON 
 545               	 
 546               	;----------------------------------------------------------------------
 547               	;
 548               	; ok ( psp -- w ) 
 549               	;
 550 ???? 0000 0350 	HEADER "PS!", "PSTO", F_LEAP | F_CORE
 550      5321 
 551               	    NOOP 
 552 ???? EC01      	    movw psp_low, tos_low 
 553 ???? 9991 8991 	    pspull tos_low, tos_high 
 554 ???? 0C94 0000 	    POON 
 555               	 
 556               	;----------------------------------------------------------------------
 557               	;
 558               	; ok ( -- rsp) 
 559               	; put the address to top of return stack at tos
 560               	;
 561 ???? 0000 0352 	HEADER "RS@", "RSAT", F_LEAP | F_CORE
 561      5340 
 562               	    NOOP 
 563 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 564 ???? CD01      	    movw tos_low, rsp_low 
 565 ???? 0C94 0000 	    POON 
 566               	 
 567               	;----------------------------------------------------------------------
 568               	;
 569               	; ok ( -- psp ) 
 570               	; put the address to top of parameter stack at tos
 571               	;
 572 ???? 0000 0350 	HEADER "PS@", "PSAT", F_LEAP | F_CORE
 572      5340 
 573               	    NOOP 
 574 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 575 ???? CE01      	    movw tos_low, psp_low 
 576 ???? 0C94 0000 	    POON 
 577               	
 578               	;----------------------------------------------------------------------
 579               	;
 580               	; ok ( w -- ) 
 581               	;     
 582               	;
 583 ???? 0000 0444 	HEADER "DROP", "DROP", F_LEAP | F_CORE
 583      524F 5020 
 584               	    NOOP
 585               	PULL: 
 586 ???? 9991 8991 	    pspull tos_low, tos_high 
 587 ???? 0C94 0000 	    POON 
 588               	 
 589               	;----------------------------------------------------------------------
 590               	;
 591               	; ok ( w -- w w) 
 592               	;
 593 ???? 0000 0344 	HEADER "DUP", "DUP", F_LEAP | F_CORE
 593      5550 
 594               	    NOOP 
 595               	PUSH:
 596 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 597 ???? 0C94 0000 	    POON 
 598               	 
 599               	;----------------------------------------------------------------------
 600               	;
 601               	; ok ( w1 w2 -- w2 w1 ) 
 602               	;
 603 ???? 0000 0453 	HEADER "SWAP", "SWAP", F_LEAP | F_CORE
 603      5741 5020 
 604               	    NOOP 
 605 ???? 7991 6991 	    pspull nos_low, nos_high ; w1
 606 ???? 8A93 9A93 	    pspush tos_low, tos_high ; w2
 607 ???? CB01      	    movw tos_low, nos_low    ; w1
 608 ???? 0C94 0000 	    POON 
 609               	 
 610               	;----------------------------------------------------------------------
 611               	;
 612               	; ok ( w1 w2 -- w1 w2 w1 ) 
 613               	;
 614 ???? 0000 044F 	HEADER "OVER", "OVER", F_LEAP | F_CORE
 614      5645 5220 
 615               	    NOOP 
 616 ???? 7991 6991 	    pspull nos_low, nos_high ; w1
 617 ???? 6A93 7A93 	    pspush nos_low, nos_high ; w1
 618 ???? 8A93 9A93 	    pspush tos_low, tos_high ; w2
 619 ???? CB01      	    movw tos_low, nos_low    ; w1
 620 ???? 0C94 0000 	    POON 
 621               	 
 622               	;----------------------------------------------------------------------
 623               	;
 624               	; ok ( w1 w2 w3 -- w2 w3 w1 ) 
 625               	;
 626 ???? 0000 0352 	HEADER "ROT", "ROT", F_LEAP | F_CORE
 626      4F54 
 627               	    NOOP 
 628 ???? 7991 6991 	    pspull nos_low, nos_high ; w2
 629 ???? 5991 4991 	    pspull wrk_low, wrk_high ; w1
 630 ???? 6A93 7A93 	    pspush nos_low, nos_high ; w2
 631 ???? 8A93 9A93 	    pspush tos_low, tos_high ; w3
 632 ???? CA01      	    movw tos_low, wrk_low    ; w1
 633 ???? 0C94 0000 	    POON
 634               	
 635               	;----------------------------------------------------------------------
 636               	;
 637               	; ok ( 0 | w -- 0 | w w ) 
 638               	; dup if tos not zero 
 639               	;
 640 ???? 0000 043F 	HEADER "?DUP", "ZDUP", F_LEAP | F_CORE
 640      4455 5020 
 641               	    NOOP 
 642 ???? 892B      	    or tos_low, tos_high
 643 ???? 01F0      	    brbs BIT_ZERO, 1f 
 644 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 645               	1: 
 646 ???? 0C94 0000 	    POON 
 647               	
 648               	;----------------------------------------------------------------------
 649               	;
 650               	; ok ( w1 w2 -- 0 | -1 ) ; w2 < w1
 651               	;   
 652 ???? 0000 013C 	HEADER "<", "LTHAN", F_LEAP | F_CORE
 653               	    NOOP 
 654 ???? 7991 6991 	    pspull nos_low, nos_high 
 655 ???? 8617      	    cp tos_low, nos_low 
 656 ???? 9707      	    cpc tos_high, nos_high 
 657 ???? 04F0      	    brlt 1f 
 658 ???? 00C0      	    rjmp _iffalse
 659               	1:
 660 ???? 00C0      	    rjmp _iftrue
 661 ???? 0C94 0000 	    POON
 662               	 
 663               	;----------------------------------------------------------------------
 664               	;
 665               	; ok ( w1 w2 -- w3 ) ; w3 = w1 + w2
 666               	;   signed plus
 667               	;
 668 ???? 0000 012B 	HEADER "+", "PLUS", F_LEAP | F_CORE
 669               	    NOOP 
 670 ???? 7991 6991 	    pspull nos_low, nos_high 
 671 ???? 8894      	    clc 
 672 ???? 860F      	    add tos_low, nos_low 
 673 ???? 971F      	    adc tos_high, nos_high 
 674 ???? 0C94 0000 	    POON 
 675               	 
 676               	;----------------------------------------------------------------------
 677               	;
 678               	; ok ( w1 w2 -- w3 ) ; w3 = w1 - w2 
 679               	;   signed minus, 0 5 -- -5
 680               	;
 681 ???? 0000 012D 	HEADER "-", "MINUS", F_LEAP | F_CORE
 682               	    NOOP 
 683 ???? 7991 6991 	    pspull nos_low, nos_high 
 684 ???? 8894      	    clc 
 685 ???? 681B      	    sub nos_low, tos_low 
 686 ???? 790B      	    sbc nos_high, tos_high 
 687 ???? CB01      	    movw tos_low, nos_low
 688 ???? 0C94 0000 	    POON 
 689               	 
 690               	;----------------------------------------------------------------------
 691               	;
 692               	; ok ( w1 w2 -- w3 ) ; w3 = w1 NAND w2 
 693               	;
 694 ???? 0000 044E 	HEADER "NAND", "NAND", F_LEAP | F_CORE
 694      414E 4420 
 695               	    NOOP 
 696 ???? 7991 6991 	    pspull nos_low, nos_high 
 697 ???? 8623      	    and tos_low, nos_low 
 698 ???? 9723      	    and tos_high, nos_high 
 699 ???? 6095      	    com nos_low 
 700 ???? 7095      	    com nos_high 
 701 ???? 0C94 0000 	    POON 
 702               	
 703               	;----------------------------------------------------------------------
 704               	;
 705               	; ok ( w1 w2 -- w3 ) ; w3 = w1 AND w2 ) 
 706               	;
 707 ???? 0000 0341 	HEADER "AND", "AND", F_LEAP | F_CORE
 707      4E44 
 708               	    NOOP 
 709 ???? 7991 6991 	    pspull nos_low, nos_high 
 710 ???? 8623      	    and  tos_low, nos_low 
 711 ???? 9723      	    and  tos_high, nos_high 
 712 ???? 0C94 0000 	    POON 
 713               	 
 714               	;----------------------------------------------------------------------
 715               	;
 716               	; ok ( w1 w2 -- w3 ) ; w3 = w1 OR w2 ) 
 717               	;
 718 ???? 0000 024F 	HEADER "OR", "OR", F_LEAP | F_CORE
 718      5220 
 719               	    NOOP 
 720 ???? 7991 6991 	    pspull nos_low, nos_high 
 721 ???? 862B      	    or   tos_low, nos_low 
 722 ???? 972B      	    or   tos_high, nos_high 
 723 ???? 0C94 0000 	    POON 
 724               	 
 725               	;----------------------------------------------------------------------
 726               	;
 727               	; ok ( w1 w2 -- w3 ) ; w3 = w1 XOR w2 ) 
 728               	;
 729 ???? 0000 0358 	HEADER "XOR", "XOR", F_LEAP | F_CORE
 729      4F52 
 730               	    NOOP 
 731 ???? 7991 6991 	    pspull nos_low, nos_high 
 732 ???? 8627      	    eor  tos_low, nos_low 
 733 ???? 9727      	    eor  tos_high, nos_high 
 734 ???? 0C94 0000 	    POON 
 735               	 
 736               	;----------------------------------------------------------------------
 737               	;
 738               	; ok ( w1 -- w2 ) ; arithmetic inverse 
 739               	;   by 2's complement, eg 0x0002 to 0xFFFE 
 740               	;
 741 ???? 0000 0649 	HEADER "INVERT", "INVERT", F_LEAP | F_CORE
 741      4E56 4552 
 741      5420 
 742               	    NOOP 
 743               	_inv: 
 744 ???? 8095      	    com tos_low 
 745 ???? 9095      	    com tos_high 
 746 ???? 0C94 0000 	    POON 
 747               	 
 748               	;----------------------------------------------------------------------
 749               	;
 750               	; ok ( w1 -- w2 ) ; logic inverse 
 751               	;   by 1's complement, eg 0x0000 to 0xFFFF
 752               	;
 753 ???? 0000 064E 	HEADER "NEGATE", "NEGATE", F_LEAP | F_CORE
 753      4547 4154 
 753      4520 
 754               	    NOOP 
 755               	_neg: 
 756 ???? 8195      	    neg tos_low 
 757 ???? 9195      	    neg tos_high 
 758 ???? 0C94 0000 	    POON 
 759               	 
 760               	;----------------------------------------------------------------------
 761               	;
 762               	; ok ( w -- w * 2 ) same as shift left << 1, unsigned 
 763               	;
 764 ???? 0000 0232 	HEADER "2*", "SHL", F_LEAP | F_CORE
 764      2A20 
 765               	    NOOP 
 766               	_shl: 
 767 ???? 8894      	    clc 
 768 ???? 880F      	    lsl   tos_low 
 769 ???? 991F      	    rol   tos_high 
 770 ???? 0C94 0000 	    POON 
 771               	 
 772               	;----------------------------------------------------------------------
 773               	;
 774               	; ok ( w -- w / 2 ) same as shift right >> 1, unsigned 
 775               	;
 776 ???? 0000 0232 	HEADER "2/", "SHR", F_LEAP | F_CORE
 776      2F20 
 777               	    NOOP 
 778               	_shr: 
 779 ???? 8894      	    clc 
 780 ???? 8695      	    lsr tos_low 
 781 ???? 9795      	    ror tos_high 
 782 ???? 0C94 0000 	    POON 
 783               	 
 784               	;----------------------------------------------------------------------
 785               	;
 786               	; ok ( nAnB -- nBnA ) swap bytes in a word 
 787               	;
 788 ???? 0000 023E 	HEADER "><", "ENDIAN", F_LEAP
 788      3C20 
 789               	    NOOP 
 790 ???? 482F      	    mov wrk_low, tos_low
 791 ???? 892F      	    mov tos_low, tos_high
 792 ???? 942F      	    mov tos_high, wrk_low
 793 ???? 0C94 0000 	    POON 
 794               	 
 795               	;----------------------------------------------------------------------
 796               	;
 797               	; ok ( -- ) ( branch next reference ) 
 798               	;   no more offsets then no more branch
 799 ???? 0000 0642 	HEADER "BRANCH", "BRANCH", F_LEAP | F_CORE
 799      5241 4E43 
 799      4820 
 800               	    NOOP 
 801               	_branch: 
 802 ???? FD91 ED91 	    rspull zpm_low, zpm_high 
 803 ???? EE0F FF1F 	    pmload nos_low, nos_high 
 803      6591 7591 
 803      F795 E795 
 804 ???? 6E93 7E93 	    rspush nos_low, nos_high 
 805 ???? 0C94 0000 	    POON 
 806               	 
 807               	;----------------------------------------------------------------------
 808               	;
 809               	; ok ( u -- ) 
 810               	; if tos is not zero, skip next 
 811               	; 
 812 ???? 0000 0730 	HEADER "0BRANCH", "ZBRANCH", F_LEAP | F_CORE
 812      4252 414E 
 812      4348 
 813               	    NOOP 
 814 ???? BC01      	    movw nos_low, tos_low
 815 ???? 9991 8991 	    pspull tos_low, tos_high
 816 ???? 672B      	    or nos_low, nos_high
 817 ???? 01F0      	    breq _branch 
 818               	    ; skips
 819 ???? FD91 ED91 	    rspull zpm_low, zpm_high 
 820 ???? 3296      	    adiw zpm_low, 2 
 821 ???? EE93 FE93 	    rspush zpm_low, zpm_high 
 822 ???? 0C94 0000 	    POON
 823               	 
 824               	;----------------------------------------------------------------------
 825               	;
 826               	;  ok LIT ( -- w ), 
 827               	;  push a value from flash to data stack 
 828               	;  note auto increment in pmload
 829               	;
 830 ???? 0000 034C 	HEADER "LIT", "LIT", F_LEAP | F_CORE
 830      4954 
 831               	    NOOP 
 832 ???? 8A93 9A93 	    pspush tos_low, tos_high
 833 ???? FD91 ED91 	    rspull zpm_low, zpm_high
 834 ???? EE0F FF1F 	    pmload tos_low, tos_high 
 834      8591 9591 
 834      F795 E795 
 835 ???? EE93 FE93 	    rspush zpm_low, zpm_high
 836 ???? 0C94 0000 	    POON 
 837               	 
 838               	;----------------------------------------------------------------------
 839               	;
 840               	; ok ( w -- w ) 
 841               	;  data space pointer align to CELL, atmega is always 
 842               	;   eg. 0x05 to 0x06, two steps: 
 843               	;   1) round a cell down, 2) add one cell 
 844               	;
 845               	rounds = -1 * CELL_SIZE
 846               	
 847 ???? 0000 0741 	HEADER "ALIGNED", "ALIGNED", F_LEAP | F_CORE
 847      4C49 474E 
 847      4544 
 848               	    NOOP 
 849 ???? 8E7F      	    andi tos_low, -1 * CELL_SIZE 
 850 ???? 0296      	    adiw tos_low, CELL_SIZE 
 851 ???? 0C94 0000 	    POON 
 852               	 
 853               	;----------------------------------------------------------------------
 854               	;
 855               	; ok ( -- CELL ) 
 856               	; CELL is 2 ; size of a cell 
 857               	;
 858 ???? 0000 0443 	HEADER "CELL", "CELL", F_LEAP | F_CORE
 858      454C 4C20 
 859               	    NOOP 
 860 ???? 8A93 9A93 	    pspush tos_low, tos_high
 861 ???? 82E0      	    ldi tos_low, CELL_SIZE 
 862 ???? 9927      	    clr tos_high 
 863 ???? 0C94 0000 	    POON 
 864               	 
 865               	;----------------------------------------------------------------------
 866               	;
 867               	; ok C! ( c a -- ) 
 868               	; only works in sram
 869               	;
 870 ???? 0000 0243 	HEADER "C!", "CTO", F_LEAP | F_CORE
 870      2120 
 871               	    NOOP 
 872 ???? FC01      	    movw zpm_low, tos_low
 873 ???? 9991 8991 	    pspull tos_low, tos_high
 874 ???? 8083      	    st Z, tos_low
 875 ???? 9991 8991 	    pspull tos_low, tos_high 
 876 ???? 0C94 0000 	    POON 
 877               	 
 878               	;----------------------------------------------------------------------
 879               	;
 880               	; ok C@ ( a -- c ) 
 881               	; only works in sram
 882               	;
 883 ???? 0000 0243 	HEADER "C@", "CAT", F_LEAP | F_CORE
 883      4020 
 884               	    NOOP 
 885 ???? FC01      	    movw zpm_low, tos_low
 886 ???? 8081      	    ld tos_low, Z
 887 ???? 9927      	    clr tos_high
 888 ???? 0C94 0000 	    POON 
 889               	
 890               	;----------------------------------------------------------------------
 891               	;
 892               	; ok ( -- ) does a real absolute jump to address in TOS
 893               	;       how return from ? jmp _link
 894               	;
 895 ???? 0000 044A 	HEADER "JUMP", "JUMP", F_LEAP
 895      554D 5020 
 896               	    NOOP 
 897               	; prepare, as LIT ???
 898               	;    rspull zpm_low, zpm_high
 899               	;    pmload tos_low, tos_high 
 900               	;    rspush zpm_low, zpm_high
 901               	; does it    
 902 ???? FC01      	    movw zpm_low, tos_low
 903 ???? 0994      	    ijmp 
 904               	
 905               	;----------------------------------------------------------------------
 906               	;
 907               	; ok ( -- 0 ) 
 908               	;
 909 ???? 0000 0130 	HEADER "0", "ZERO", F_LEAP | F_CORE
 910               	    NOOP 
 911 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 912 ???? 8827      	    clr tos_low 
 913 ???? 9927      	    clr tos_high 
 914 ???? 0C94 0000 	    POON 
 915               	 
 916               	;----------------------------------------------------------------------
 917               	;
 918               	; ok ( -- 1 ) 
 919               	;
 920 ???? 0000 0131 	HEADER "1", "ONE", F_LEAP | F_CORE
 921               	    NOOP 
 922 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 923 ???? 9927      	    clr tos_high 
 924 ???? 81E0      	    ldi tos_low, 1
 925 ???? 0C94 0000 	    POON 
 926               	
 927               	;----------------------------------------------------------------------
 928               	;
 929               	; ok ( -- 0 ) 
 930               	;
 931 ???? 0000 0132 	HEADER "2", "TWO", F_LEAP | F_CORE
 932               	    NOOP 
 933 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 934 ???? 9927      	    clr tos_high 
 935 ???? 82E0      	    ldi tos_low, 2
 936 ???? 0C94 0000 	    POON 
 937               	 
 938               	;----------------------------------------------------------------------
 939               	 
 143               	
 144               	;----------------------------------------------------------------------
 145               	.p2align 1, 0x00
 146               	#include "forth-twigs.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;---------------------------------------------------------------------
  29               	;
  30               	;    A small Forth for ATmega8 
  31               	;
  32               	;---------------------------------------------------------------------
  33               	; dictionary structure 
  34               	;
  35               	; cell size is a word of 16 bits 
  36               	;
  37               	; .word  link    link to previous 
  38               	; .byte  size    sizeof name OR flags 
  39               	; .ascii "name"  name, plus a pad byte with BL (0x32) if size is even 
  40               	; .word  param,  many references 
  41               	;
  42               	;----------------------------------------------------------------------
  43               	 
  44               	;
  45               	; classics 
  46               	;
  48               	.LIST 
  49               	 
  50               	;********************************************************************** 
  51               	; FORTH
  52               	;
  53               	;    the follow definitions of compound words 
  54               	;    are as already compiled into a list of references, 
  55               	;    that is a sequence of cells. 
  56               	;    No preorder because the assembler does translation 
  57               	;    of names to address (references) 
  58               	;
  59               	;    (some adapted from old fig-forth and eforth istings) 
  60               	;
  61               	;********************************************************************** 
  62               	
  63               	;----------------------------------------------------------------------
  64               	;
  65               	; ok ( w a -- ) 
  66               	;	w = b1b2 ~~ [a] = b1, [a+1] = b2
  67               	; just write a word
  68               	;
  69 ???? 0000 0245 	HEADER "E!", "ETO", F_LEAP
  69      2120 
  70 ???? 0000 0000 	    .word OVER, OVER, ECTO, ONE, PLUS, TOR, ENDIAN, RTO, ECTO, ENDS   
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  70      0000 0000 
  71               	
  72               	;----------------------------------------------------------------------
  73               	;
  74               	; ok ( a -- w ) 
  75               	;   [a] = b1, [a+1] = b2 ~~ w = b1b2
  76               	;   w1 0x00ff and, w2 0x00ff and, 
  77               	;   w1 = b100, w2 = b300, w2 endian, w2 = 00b3
  78               	;   w1 w2 or
  79               	;
  80 ???? 0000 0245 	HEADER "E@", "EAT", F_LEAP
  80      4020 
  81 ???? 0000 0000 	    .word DUP, ECAT, SWAP, ECAT
  81      0000 0000 
  82 ???? 0000 FF00 	    .word LIT, 0x00FF, AND
  82      0000 
  83 ???? 0000 0000 	    .word ENDIAN, SWAP
  84 ???? 0000 FF00 	    .word LIT, 0x00FF, AND
  84      0000 
  85 ???? 0000 0000 	    .word OR, ENDS
  86               	
  87               	;********************************************************************** 
  88               	;
  89               	;   stack words
  90               	;
  91               	;----------------------------------------------------------------------
  92               	;
  93               	; ok ( w2 w1 -- w1 ) 
  94               	;
  95 ???? 0000 034E 	HEADER "NIP", "NIP",
  95      4950 
  96 ???? 0000 0000 	    .word SWAP, DROP, ENDS 
  96      0000 
  97               	 
  98               	;----------------------------------------------------------------------
  99               	;
 100               	; ok ( w3 w2 w1 -- w2 w3 w1 ) 
 101               	;
 102 ???? 0000 0453 	HEADER "SWIP", "SWIP",
 102      5749 5020 
 103 ???? 0000 0000 	    .word TOR, SWAP, RTO, ENDS 
 103      0000 0000 
 104               	 
 105               	;----------------------------------------------------------------------
 106               	;
 107               	; ok ( w2 w1 -- w2 w1 w2 ) 
 108               	; moved to primitives
 109               	;HEADER "OVER", "OVER",
 110               	;    .word TOR, DUP, RTO, SWAP, ENDS 
 111               	 
 112               	;----------------------------------------------------------------------
 113               	;
 114               	; ok ( w3 w2 w1 -- w2 w1 w3 ) 
 115               	;
 116 ???? 0000 0352 	HEADER "ROT", "ROTU",
 116      4F54 
 117 ???? 0000 0000 	    .word SWIP, SWAP, ENDS 
 117      0000 
 118               	 
 119               	;----------------------------------------------------------------------
 120               	;
 121               	; ok ( w3 w2 w1 -- w1 w3 w2 ) 
 122               	;
 123 ???? 0000 042D 	HEADER "-ROT", "ROTD",
 123      524F 5420 
 124 ???? 0000 0000 	    .word SWAP, SWIP, ENDS 
 124      0000 
 125               	 
 126               	;----------------------------------------------------------------------
 127               	;
 128               	; ok ( w2 w1 --  w1 w2 w1 ) 
 129               	;
 130 ???? 0000 0454 	HEADER "TUCK", "TUCK",
 130      5543 4B20 
 131 ???? 0000 0000 	    .word SWAP, OVER, ENDS 
 131      0000 
 132               	 
 133               	;----------------------------------------------------------------------
 134               	;
 135               	; ok ( w3 w2 w1 --  w1 w2 w3 ) 
 136               	;
 137 ???? 0000 0446 	HEADER "FLIP", "FLIP",
 137      4C49 5020 
 138 ???? 0000 0000 	    .word SWAP, SWIP, SWAP, ENDS 
 138      0000 0000 
 139               	
 140               	;----------------------------------------------------------------------
 141               	;
 142               	; ok ( w1 w2 -- 0 | -1) 
 143               	;
 144 ???? 0000 013D 	HEADER "=", "EQUAL",
 145 ???? 0000 0000 	    .word MINUS, ZEQU, ENDS 
 145      0000 
 146               	 
 147               	;----------------------------------------------------------------------
 148               	;
 149               	; ok ( w1 w2 -- 0 | -1) 
 150               	;
 151 ???? 0000 023C 	HEADER "<>", "NOTEQUAL",
 151      3E20 
 152 ???? 0000 0000 	    .word EQUAL, INVERT, ENDS 
 152      0000 
 153               	 
 154               	;----------------------------------------------------------------------
 155               	;
 156               	; ok ( w1 w2 -- 0 | -1 ) 
 157               	; w1 > w2
 158 ???? 0000 013E 	HEADER ">", "GTHAN",
 159 ???? 0000 0000 	    .word SWAP, LTHAN, ENDS 
 159      0000 
 160               	 
 161               	;----------------------------------------------------------------------
 162               	;  ok 0>  must be signed 
 163               	;
 164 ???? 0000 0230 	HEADER "0>", "ZEROGT",
 164      3E20 
 165 ???? 0000 0000 	     .word ZERO, LTHAN, ENDS 
 165      0000 
 166               	 
 167               	;----------------------------------------------------------------------
 168               	;  ok 0< must be signed 
 169               	;
 170 ???? 0000 0230 	HEADER "0<", "ZEROLT",
 170      3C20 
 171 ???? 0000 0000 	    .word ZERO, SWAP, LTHAN, ENDS 
 171      0000 0000 
 172               	 
 173               	;----------------------------------------------------------------------
 174               	;
 175               	; ok ( w -- w * CELL  ) 
 176               	; CELL is 2, multiply by 2, easy way 
 177               	;
 178 ???? 0000 0543 	HEADER "CELLS", "CELLS",
 178      454C 4C53 
 179 ???? 0000 0000 	    .word SHL, ENDS 
 180               	 
 181               	;----------------------------------------------------------------------
 182               	;
 183               	; ok ( w -- w + CELL ) 
 184               	;
 185 ???? 0000 0543 	HEADER "CELL+", "CELLPLUS",
 185      454C 4C2B 
 186 ???? 0000 0000 	    .word CELL, PLUS, ENDS 
 186      0000 
 187               	 
 188               	;----------------------------------------------------------------------
 189               	;
 190               	; ok ( w -- w - CELL ) 
 191               	;
 192 ???? 0000 0543 	HEADER "CELL-", "CELLMINUS",
 192      454C 4C2D 
 193 ???? 0000 0000 	    .word CELL, MINUS, ENDS 
 193      0000 
 194               	 
 195               	;----------------------------------------------------------------------
 196               	;
 197               	; ok ( w -- w + 1 ) 
 198               	;
 199 ???? 0000 0231 	HEADER "1+", "ONEPLUS",
 199      2B20 
 200 ???? 0000 0000 	     .word ONE, PLUS, ENDS 
 200      0000 
 201               	 
 202               	;----------------------------------------------------------------------
 203               	;
 204               	; ok ( w -- w - 1 ) 
 205               	;
 206 ???? 0000 0231 	HEADER "1-", "ONEMINUS",
 206      2D20 
 207 ???? 0000 0000 	     .word ONE, MINUS, ENDS 
 207      0000 
 208               	 
 209               	;----------------------------------------------------------------------
 210               	;
 211               	; ok ( w -- w + 2 ) 
 212               	;
 213 ???? 0000 0232 	HEADER "2+", "TWOPLUS",
 213      2B20 
 214 ???? 0000 0000 	     .word TWO, PLUS, ENDS 
 214      0000 
 215               	 
 216               	;----------------------------------------------------------------------
 217               	;
 218               	; ok ( w -- w - 2 ) 
 219               	;
 220 ???? 0000 0232 	HEADER "2-", "TWOMINUS",
 220      2D20 
 221 ???? 0000 0000 	     .word TWO, MINUS, ENDS 
 221      0000 
 222               	 
 223               	;----------------------------------------------------------------------
 224               	;
 225               	; ok ( u w -- ) 
 226               	;
 227 ???? 0000 022B 	HEADER "+!", "PLUSTO",
 227      2120 
 228 ???? 0000 0000 	    .word DUP, TOR, AT, PLUS, RTO, TO, ENDS 
 228      0000 0000 
 228      0000 0000 
 228      0000 
 229               	 
 230               	;----------------------------------------------------------------------
 231               	;
 232               	; ok ( w -- w + 1 ) 
 233               	;
 234 ???? 0000 0543 	HEADER "CHAR+", "CHARPLUS",
 234      4841 522B 
 235 ???? 0000 0000 	    .word ONEPLUS, ENDS 
 236               	 
 237               	;----------------------------------------------------------------------
 238               	;
 239               	; ok ( w -- w - 1 ) 
 240               	;
 241 ???? 0000 0543 	HEADER "CHAR-", "CHARMINUS",
 241      4841 522D 
 242 ???? 0000 0000 	    .word ONEMINUS, ENDS 
 243               	 
 244               	;----------------------------------------------------------------------
 245               	;
 246               	; ok ( w -- w ) 
 247               	;   char is 1, then does nothing
 248               	;
 249 ???? 0000 0543 	HEADER "CHARS", "CHARS",
 249      4841 5253 
 250 ???? 0000      	    .word ENDS 
 251               	 
 252               	;********************************************************************** 
 253               	;
 254               	;    load variables 
 255               	;
 256               	;----------------------------------------------------------------------
 257               	;
 258               	; ok ( -- w) 
 259               	;
 260 ???? 0000 0354 	HEADER "TIB", "TIB",
 260      4942 
 261 ???? 0000 0000 	    .word LIT, TIB0, ENDS
 261      0000 
 262 ???? 0C94 0000 	    POON 
 263               	 
 264               	;----------------------------------------------------------------------
 265               	;
 266               	; ok ( -- w) 
 267               	;
 268 ???? 0000 0553 	HEADER "STATE", "STATE",
 268      5441 5445 
 269 ???? 0000 0000 	    .word LIT, STAT, ENDS 
 269      0000 
 270               	 
 271               	;----------------------------------------------------------------------
 272               	;
 273               	; ok ( -- w) 
 274               	;
 275 ???? 0000 0442 	HEADER "BASE", "BASE",
 275      4153 4520 
 276 ???? 0000 0000 	    .word LIT, BASE, ENDS
 276      0000 
 277               	 
 278               	;----------------------------------------------------------------------
 279               	;
 280               	; ok ( -- w) 
 281               	;   keep PS for checks
 282 ???? 0000 0343 	HEADER "CSP", "CSP",
 282      5350 
 283 ???? 0000 0000 	    .word LIT, CSPP, ENDS
 283      0000 
 284               	 
 285               	;----------------------------------------------------------------------
 286               	;
 287               	; ok ( -- w) 
 288               	;
 289 ???? 0000 0245 	HEADER "EP", "EPP",
 289      5020 
 290 ???? 0000 0000 	    .word LIT, VEP, ENDS
 290      0000 
 291               	 
 292               	;----------------------------------------------------------------------
 293               	;
 294               	; ok ( -- w) 
 295               	;
 296 ???? 0000 0244 	HEADER "DP", "DPP",
 296      5020 
 297 ???? 0000 0000 	    .word LIT, VDP, ENDS
 297      0000 
 298               	 
 299               	;----------------------------------------------------------------------
 300               	;
 301               	; ok ( -- w) 
 302               	;
 303 ???? 0000 0248 	HEADER "HP", "HPP",
 303      5020 
 304 ???? 0000 0000 	    .word LIT, VHP, ENDS
 304      0000 
 305               	 
 306               	;----------------------------------------------------------------------
 307               	;
 308               	; ok ( -- w) 
 309               	; stack for variables from end of stacks
 310               	;
 311 ???? 0000 0255 	HEADER "UP", "UPP",
 311      5020 
 312 ???? 0000 0000 	    .word LIT, VUP, ENDS
 312      0000 
 313               	 
 314               	;----------------------------------------------------------------------
 315               	;
 316               	; ok ( -- w) 
 317               	; buffer for user, att not updates UP
 318               	;
 319 ???? 0000 0442 	HEADER "BUFF", "BUFF",
 319      5546 4620 
 320 ???? 0000 0000 	    .word UPP, SWAP, MINUS, ENDS
 320      0000 0000 
 321               	 
 322               	;----------------------------------------------------------------------
 323               	;
 324               	; ok ( -- w) 
 325               	; buffer for user, shares variables
 326               	;
 327 ???? 0000 0350 	HEADER "PAD", "PAD",
 327      4144 
 328 ???? 0000 5000 	    .word LIT, PAD_SIZE, BUFF, ENDS
 328      0000 0000 
 329               	 
 330               	;----------------------------------------------------------------------
 331               	;
 332               	; ok ( -- w) 
 333               	;
 334               	;HEADER "RS$", "RSIS",
 335               	;    .word LIT, RS0, ENDS
 336               	 
 337               	;----------------------------------------------------------------------
 338               	;
 339               	; ok ( -- w) 
 340               	;
 341               	;HEADER "PS$", "PSIS",
 342               	;    .word LIT, PS0, ENDS
 343               	 
 344               	
 345               	;----------------------------------------------------------------------
 346               	;
 347               	; ok ( -- w) 
 348               	;
 349 ???? 0000 0544 	HEADER "DEPTH", "DEPTH",
 349      4550 5448 
 350 ???? 0000 0000 	    .word PSAT, LIT, PS0, MINUS, ENDS
 350      0000 0000 
 350      0000 
 351               	 
 352               	;----------------------------------------------------------------------
 353               	;
 354               	; ok ( -- w) 
 355               	;
 356 ???? 0000 0652 	HEADER "RDEPTH", "RDEPTH",
 356      4445 5054 
 356      4820 
 357 ???? 0000 0000 	    .word RSAT, LIT, RS0, MINUS, ENDS
 357      0000 0000 
 357      0000 
 358               	 
 359               	
 360               	;********************************************************************** 
 361               	; 
 362               	;   vocabulary words
 363               	;
 364               	;   just a hook, not using, in AVR only one vocabulary
 365               	;
 366               	;----------------------------------------------------------------------
 367 ???? 0000 0743 	HEADER "CURRENT", "CURRENT",
 367      5552 5245 
 367      4E54 
 368 ???? 0000 0000 	    .word LIT, CURR, ENDS
 368      0000 
 369               	
 370               	;----------------------------------------------------------------------
 371 ???? 0000 0743 	HEADER "CONTEXT", "CONTEXT",
 371      4F4E 5445 
 371      5854 
 372 ???? 0000 0000 	    .word LIT, CTXT, ENDS
 372      0000 
 373               	
 374               	;----------------------------------------------------------------------
 375 ???? 0000 0B44 	HEADER "DEFINITIONS", "DEFINITIONS",
 375      4546 494E 
 375      4954 494F 
 375      4E53 
 376 ???? 0000 0000 	    .word CONTEXT, AT, CURRENT, TO, ENDS
 376      0000 0000 
 376      0000 
 377               	
 378               	;----------------------------------------------------------------------
 379 ???? 0000 064C 	HEADER "LATEST", "LATEST",
 379      4154 4553 
 379      5420 
 380 ???? 0000 0000 	    .word LIT, LAST, ENDS
 380      0000 
 381               	 
 382               	;********************************************************************** 
 383               	; 
 384               	;   basic words
 385               	;
 386               	;----------------------------------------------------------------------
 387               	;   strange changes ?
 388               	;   all compilation is done in sram, then need a trick
 389               	;
 390               	;   up is a pointer to next free cell in sram, from the end of TIB
 391               	;   dp is a pointer to next free cell in flash
 392               	;   hp is a pointer to next free cell in sram, syncronous with dp 
 393               	;
 394               	;   here return where dp is, used for absolute branch and zbranch,
 395               	;   uhere returns where hp is, used for place in sram,
 396               	;   comma writes in sram, and allot updates up and dp pointers
 397               	;   when done to write sram to flash
 398               	;
 399               	;----------------------------------------------------------------------
 400               	;
 401               	; ok HERE ( -- w ) 
 402               	;
 403 ???? 0000 0555 	HEADER "UHERE", "UHERE",
 403      4845 5245 
 404 ???? 0000 0000 	    .word HPP, AT, ENDS 
 404      0000 
 405               	 
 406               	;----------------------------------------------------------------------
 407               	;
 408               	; ok HERE ( -- w ) 
 409               	;
 410 ???? 0000 0448 	HEADER "HERE", "HERE", F_CORE
 410      4552 4520 
 411 ???? 0000 0000 	    .word DPP, AT, ENDS 
 411      0000 
 412               	 
 413               	;----------------------------------------------------------------------
 414               	;
 415               	; ok ALLOT ( u -- ) 
 416               	; not standart: updates DP and UP
 417               	 
 418 ???? 0000 0541 	HEADER "ALLOT", "ALLOT", F_CORE
 418      4C4C 4F54 
 419 ???? 0000      	    .word DUP
 420 ???? 0000 0000 	    .word HPP, AT, PLUS, HPP, TO 
 420      0000 0000 
 420      0000 
 421 ???? 0000 0000 	    .word DPP, AT, PLUS, DPP, TO 
 421      0000 0000 
 421      0000 
 422 ???? 0000      	    .word ENDS 
 423               	 
 424               	;----------------------------------------------------------------------
 425               	;
 426               	; is ALIGN 
 427               	; not standart: updates DP and UP
 428               	;
 429 ???? 0000 0541 	HEADER "ALIGN", "ALIGN", F_CORE
 429      4C49 474E 
 430 ???? 0000 0000 	    .word HPP, AT, ALIGNED, HPP, TO
 430      0000 0000 
 430      0000 
 431 ???? 0000 0000 	    .word DPP, AT, ALIGNED, DPP, TO
 431      0000 0000 
 431      0000 
 432 ???? 0000      	    .word ENDS 
 433               	 
 434               	;----------------------------------------------------------------------
 435               	;
 436               	; ok CCOMMA ( w -- ) 
 437               	;
 438 ???? 0000 4243 	HEADER "C,", "CCOMMA", F_IMMEDIATE | F_CORE
 438      2C20 
 439 ???? 0000 0000 	    .word UHERE, CTO, ONE, ALLOT, ENDS 
 439      0000 0000 
 439      0000 
 440               	 
 441               	;----------------------------------------------------------------------
 442               	;
 443               	; ok COMMMA ( w -- ) 
 444               	;
 445 ???? 0000 412C 	HEADER ",", "COMMA", F_IMMEDIATE | F_CORE
 446 ???? 0000 0000 	    .word UHERE, TO, CELL, ALLOT, ENDS 
 446      0000 0000 
 446      0000 
 447               	 
 448               	;----------------------------------------------------------------------
 449               	;
 450               	; ok TOMMA ( a2 a1 -- ) 
 451               	; not standart, no updates DP or UP, 
 452               	;   just do TO (a2 a1-a2+UP -- )
 453               	;
 454 ???? 0000 423C 	HEADER "<,", "TOMMA", F_IMMEDIATE
 454      2C20 
 455 ???? 0000 0000 	    .word OVER, MINUS, UHERE, PLUS, TO, ENDS 
 455      0000 0000 
 455      0000 0000 
 456               	 
 457               	;-------------------------------------'---------------------------------
 458               	;
 459               	; is DOVAR ( -- a ), place the address of next cell into stack, 
 460               	;   R> DUP 2+ >R
 461               	;
 462               	;	note: the address is at flash, then if is a reference to a value
 463               	;	it must be de-referenced to sram 
 464               	;	      
 465 ???? 0000 0544 	HEADER "DOVAR", "DOVAR",
 465      4F56 4152 
 466 ???? 0000 0000 	    .word RTO, DUP, CELL, PLUS, TOR, ENDS 
 466      0000 0000 
 466      0000 0000 
 467               	 
 468               	;-------------------------------------'---------------------------------
 469               	;
 470               	; is DOCON ( -- a ), place the contents of next cell into stack, 
 471               	;   R> DUP 2+ >R @
 472               	;
 473               	;	note: the address is at flash, then if is a reference
 474               	;   to a value, it must be de-referenced (ATAT) to sram 
 475               	;
 476 ???? 0000 0544 	HEADER "DOCON", "DOCON",
 476      4F43 4F4E 
 477 ???? 0000 0000 	    .word DOVAR, ATAT, AT, ENDS 
 477      0000 0000 
 478               	
 479               	;----------------------------------------------------------------------
 480               	;
 481               	; is LITERAL ( w -- ) 
 482               	;
 483 ???? 0000 074C 	HEADER "LITERAL", "LITERAL", F_CORE
 483      4954 4552 
 483      414C 
 484 ???? 0000 0000 	    .word LIT, LIT, COMMA, COMMA, ENDS 
 484      0000 0000 
 484      0000 
 485               	 
 486               	;----------------------------------------------------------------------
 487               	;
 488               	; ok this puts next cell into stack and compiles into HERE 
 489               	; used only in precompiled sources as forth-twigs
 490               	; 
 491 ???? 0000 4443 	HEADER "COMP", "COMP", F_IMMEDIATE
 491      4F4D 5020 
 492 ???? 0000 0000 	    .word RTO, DUP, CELLPLUS, TOR, ATAT, COMMA, ENDS 
 492      0000 0000 
 492      0000 0000 
 492      0000 
 493               	 
 494               	;----------------------------------------------------------------------
 495               	;
 496               	; ok compile a eow 
 497               	;
 498 ???? 0000 4445 	HEADER "EXIT", "EXIT", F_IMMEDIATE
 498      5849 5420 
 499 ???? 0000 0000 	    .word COMP, ENDS, ENDS
 499      0000 
 500               	
 501               	;----------------------------------------------------------------------
 502               	;
 503               	; ok execute xt from tos
 504               	;
 505 ???? 0000 4745 	HEADER "EXECUTE", "EXEC", F_IMMEDIATE
 505      5845 4355 
 505      5445 
 506 ???? 0000 0000 	    .word TOR, ENDS
 507               	
 508               	;----------------------------------------------------------------------
 509               	;
 510               	; ok make a word recursive 
 511               	; recursive return to last 
 512               	;
 513 ???? 0000 0752 	HEADER "RECURSE", "RECURSE", 
 513      4543 5552 
 513      5345 
 514 ???? 0000 0000 	    .word RAT, CELL, MINUS, TOR, ENDS
 514      0000 0000 
 514      0000 
 515               	
 516               	;----------------------------------------------------------------------
 517               	;
 518               	; Control words review. BRANCH and ZBRANCH are absolute references.
 519               	;
 520               	;----------------------------------------------------------------------
 521               	 
 522               	;----------------------------------------------------------------------
 523               	;
 524               	; ok MARKTO 
 525               	; places a address of cell
 526               	; places to address to self in a holder, 
 527               	; and left address of holder at stack
 528               	;
 529 ???? 0000 664D 	HEADER "MARKTO", "MARKTO", F_IMMEDIATE | F_COMPILE,
 529      4152 4B54 
 529      4F20 
 530 ???? 0000 0000 	    .word HERE, DUP, COMMA, ENDS 
 530      0000 0000 
 531               	 
 532               	;----------------------------------------------------------------------
 533               	;
 534               	; ok TOMARK 
 535               	; places a address of cell 
 536               	; resolves a back reference to last holder 
 537               	; and places a address to self at holder 
 538 ???? 0000 6654 	HEADER "TOMARK", "TOMARK", F_IMMEDIATE | F_COMPILE,
 538      4F4D 4152 
 538      4B20 
 539 ???? 0000 0000 	    .word HERE, SWAP, TOMMA, ENDS 
 539      0000 0000 
 540               	 
 541               	;----------------------------------------------------------------------
 542               	;
 543               	; ok BEGIN 
 544               	;
 545 ???? 0000 6542 	HEADER "BEGIN", "BEGIN", F_IMMEDIATE | F_COMPILE,
 545      4547 494E 
 546 ???? 0000 0000 	    .word HERE, ENDS 
 547               	 
 548               	;----------------------------------------------------------------------
 549               	;
 550               	; ok AGAIN resolves a unconditional branch 
 551               	;
 552 ???? 0000 6541 	HEADER "AGAIN", "AGAIN", F_IMMEDIATE | F_COMPILE,
 552      4741 494E 
 553 ???? 0000 0000 	    .word COMP, BRANCH, COMMA, ENDS 
 553      0000 0000 
 554               	 
 555               	;----------------------------------------------------------------------
 556               	;
 557               	; ok UNTIL resolves a conditional branch, as C do { ... } while (0) 
 558               	;
 559 ???? 0000 6555 	HEADER "UNTIL", "UNTIL", F_IMMEDIATE | F_COMPILE,
 559      4E54 494C 
 560 ???? 0000 0000 	    .word COMP, ZBRANCH, COMMA, ENDS 
 560      0000 0000 
 561               	 
 562               	;----------------------------------------------------------------------
 563               	;
 564               	; ok UNLESS 
 565               	;
 566 ???? 0000 6655 	HEADER "UNLESS", "UNLESS", F_IMMEDIATE | F_COMPILE, 
 566      4E4C 4553 
 566      5320 
 567 ???? 0000 0000 	    .word ZEQU, UNTIL, ENDS 
 567      0000 
 568               	 
 569               	;----------------------------------------------------------------------
 570               	;
 571               	; ok IF (executed if tos is not zero)
 572               	;
 573 ???? 0000 6249 	HEADER "IF", "IF", F_IMMEDIATE | F_COMPILE,
 573      4620 
 574 ???? 0000 0000 	    .word COMP, ZBRANCH, MARKTO, ENDS 
 574      0000 0000 
 575               	 
 576               	;----------------------------------------------------------------------
 577               	;
 578               	; ok GO (executed ever)
 579               	;
 580 ???? 0000 6247 	HEADER "GO", "GO", F_IMMEDIATE | F_COMPILE,
 580      4F20 
 581 ???? 0000 0000 	    .word COMP, BRANCH, MARKTO, ENDS 
 581      0000 0000 
 582               	 
 583               	;----------------------------------------------------------------------
 584               	;
 585               	; ok THEN 
 586               	;
 587 ???? 0000 6454 	HEADER "THEN", "THEN", F_IMMEDIATE | F_COMPILE,
 587      4845 4E20 
 588 ???? 0000 0000 	    .word ENDIF, ENDS 
 589               	 
 590               	;----------------------------------------------------------------------
 591               	;
 592               	; ok ENDIF resolves a forward branch 
 593               	;
 594 ???? 0000 6545 	HEADER "ENDIF", "ENDIF", F_IMMEDIATE | F_COMPILE,
 594      4E44 4946 
 595 ???? 0000 0000 	    .word TOMARK, ENDS 
 596               	 
 597               	;----------------------------------------------------------------------
 598               	;
 599               	; ok ELSE (executed if tos is zero)
 600               	;
 601 ???? 0000 6445 	HEADER "ELSE", "ELSE", F_IMMEDIATE | F_COMPILE,
 601      4C53 4520 
 602 ???? 0000 0000 	    .word GO, SWAP, TOMARK, ENDS 
 602      0000 0000 
 603               	 
 604               	;----------------------------------------------------------------------
 605               	;
 606               	; ok WHILE 
 607               	;
 608 ???? 0000 6557 	HEADER "WHILE", "WHILE", F_IMMEDIATE | F_COMPILE,
 608      4849 4C45 
 609 ???? 0000 0000 	    .word IF, SWAP, ENDS 
 609      0000 
 610               	 
 611               	;----------------------------------------------------------------------
 612               	;
 613               	; ok REPEAT 
 614               	;
 615 ???? 0000 6652 	HEADER "REPEAT", "REPEAT", F_IMMEDIATE | F_COMPILE,
 615      4550 4541 
 615      5420 
 616 ???? 0000 0000 	    .word AGAIN, TOMARK, ENDS 
 616      0000 
 617               	 
 618               	 
 619               	;----------------------------------------------------------------------
 620               	; @eforth
 621               	; is AHEAD (a forward goto)
 622               	;
 623 ???? 0000 6541 	HEADER "AHEAD", "AHEAD", F_IMMEDIATE | F_COMPILE,
 623      4845 4144 
 624 ???? 0000 0000 	    .word GO, ENDS 
 625               	 
 626               	;----------------------------------------------------------------------
 627               	; @eforth
 628               	; is AFT 
 629               	;
 630 ???? 0000 6341 	HEADER "AFT", "AFT", F_IMMEDIATE | F_COMPILE,
 630      4654 
 631 ???? 0000 0000 	    .word DROP, GO, HERE, SWAP, ENDS 
 631      0000 0000 
 631      0000 
 632               	 
 633               	;----------------------------------------------------------------------
 634               	;
 635               	; is HOOK 
 636               	;
 637 ???? 0000 6448 	HEADER "HOOK", "HOOK", F_IMMEDIATE | F_COMPILE,
 637      4F4F 4B20 
 638 ???? 0000 0000 	    .word BEGIN, TOR, ENDS 
 638      0000 
 639               	 
 640               	;----------------------------------------------------------------------
 641               	;
 642               	; is BACK 
 643               	;
 644 ???? 0000 6442 	HEADER "BACK", "BACK", F_IMMEDIATE | F_COMPILE,
 644      4143 4B20 
 645 ???? 0000 0000 	    .word RTO, AGAIN, ENDS 
 645      0000 
 646               	 
 647               	;----------------------------------------------------------------------
 648               	;
 649               	; is ?BACK 
 650               	;
 651 ???? 0000 653F 	HEADER "?BACK", "QBACK", F_IMMEDIATE | F_COMPILE,
 651      4241 434B 
 652 ???? 0000 0000 	    .word RTO, UNTIL, ENDS 
 652      0000 
 653               	 
 654               	;----------------------------------------------------------------------
 655               	;
 656               	; is FOR ( u -- h ; -- u )
 657               	; count down, from +32767
 658 ???? 0000 4346 	HEADER "FOR", "FOR", F_IMMEDIATE
 658      4F52 
 659 ???? 0000 0000 	    .word COMP, TOR, BEGIN, ENDS 
 659      0000 0000 
 660               	 
 661               	;----------------------------------------------------------------------
 662               	;
 663               	; is TXEN ( -- ; -- u ) 
 664               	;
 665 ???? 0000 0454 	HEADER "TXEN", "TXEN", 
 665      5845 4E20 
 666 ???? 0000 0000 	    .word RTO, ONEMINUS
 667 ???? 0000 0000 	    .word DUP, ZBRANCH, 1f  
 667      0000 
 668 ???? 0000      	    .word TOR 
 669 ???? 0000      	1:  .word ENDS
 670               	
 671               	;----------------------------------------------------------------------
 672               	;
 673               	; is NEXT ( h -- ) R:( -- h u ) 
 674               	;
 675 ???? 0000 444E 	HEADER "NEXT", "NEXT", F_IMMEDIATE
 675      4558 5420 
 676 ???? 0000 0000 	    .word COMP, TXEN, UNLESS, ENDS
 676      0000 0000 
 677               	
 678               	;----------------------------------------------------------------------
 679               	; rever zzzz
 680               	/*
 681               	\ CASE's implementation imported from Gforth.
 682               	\
 683               	\ Usage
 684               	\ ( n )
 685               	\ CASE
 686               	\    1 OF .... ENDOF
 687               	\    2 OF .... ENDOF
 688               	\    OTHERWISE
 689               	\ END-CASE
 690               	\
 691               	\ Remember not to consume the element in the OTHERWISE case.
 692               	*/
 693               	;----------------------------------------------------------------------
 694               	;
 695               	; is CASE ( a -- )
 696               	;
 697 ???? 0000 4443 	HEADER "CASE", "CASE", F_IMMEDIATE
 697      4153 4520 
 698 ???? 0000 0000 	    .word ZERO, ENDS
 699               	
 700               	;----------------------------------------------------------------------
 701               	;
 702               	; is OF ( -- )
 703               	;
 704 ???? 0000 424F 	HEADER "OF", "OF", F_IMMEDIATE
 704      4620 
 705 ???? 0000 0000 	    .word ONEPLUS, COMP, OVER, COMP, EQUAL, COMP, IF, COMP, DROP, ENDS
 705      0000 0000 
 705      0000 0000 
 705      0000 0000 
 705      0000 0000 
 706               	
 707               	;----------------------------------------------------------------------
 708               	;
 709               	; is ENDOF ( -- )
 710               	;
 711 ???? 0000 4545 	HEADER "ENDOF", "ENDOF", F_IMMEDIATE
 711      4E44 4F46 
 712 ???? 0000 0000 	    .word COMP, ELSE, ENDS
 712      0000 
 713               	
 714               	;----------------------------------------------------------------------
 715               	;
 716               	; is DEFAULT ( -- )
 717               	;
 718 ???? 0000 4744 	HEADER "DEFAULT", "DEFAULT", F_IMMEDIATE
 718      4546 4155 
 718      4C54 
 719 ???? 0000 0000 	    .word COMP, FTRUE, COMP, IF, COMP, DROP, ENDS
 719      0000 0000 
 719      0000 0000 
 719      0000 
 720               	
 721               	;----------------------------------------------------------------------
 722               	;
 723               	; is ENDCASE ( n -- ) 
 724               	;
 725 ???? 0000 4745 	HEADER "ENDCASE", "ENDCASE", F_IMMEDIATE
 725      4E44 4341 
 725      5345 
 726 ???? 0000 0000 	    .word COMP, DROP 
 727 ???? 0000 0000 	    .word FOR, COMP, THEN, NEXT, ENDS
 727      0000 0000 
 727      0000 
 728               	
 729               	;----------------------------------------------------------------------
 730               	;
 731               	; is DOIT ( n m -- ; -- m+0x8000 m+0x8000-n ) 
 732               	; counts from n to m
 733 ???? 0000 0444 	HEADER "DOIT", "DOIT", 
 733      4F49 5420 
 734               	    ; forth-83 0x8000 trick
 735 ???? 0000 0080 	    .word LIT, 0x8000, PLUS, DUP, TOR, MINUS, TOR, ENDS
 735      0000 0000 
 735      0000 0000 
 735      0000 0000 
 736               	
 737               	;----------------------------------------------------------------------
 738               	;
 739               	; is LOOPN ( k -- true | false ; m n -- m n+k ) 
 740               	;
 741 ???? 0000 062B 	HEADER "+LOOPI", "LOOPN", 
 741      4C4F 4F50 
 741      4920 
 742 ???? 0000 0000 	    .word RTO, PLUS, RTO, OVER, OVER ; ( n+k m k )
 742      0000 0000 
 742      0000 
 743 ???? 0000 0000 	    .word LTHAN, ZBRANCH, 6f
 743      0000 
 744               	4:  
 745 ???? 0000 0000 	    .word RTO, RTO, FTRUE, ENDS
 745      0000 0000 
 746               	6:  
 747 ???? 0000 0000 	    .word DROP, DROP, FFALSE, ENDS 
 747      0000 0000 
 748               	
 749               	;----------------------------------------------------------------------
 750               	;
 751               	; is LOOPI ( k -- f ; m n -- m n+k false | true) 
 752               	;
 753 ???? 0000 054C 	HEADER "LOOPI", "LOOPI", 
 753      4F4F 5049 
 754 ???? 0000 0000 	    .word ONE, LOOPN, ENDS
 754      0000 
 755               	
 756               	;----------------------------------------------------------------------
 757               	;
 758               	; is DO ( n m -- ; --  m n ) 
 759               	; counts from n to m
 760               	;
 761 ???? 0000 4244 	HEADER "DO", "DO", F_IMMEDIATE
 761      4F20 
 762 ???? 0000 0000 	    .word COMP, DOIT, BEGIN, ENDS
 762      0000 0000 
 763               	
 764               	;----------------------------------------------------------------------
 765               	;
 766               	; is I (  -- n ; m n -- m n ) 
 767               	;
 768 ???? 0000 0149 	HEADER "I", "I", 
 769 ???? 0000 0000 	    .word RTO, DUP, TOR, ENDS
 769      0000 0000 
 770               	
 771               	;----------------------------------------------------------------------
 772               	;
 773               	; is j (  -- n ; m n -- m n ) 
 774               	;
 775 ???? 0000 014A 	HEADER "J", "J", 
 776 ???? 0000 0000 	    .word RTO, RTO, RTO, DUP, TOR, SWAP, TOR, SWAP, TOR, ENDS
 776      0000 0000 
 776      0000 0000 
 776      0000 0000 
 776      0000 0000 
 777               	
 778               	;----------------------------------------------------------------------
 779               	;
 780               	; is LEAVE ( n m -- ; -- n m ) 
 781               	;   old way, runs last one
 782               	;
 783 ???? 0000 454C 	HEADER "LEAVE", "LEAVE", F_IMMEDIATE
 783      4541 5645 
 784 ???? 0000 0000 	    .word UNLOOP, EXIT, ENDS
 784      0000 
 785               	
 786               	;----------------------------------------------------------------------
 787               	;
 788               	; is LOOP ( -- ; -- m n+1 ) 
 789               	;
 790 ???? 0000 444C 	HEADER "LOOP", "LOOP", F_IMMEDIATE
 790      4F4F 5020 
 791 ???? 0000 0000 	    .word COMP, LOOPI, UNTIL, ENDS
 791      0000 0000 
 792               	
 793               	;----------------------------------------------------------------------
 794               	;
 795               	; is LOOP ( k -- ; -- m n+k ) 
 796               	;
 797 ???? 0000 452B 	HEADER "+LOOP", "PLOOP", F_IMMEDIATE
 797      4C4F 4F50 
 798 ???? 0000 0000 	    .word COMP, LOOPN, UNTIL, ENDS
 798      0000 0000 
 799               	
 800               	;----------------------------------------------------------------------
 801               	;
 802               	; is UNLOOP ( -- ; -- m n+1 ) 
 803               	;
 804 ???? 0000 4655 	HEADER "UNLOOP", "UNLOOP", F_IMMEDIATE
 804      4E4C 4F4F 
 804      5020 
 805 ???? 0000 0000 	    .word RTO, RTO, DROP, DROP, ENDS
 805      0000 0000 
 805      0000 
 806               	
 807               	;**********************************************************************
 808               	;----------------------------------------------------------------------
 809               	;
 810               	; is  ( a u -- )
 811               	;
 812 ???? 0000 0242 	HEADER "BL", "BL",
 812      4C20 
 813 ???? 0000 2000 	    .word LIT, 0x20, EMIT, ENDS
 813      0000 0000 
 814               	
 815               	;----------------------------------------------------------------------
 816               	;
 817               	; is  ( a u -- )
 818               	;
 819 ???? 0000 0243 	HEADER "CR", "CR",
 819      5220 
 820 ???? 0000 0D00 	    .word LIT, 0x0D, EMIT, ENDS
 820      0000 0000 
 821               	
 822               	;----------------------------------------------------------------------
 823               	;
 824               	; is  ( a u -- )
 825               	;
 826 ???? 0000 024C 	HEADER "LF", "LF",
 826      4620 
 827 ???? 0000 0A00 	    .word LIT, 0x0A, EMIT, ENDS
 827      0000 0000 
 828               	
 829               	;----------------------------------------------------------------------
 830               	;
 831               	; is  ( a u -- )
 832               	; it is used as CR/LF in databases and some file formats
 833               	;
 834 ???? 0000 0450 	HEADER "PACE", "PACE",
 834      4143 4520 
 835 ???? 0000 0B00 	    .word LIT, 0x0B, EMIT, ENDS
 835      0000 0000 
 836               	
 837               	;----------------------------------------------------------------------
 838               	;
 839               	; is  ( a u -- )
 840               	;
 841 ???? 0000 0442 	HEADER "BELL", "BELL",
 841      454C 4C20 
 842 ???? 0000 0700 	    .word LIT, 0x07, EMIT, ENDS
 842      0000 0000 
 843               	
 844               	;---------------------------------------------------------------------- 
 845               	; 
 846               	; is SPACE ( -- )
 847               	; 
 848 ???? 0000 0553 	HEADER "SPACE", "SPACE" 
 848      5041 4345 
 849 ???? 0000 2000 	    .word LIT, 0x20, EMIT, ENDS 
 849      0000 0000 
 850               	 
 851               	;---------------------------------------------------------------------- 
 852               	; 
 853               	; is SPACES ( n -- )
 854               	;   emits until 0
 855 ???? 0000 0653 	HEADER "SPACES", "SPACES" 
 855      5041 4345 
 855      5320 
 856 ???? 0000 0000 	1:  .word ZDUP, ZBRANCH, 2f
 856      0000 
 857 ???? 0000 0000 	    .word SPACE, ONEMINUS, BRANCH, 1b
 857      0000 0000 
 858 ???? 0000      	2:  .word ENDS 
 859               	 
 860               	;---------------------------------------------------------------------- 
 861               	; 
 862               	; is COUNT ( c-addr -- c-addr+1 c ) 
 863               	; convert counted string c-addr to address and count
 864 ???? 0000 0543 	HEADER "COUNT", "COUNT", 
 864      4F55 4E54 
 865 ???? 0000 0000 	    .word DUP, AT, TOR, ONEPLUS, RTO, ENDS 
 865      0000 0000 
 865      0000 0000 
 866               	 
 867               	;----------------------------------------------------------------------
 868               	;
 869               	; is  ( a u -- )
 870               	;
 871 ???? 0000 0454 	HEADER "TYPE", "TYPE",
 871      5950 4520 
 872 ???? 0000 0000 	1:  .word DUP, ZBRANCH, 2f
 872      0000 
 873 ???? 0000 0000 	    .word ONEMINUS, TOR, DUP, AT, EMIT, ONEPLUS, RTO
 873      0000 0000 
 873      0000 0000 
 873      0000 
 874 ???? 0000 0000 	    .word BRANCH, 1b
 875 ???? 0000 0000 	2:  .word DROP, DROP, ENDS 
 875      0000 
 876               	  
 877               	;----------------------------------------------------------------------
 878               	;
 879               	; is  ( u1 u2 -- u3 )
 880               	;
 881 ???? 0000 0355 	HEADER "UM-", "UMMINUS",
 881      4D2D 
 882 ???? 0000 0000 	    .word NEGATE, UMPLUS, ENDS
 882      0000 
 883               	
 884               	;**********************************************************************
 885               	;----------------------------------------------------------------------
 886               	;
 887 ???? 0000 0543 	HEADER "COLD0", "COLDZERO", F_LEAP
 887      4F4C 4430 
 888               	    
 889 ???? 0000 0000 	    .word LIT, 0x0000, LIT, VOID, TO 
 889      0000 0000 
 889      0000 
 890 ???? 0000 0000 	    .word LIT, 0x0000, LIT, LIVE, TO 
 890      0000 0000 
 890      0000 
 891 ???? 0000 0000 	    .word LIT, 0x0000, LIT, TURN, TO 
 891      0000 0000 
 891      0000 
 892 ???? 0000 0000 	    .word LIT, 0x0000, LIT, REST, TO 
 892      0000 0000 
 892      0000 
 893               	
 894 ???? 0000 0000 	    .word LIT, ZZZZ, LIT, LAST, TO 
 894      0000 0000 
 894      0000 
 895 ???? 0000 0000 	    .word LIT, free_flash, LIT, VDP, TO
 895      0000 0000 
 895      0000 
 896 ???? 0000 0000 	    .word LIT, EP0, LIT, VEP, TO
 896      0000 0000 
 896      0000 
 897               	
 898 ???? 0000 0000 	    .word LIT, UH0, LIT, VHP, TO
 898      0000 0000 
 898      0000 
 899 ???? 0000 FF08 	    .word LIT, US0, LIT, VUP, TO
 899      0000 0000 
 899      0000 
 900 ???? 0000      	    .word ENDS
 901               	
 902               	;----------------------------------------------------------------------
 903               	;
 904 ???? 0000 0645 	HEADER "EELOAD", "EELOAD", F_LEAP
 904      454C 4F41 
 904      4420 
 905 ???? 0000 0000 	    .word ZERO, DUP, EAT, LIT, VOID, TO 
 905      0000 0000 
 905      0000 0000 
 906 ???? 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, LIVE, TO 
 906      0000 0000 
 906      0000 0000 
 906      0000 
 907 ???? 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, TURN, TO 
 907      0000 0000 
 907      0000 0000 
 907      0000 
 908 ???? 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, REST, TO 
 908      0000 0000 
 908      0000 0000 
 908      0000 
 909               	
 910 ???? 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, LAST, TO 
 910      0000 0000 
 910      0000 0000 
 910      0000 
 911 ???? 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, VDP, TO 
 911      0000 0000 
 911      0000 0000 
 911      0000 
 912 ???? 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, VEP, TO 
 912      0000 0000 
 912      0000 0000 
 912      0000 
 913 ???? 0000 0000 	    .word TWO, PLUS, DUP, EAT, LIT, VUP, TO 
 913      0000 0000 
 913      0000 0000 
 913      0000 
 914 ???? 0000      	    .word ENDS
 915               	
 916               	;----------------------------------------------------------------------
 917               	;
 918 ???? 0000 0645 	HEADER "EESAVE", "EESAVE", F_LEAP
 918      4553 4156 
 918      4520 
 919 ???? 0000 0000 	    .word ZERO, DUP, LIT, VOID, AT, SWAP, ETO 
 919      0000 0000 
 919      0000 0000 
 919      0000 
 920 ???? 0000 0000 	    .word TWO, PLUS, DUP, LIT, LIVE, AT, SWAP, ETO 
 920      0000 0000 
 920      0000 0000 
 920      0000 0000 
 921 ???? 0000 0000 	    .word TWO, PLUS, DUP, LIT, TURN, AT, SWAP, ETO 
 921      0000 0000 
 921      0000 0000 
 921      0000 0000 
 922 ???? 0000 0000 	    .word TWO, PLUS, DUP, LIT, REST, AT, SWAP, ETO 
 922      0000 0000 
 922      0000 0000 
 922      0000 0000 
 923               	
 924 ???? 0000 0000 	    .word TWO, PLUS, DUP, LIT, LAST, AT, SWAP, ETO 
 924      0000 0000 
 924      0000 0000 
 924      0000 0000 
 925 ???? 0000 0000 	    .word TWO, PLUS, DUP, LIT, VDP, AT, SWAP, ETO 
 925      0000 0000 
 925      0000 0000 
 925      0000 0000 
 926 ???? 0000 0000 	    .word TWO, PLUS, DUP, LIT, VEP, AT, SWAP, ETO 
 926      0000 0000 
 926      0000 0000 
 926      0000 0000 
 927 ???? 0000 0000 	    .word TWO, PLUS, DUP, LIT, VUP, AT, SWAP, ETO 
 927      0000 0000 
 927      0000 0000 
 927      0000 0000 
 928 ???? 0000      	    .word ENDS
 929               	
 930               	;----------------------------------------------------------------------
 931               	;
 932 ???? 0000 0443 	HEADER "COLD", "COLD", F_LEAP
 932      4F4C 4420 
 933 ???? 0000      	    .word EELOAD
 934 ???? 0000 0000 	    .word LIT, LIVE, ZEQU, ZBRANCH, _safe
 934      0000 0000 
 934      0000 
 935 ???? 0000 0000 	    .word COLDZERO, EESAVE  
 936               	_safe:    
 937 ???? 0000 0000 	    .word LIT, RS0, RSTO
 937      0000 
 938 ???? 0000 0000 	    .word LIT, PS0, PSTO
 938      0000 
 939 ???? 0000 0000 	    .word LIT, 0x00, STATE, TO
 939      0000 0000 
 940 ???? 0000 1000 	    .word LIT, 0x10, BASE, TO
 940      0000 0000 
 941 ???? 0000 0000 	    .word LIT, WARM, RTO
 941      0000 
 942 ???? 0000 0000 	    .word LIT, LIVE, DUP, AT, ONE, PLUS, SWAP, TO 
 942      0000 0000 
 942      0000 0000 
 942      0000 0000 
 943 ???? 0000      	    .word ENDS 
 944               	 
 945               	;----------------------------------------------------------------------
 946               	;
 947 ???? 0000 0457 	HEADER "WARM", "WARM", F_LEAP
 947      4152 4D20 
 948               	    ; verify error code 
 949               	    ; resets etc 
 950 ???? 0000 0000 	    .word LIT, TURN, AT, EXEC, QUIT, ENDS 
 950      0000 0000 
 950      0000 0000 
 951               	 
 952               	;----------------------------------------------------------------------
 953               	; does reset 
 954               	;
 955 ???? 0000 0342 	HEADER "BYE", "BYE", F_LEAP
 955      5945 
 956 ???? 0000      	    .word EESAVE
 957 ???? 0000 0000 	    .word LIT, REST, AT, EXEC, RESET, ENDS 
 957      0000 0000 
 957      0000 0000 
 958               	
 147               	
 148               	;----------------------------------------------------------------------
 149               	.p2align 1, 0x00
 150               	#include "doubles.S"
   1               	
   2               	
   3               	/*
   4               	 *  DISCLAIMER
   5               	 *
   6               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   7               	 *
   8               	 *  Permission is hereby granted, free of charge, to any person obtaining
   9               	 *  a copy of this software and associated documentation files (the
  10               	 *  "Software"), to deal in the Software without restriction, including
  11               	 *  without limitation the rights to use, copy, modify, merge, publish,
  12               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  13               	 *  permit persons to whom the Software is furnished to do so, subject to
  14               	 *  the following conditions:
  15               	 *
  16               	 *  The above copyright notice and this permission notice shall be
  17               	 *  included in all copies or substantial portions of the Software.
  18               	 *
  19               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  22               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  23               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  24               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  25               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26               	 *
  27               	 */
  28               	
  29               	;----------------------------------------------------------------------
  30               	;
  31               	; ok ( w -- w + 4 ) 
  32               	;
  33 ???? 0000 0134 	HEADER "4", "FOUR",
  34 ???? 0000 0400 	     .word LIT, 4, ENDS 
  34      0000 
  35               	 
  36               	;----------------------------------------------------------------------
  37               	;
  38               	; ok ( w -- w + 4 ) 
  39               	;
  40 ???? 0000 0234 	HEADER "4+", "FOURPLUS",
  40      2B20 
  41 ???? 0000 0400 	     .word LIT, 4, PLUS, ENDS 
  41      0000 0000 
  42               	 
  43               	;----------------------------------------------------------------------
  44               	;
  45               	; ok ( w -- w - 4 ) 
  46               	;
  47 ???? 0000 0234 	HEADER "4-", "FOURMINUS",
  47      2D20 
  48 ???? 0000 0400 	     .word LIT, 4, MINUS, ENDS 
  48      0000 0000 
  49               	 
  50               	
  51               	;---------------------------------------------------------------------- 
  52               	; 
  53               	; ok 2! ( a1 a2 -- w1 w2 ) 
  54               	; 
  55 ???? 0000 0232 	HEADER "2!", "TWOTO", 
  55      2120 
  56 ???? 0000 0000 	    .word SWAP, OVER, TO, CELLPLUS, TO, ENDS 
  56      0000 0000 
  56      0000 0000 
  57               	;---------------------------------------------------------------------- 
  58               	; 
  59               	; ok 2@ ( a1 a2 -- w1 w2 ) 
  60               	; 
  61 ???? 0000 0232 	HEADER "2@", "TWOAT", 
  61      4020 
  62 ???? 0000 0000 	    .word DUP, CELLPLUS, AT, SWAP, AT, ENDS 
  62      0000 0000 
  62      0000 0000 
  63               	 
  64               	;----------------------------------------------------------------------
  65               	;
  66               	; ok ( w1 w2 -- ) 
  67               	;
  68 ???? 0000 0332 	HEADER "2>R", "TWOTOR",
  68      3E52 
  69 ???? 0000 0000 	     .word SWAP, RTO, RTO, ENDS 
  69      0000 0000 
  70               	 
  71               	;----------------------------------------------------------------------
  72               	;
  73               	; ok ( w1 w2 -- ) 
  74               	;
  75 ???? 0000 0332 	HEADER "2R>", "TWORTO",
  75      523E 
  76 ???? 0000 0000 	     .word RTO, RTO, SWAP, ENDS 
  76      0000 0000 
  77               	 
  78               	;----------------------------------------------------------------------
  79               	;
  80               	; ok ( w1 w2 -- ) 
  81               	;
  82 ???? 0000 0332 	HEADER "2R@", "TWORAT",
  82      5240 
  83 ???? 0000 0000 	     .word RTO, RTO, OVER, OVER, TOR, TOR, SWAP, ENDS
  83      0000 0000 
  83      0000 0000 
  83      0000 0000 
  84               	 
  85               	;----------------------------------------------------------------------
  86               	;
  87               	; ok ( w1 w2 -- w1 w2 w1 w2 ) 
  88               	;
  89 ???? 0000 0532 	HEADER "2DROP", "TWODROP",
  89      4452 4F50 
  90 ???? 0000 0000 	     .word DROP, DROP, ENDS 
  90      0000 
  91               	 
  92               	;----------------------------------------------------------------------
  93               	;
  94               	; ok ( w1 w2 -- w1 w2 w1 w2 ) 
  95               	;
  96 ???? 0000 0432 	HEADER "2DUP", "TWODUP",
  96      4455 5020 
  97 ???? 0000 0000 	     .word OVER, OVER, ENDS 
  97      0000 
  98               	 
  99               	;----------------------------------------------------------------------
 100               	;
 101               	; ok ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) 
 102               	;
 103 ???? 0000 0532 	HEADER "2SWAP", "TWOSWAP",
 103      5357 4150 
 104 ???? 0000 0000 	     .word ROTU, TOR, ROTU, TOR, ENDS 
 104      0000 0000 
 104      0000 
 105               	     
 106               	;----------------------------------------------------------------------
 107               	;
 108               	; ok ( w1 w2 -- w1 w2 w1 w2 ) 
 109               	;
 110 ???? 0000 0532 	HEADER "2OVER", "TWOOVER",
 110      4F56 4552 
 111 ???? 0000 0000 	     .word TOR, TOR, TWODUP, RTO, RTO, TWOSWAP, ENDS 
 111      0000 0000 
 111      0000 0000 
 111      0000 
 112               	 
 113               	;----------------------------------------------------------------------
 114               	;
 115               	; ok ( w1 w2 w3 w4 -- w3 w4 w1 w2 ) 
 116               	;
 117 ???? 0000 0432 	HEADER "2ROT", "TWOUROT",
 117      524F 5420 
 118 ???? 0000 0000 	     .word TWOTOR, TWOSWAP, TWORTO, TWOSWAP, ENDS 
 118      0000 0000 
 118      0000 
 119               	     
 120               	;----------------------------------------------------------------------
 121               	;
 122               	; ok ( w1 w2 w3 w4 -- w3 w4 + w1 w2 ) 
 123               	;
 124 ???? 0000 0244 	HEADER "D+", "DPLUS",
 124      2B20 
 125 ???? 0000 0000 	     .word TOR, SWAP, TOR, UMPLUS, RTO, RTO, PLUS, PLUS, ENDS 
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 125      0000 
 126               	     
 127               	;----------------------------------------------------------------------
 128               	;
 129               	; ok ( w1 w2 w3 w4 -- w3 w4 - w1 w2 ) 
 130               	;
 131 ???? 0000 0244 	HEADER "D-", "DMINUS",
 131      2D20 
 132 ???? 0000 0000 	     .word TOR, SWAP, TOR, UMMINUS, RTO, RTO, MINUS, MINUS, ENDS 
 132      0000 0000 
 132      0000 0000 
 132      0000 0000 
 132      0000 
 133               	     
 134               	;----------------------------------------------------------------------
 135               	;
 136               	; ok ( w1 w2 w3 w4 -- w3 w4 - w1 w2 ) 
 137               	;
 138 ???? 0000 0744 	HEADER "DNEGATE", "DNEG",
 138      4E45 4741 
 138      5445 
 139 ???? 0000 0000 	     .word INVERT, TOR, INVERT, ONE, UMPLUS, RTO, PLUS, ENDS 
 139      0000 0000 
 139      0000 0000 
 139      0000 0000 
 140               	     
 141               	;----------------------------------------------------------------------
 142               	;
 143               	; ok ( w1 w2 w3 w4 -- w3 w4 - w1 w2 ) 
 144               	;
 145 ???? 0000 0444 	HEADER "DABS", "DABS",
 145      4142 5320 
 146 ???? 0000 0000 	     .word DUP, ZEROLT, ZBRANCH, 2f
 146      0000 0000 
 147 ???? 0000      	     .word DNEG
 148 ???? 0000      	2:   .word ENDS 
 149               	     
 150               	;----------------------------------------------------------------------
 151               	...
 151               	
 152               	;----------------------------------------------------------------------
 153               	.p2align 1, 0x00
 154               	#include "math.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	;----------------------------------------------------------------------
  29               	;
  30               	; great DJB hash, adapted for 16bits
  31               	;
  32               	; hash = (hash << 5) + str[i]
  33               	; for ascii chars in sram, in bytes not cells
  34               	; ( a u -- h ) djb hash
  35               	;
  36               	.equ djbHASH, 5381
  37 ???? 0000 0448 	HEADER "HASH", "HASH", F_LEAP
  37      4153 4820 
  38               	    NOOP
  39 ???? 6624      	    clr _zero_
  40 ???? 65E0      	    ldi nos_low, lo8(djbHASH)
  41 ???? 75E1      	    ldi nos_high, hi8(djbHASH)
  42 ???? F991 E991 	    pspull zpm_low, zpm_high
  43               	
  44               	    ; get a char
  45               	1:    
  46               	    
  47 ???? 9817      	    cp tos_high, tos_low
  48 ???? 01F0      	    brbs BIT_ZERO, 2f
  49               	
  50 ???? 7190      	    ld _work_, Z+
  51 ???? 670D      	    add nos_low, _work_
  52 ???? 761D      	    adc nos_high, _zero_
  53               	
  54 ???? 660F      	    lsl nos_low
  55 ???? 771F      	    rol nos_high
  56 ???? 660F      	    lsl nos_low
  57 ???? 771F      	    rol nos_high
  58 ???? 660F      	    lsl nos_low
  59 ???? 771F      	    rol nos_high
  60 ???? 660F      	    lsl nos_low
  61 ???? 771F      	    rol nos_high
  62 ???? 660F      	    lsl nos_low
  63 ???? 771F      	    rol nos_high
  64               	
  65 ???? 0197      	    sbiw tos_low, 1
  66 ???? 00C0      	    rjmp 1b
  67               	    
  68               	2:
  69 ???? CB01      	    movw tos_low, nos_low
  70 ???? 0C94 0000 	    POON
  71               	
  72               	;----------------------------------------------------------------------
  73               	;
  74               	;   ok  ( -- w)
  75               	;
  76               	;     ©2000-2021 by Gerhard Schmidt,
  77               	;      http://www.avr-asm-tutorial.net/avr_en/apps/random_tn13/random_calc_tn13.html
  78               	;
  79               	;    seed ~ 0x02A8
  80               	;
  81               	;     also good seeds
  82               	;
  83               	;    B167 4A3C 9879 B61E 7B26 
  84               	;    A858 1F88 50D5 419D 5537
  85               	;    0224 0527 5EB6 1E6D BCDC
  86               	;    92FF C206 0ECD 9361 2823
  87               	;    BE0B B303 6462 0E4C 3D24
  88               	;
  89 ???? 0000 0652 	HEADER "RANDOM", "RANDOM", F_LEAP
  89      414E 444F 
  89      4D20 
  90               	    NOOP
  91               	;    load seed
  92 ???? 4091 0000 	    lds wrk_low, SEED
  93 ???? 5091 0000 	    lds wrk_high, SEED
  94               	;    run magics
  95 ???? 4527      	    eor wrk_low, wrk_high
  96 ???? 4295      	    swap wrk_low
  97 ???? 540F      	    add wrk_high, wrk_low
  98 ???? CA01      	    movw tos_low, wrk_low
  99 ???? 00C0      	    rjmp _seed
 100               	
 101               	;----------------------------------------------------------------------
 102               	;
 103               	;   ok ( w -- ) 
 104               	;   sets seed for rand
 105               	;
 106 ???? 0000 0452 	HEADER "RAND", "RAND", F_LEAP
 106      414E 4420 
 107               	    NOOP
 108 ???? AC01      	    movw wrk_low, tos_low
 109 ???? 9991 8991 	    pspull tos_low, tos_high
 110               	_seed:
 111 ???? 4093 0000 	    sts SEED, wrk_low
 112 ???? 5093 0000 	    sts SEED + 1, wrk_high
 113 ???? 0C94 0000 	    POON
 114               	    
 115               	;----------------------------------------------------------------------
 116               	;
 117               	;   ok ( w -- u) 
 118               	;
 119 ???? 0000 0341 	HEADER "ABS", "ABS", F_LEAP 
 119      4253 
 120 ???? 0000 0000 	    .word DUP, ZEROLT, ZBRANCH, 2f
 120      0000 0000 
 121 ???? 0000      	    .word NEGATE
 122 ???? 0000      	2:  .word ENDS
 123               	
 124               	;----------------------------------------------------------------------
 125               	;
 126               	;   is ( w1 w2 -- w) 
 127               	;
 128 ???? 0000 034D 	HEADER "MAX", "MAX", F_LEAP
 128      4158 
 129 ???? 0000 0000 	    .word TWODUP, LTHAN, ZBRANCH, 2f
 129      0000 0000 
 130 ???? 0000      		.word SWAP 
 131 ???? 0000 0000 	2:	.word DROP, ENDS
 132               	
 133               	;----------------------------------------------------------------------
 134               	;
 135               	;   is ( w1 w2 -- w) 
 136               	;
 137 ???? 0000 034D 	HEADER "MIN", "MIN", F_LEAP
 137      494E 
 138 ???? 0000 0000 	    .word SWAP, MAX, ENDS
 138      0000 
 139               	
 140               	;----------------------------------------------------------------------
 141               	;
 142               	;   is ( w1 w2 w3 -- f ) 
 143               	;
 144 ???? 0000 0657 	HEADER "WITHIN", "WITHIN", F_LEAP
 144      4954 4849 
 144      4E20 
 145 ???? 0000 0000 	    .word OVER, MINUS, TOR, MINUS, RTO, UMLESS, ENDS
 145      0000 0000 
 145      0000 0000 
 145      0000 
 146               	
 147               	;----------------------------------------------------------------------
 148               	;
 149               	;	from Dr. Ting eForth
 150               	;
 151               	;----------------------------------------------------------------------
 152               	;
 153               	; ok ( commom pass for mul and div)
 154               	; 
 155 ???? 0000 0655 	HEADER "UMPASS", "UMPASS",
 155      4D50 4153 
 155      5320 
 156               	    NOOP
 157 ???? 0000 0000 	    .word DUP, UMPLUS, TOR, TOR, DUP, UMPLUS, RTO, PLUS, ENDS
 157      0000 0000 
 157      0000 0000 
 157      0000 0000 
 157      0000 
 158               	 
 159               	;----------------------------------------------------------------------
 160               	;	divides
 161               	;----------------------------------------------------------------------
 162               	;
 163               	; ok ( ud u -- ur uq)
 164               	; 
 165 ???? 0000 0655 	HEADER "UM/MOD", "UMDIVMOD", 
 165      4D2F 4D4F 
 165      4420 
 166               	    NOOP
 167 ???? 0000 0000 	    .word OVER, OVER, UMLESS, ZBRANCH, 8f 
 167      0000 0000 
 167      0000 
 168 ???? 0000      	 2: .word NEGATE
 169 ???? 0000 0F00 		.word LIT, 15, FOR
 169      0000 
 170 ???? 0000 0000 	    .word TOR, UMPASS, DUP
 170      0000 
 171 ???? 0000 0000 	    .word RTO, RAT, SWAP, TOR, UMPLUS, RTO, OR, ZBRANCH, 4f
 171      0000 0000 
 171      0000 0000 
 171      0000 0000 
 171      0000 
 172 ???? 0000 0000 	    .word TOR, DROP, ONEPLUS, RTO, BRANCH, 6f 
 172      0000 0000 
 172      0000 0000 
 173 ???? 0000      	4:  .word DROP
 174 ???? 0000      	6:  .word RTO 
 175 ???? 0000      	    .word NEXT
 176 ???? 0000 0000 	    .word DROP, SWAP, ENDS
 176      0000 
 177 ???? 0000 0000 	8:  .word DROP, DROP, DROP, FTRUE, DUP, ENDS
 177      0000 0000 
 177      0000 0000 
 178               	
 179               	;----------------------------------------------------------------------
 180               	;
 181               	; ok *
 182 ???? 0000 054D 	HEADER "M/MOD", "MDIVMOD", F_LEAP
 182      2F4D 4F44 
 183               	    NOOP
 184 ???? 0000 0000 	    .word DUP, ZEROLT, DUP, TOR, ZBRANCH, 2f 
 184      0000 0000 
 184      0000 0000 
 185 ???? 0000 0000 	    .word NEGATE, TOR, DNEG, RTO
 185      0000 0000 
 186 ???? 0000 0000 	2:  .word TOR, DUP, ZEROLT, ZBRANCH, 4f 
 186      0000 0000 
 186      0000 
 187 ???? 0000 0000 	    .word RAT, PLUS
 188 ???? 0000 0000 	4:  .word RTO, UMDIVMOD, RTO, ZBRANCH, 6f
 188      0000 0000 
 188      0000 
 189 ???? 0000 0000 	    .word SWAP, NEGATE, SWAP
 189      0000 
 190 ???? 0000      	6:  .word ENDS
 191               	
 192               	;----------------------------------------------------------------------
 193               	;
 194               	; ok *
 195 ???? 0000 042F 	HEADER "/MOD", "DIVMOD", F_LEAP
 195      4D4F 4420 
 196               	    NOOP
 197 ???? 0000 0000 	    .word OVER, ZEROLT, SWAP, MDIVMOD, ENDS
 197      0000 0000 
 197      0000 
 198               	
 199               	;----------------------------------------------------------------------
 200               	;
 201               	; ok *
 202 ???? 0000 034D 	HEADER "MOD", "MOD", F_LEAP
 202      4F44 
 203               	    NOOP
 204 ???? 0000 0000 	    .word DIVMOD, DROP, ENDS
 204      0000 
 205               	
 206               	;----------------------------------------------------------------------
 207               	;
 208               	; ok *
 209 ???? 0000 012F 	HEADER "/", "DIV", F_LEAP
 210               	    NOOP
 211 ???? 0000 0000 	    .word DIVMOD, SWAP, DROP, ENDS
 211      0000 0000 
 212               	
 213               	;----------------------------------------------------------------------
 214               	;	multiplies
 215               	;----------------------------------------------------------------------
 216               	;
 217               	; ok *
 218 ???? 0000 0355 	HEADER "UM*", "UMSTAR", F_LEAP
 218      4D2A 
 219               	    NOOP
 220 ???? 0000 0000 	    .word ZERO, SWAP
 221 ???? 0000 0F00 	    .word LIT, 15, FOR
 221      0000 
 222 ???? 0000 0000 	    .word UMPASS, RTO, ZBRANCH, 4f
 222      0000 0000 
 223 ???? 0000 0000 	    .word TOR, OVER, UMPLUS, RTO, PLUS
 223      0000 0000 
 223      0000 
 224 ???? 0000      	4:  .word NEXT
 225 ???? 0000 0000 	    .word ROTU, DROP, ENDS 
 225      0000 
 226               	
 227               	;----------------------------------------------------------------------
 228               	;
 229               	; ok *
 230 ???? 0000 012A 	HEADER "*", "STAR", F_LEAP
 231               	    NOOP
 232 ???? 0000 0000 	    .word UMSTAR, DROP, ENDS
 232      0000 
 233               	
 234               	;----------------------------------------------------------------------
 235               	;
 236               	; ok *
 237 ???? 0000 024D 	HEADER "M*", "MSTAR", F_LEAP
 237      2A20 
 238               	    NOOP
 239 ???? 0000 0000 	    .word OVER, OVER, XOR, ZEROLT, TOR, ABS, SWAP, ABS, UMSTAR
 239      0000 0000 
 239      0000 0000 
 239      0000 0000 
 239      0000 
 240 ???? 0000 0000 	    .word RTO, ZBRANCH, 2f
 240      0000 
 241 ???? 0000      	    .word DNEG
 242 ???? 0000      	2:  .word ENDS
 243               	
 244               	;----------------------------------------------------------------------
 245               	;
 246               	; ok *
 247 ???? 0000 052A 	HEADER "*/MOD", "STARDIVMOD", F_LEAP
 247      2F4D 4F44 
 248               	    NOOP
 249 ???? 0000 0000 	    .word TOR, MSTAR, TOR, MDIVMOD, ENDS
 249      0000 0000 
 249      0000 
 250               	
 251               	;----------------------------------------------------------------------
 252               	;
 253               	; ok *
 254 ???? 0000 022A 	HEADER "*/", "STARDIV", F_LEAP
 254      2F20 
 255               	    NOOP
 256 ???? 0000 0000 	    .word STARDIVMOD, SWAP, DROP, ENDS
 256      0000 0000 
 257               	
 258               	;----------------------------------------------------------------------
 259               	; a 64 bit half number, 7FFF FFFF FFFF FFFF is 9.223.372.036.854.775.807
 260               	;----------------------------------------------------------------------
 261               	...
 155               	
 156               	;----------------------------------------------------------------------
 157               	.p2align 1, 0x00
 158               	#include "flush.S"
   1               	
   2               	/*
   3               	 *  DISCLAIMER
   4               	 *
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos,
   6               	 *
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining
   8               	 *  a copy of this software and associated documentation files (the
   9               	 *  "Software"), to deal in the Software without restriction, including
  10               	 *  without limitation the rights to use, copy, modify, merge, publish,
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  12               	 *  permit persons to whom the Software is furnished to do so, subject to
  13               	 *  the following conditions:
  14               	 *
  15               	 *  The above copyright notice and this permission notice shall be
  16               	 *  included in all copies or substantial portions of the Software.
  17               	 *
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  24               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  25               	 *
  26               	 */
  27               	
  28               	/*
  29               	
  30               	routines for flush flash memory
  31               	
  32               	*/
  33               	
  34               	;---------------------------------------------------------------------
  35               	;
  36               	;    for easy using spm from optiboot 
  37               	;
  38               	;    spm instruction uses r31:r30 for address and r1:r0 for data
  39               	;
  40               	;    when erase or write, r0:r1 is ignored, 
  41               	;
  42               	;   ATmega8L datasheet, pg 209
  43               	;
  44               	;   command passed in r24
  45               	;
  46               	;   in optiboot.c version 8.3 :
  47               	;   
  48               	;	byte address !!!
  49               	; 
  50               	;    __boot_rww_enable_short();
  51               	;    7fd2:       87 bf           out     0x37, r24       ; 55
  52               	;    7fd4:       e8 95           spm
  53               	;    7fd6:       08 95           ret
  54               	;
  55               	;   do not expeculate, only one page to "flash flush"
  56               	;   minimal optiboot uses last 256 words at 7e00 ( 3F00 words) 
  57               	;   and the sequence: bf 87 95 e8 95 08
  58               	;
  59               	;   commands are: 
  60               	;    0x01 fill buffer, 
  61               	;    0x03 erase page, 
  62               	;    0x05 write page
  63               	;   set SPMCR and do a SPM whithin 4 cycles
  64               	;
  65               	;    about 3.5 to 4.5 ms to complete write !
  66               	;
  67               	;---------------------------------------------------------------------
  68               	
  69               	
  70               	; small trick, in macros.S
  71               	
  72               	; pagesize = (SPM_PAGE - 1)
  73               	
  74               	; pagemask = (~pagesize)
  75               	
  76               	;----------------------------------------------------------------------
  77               	;
  78               	;   load a flash memory page (fa sa -- )
  79               	;   copy one flash page from flash address fa to sram address sa
  80               	;
  81 ???? 0000 0C28 	HEADER "(load_flash)", "LDFLASH"
  81      6C6F 6164 
  81      5F66 6C61 
  81      7368 2920 
  82               	    NOOP
  83               	
  84               	    ; origin in ps
  85               	
  86 ???? F991 E991 	    pspull zpm_low, zpm_high
  87               	
  88               	    ; preserve parameter tack
  89               	
  90 ???? CE93 DE93 	    rspush psp_low, psp_high
  91               	
  92               	    ; move destin from tos
  93               	
  94 ???? EC01      	    movw psp_low, tos_low
  95               	
  96               	    ; adjust address for lpm
  97 ???? E695      	    lsr zpm_low
  98 ???? FF1F      	    rol zpm_high
  99               	
 100               	    ; how many bytes
 101 ???? 4091 8000 	    lds wrk_low, SPM_SIZE
 102               	
 103               	1:
 104 ???? 5591      	    lpm wrk_high, Z+
 105 ???? 5D93      	    st X+, wrk_high
 106 ???? 4A95      	    dec wrk_low
 107 ???? 01F4      	    brne 1b
 108               	
 109               	; clean house
 110               	
 111 ???? DD91 CD91 	    rspull psp_low, psp_high
 112               	
 113 ???? 9991 8991 	    pspull tos_low, tos_high
 114               	
 115 ???? 0C94 0000 	    POON
 116               	
 117               	;----------------------------------------------------------------------
 118               	;
 119               	;   save a flash memory page (sa fa -- )
 120               	;   copy one flash page from sram address sa to flash address fa
 121               	;   registers exposed are used for optiboot compiled with gcc
 122               	;
 123 ???? 0000 0C28 	HEADER "(save_flash)", "SVFLASH"
 123      7361 7665 
 123      5F66 6C61 
 123      7368 2920 
 124               	    NOOP
 125               	
 126               	    ; destin
 127               	
 128 ???? FC01      	    movw zpm_low, tos_low ; tos is HERE
 129               	
 130               	    ; origin
 131               	
 132 ???? 7991 6991 	    pspull nos_low, nos_high ; nos is FIB0
 133               	
 134               	    ; save psp 
 135               	
 136 ???? CE93 DE93 	    rspush psp_low, psp_high ; is X index
 137               	
 138               	    ; load for index
 139               	
 140 ???? EB01      	    movw psp_low, nos_low
 141               	
 142               	    ; save address 
 143 ???? EE93 FE93 	    rspush zpm_low, zpm_high
 144               	
 145               	;-----------------------------------------------------------------
 146               	
 147               	    ; erase page
 148               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 149 ???? 83E0      	    ldi r24, (1<<PGERS) | (1<<SPMEN)
 150 ???? 00D0      	    rcall _does_spm
 151               	
 152               	;-----------------------------------------------------------------
 153               	
 154               	    ; start buffer page address
 155               	    
 156 ???? EE27      	    clr zpm_low
 157 ???? FF27      	    clr zpm_high
 158               	
 159               	    ; how many bytes, less than 256!
 160 ???? 70E8      	    ldi r23, SPM_SIZE
 161               	
 162               	    ; copy page to buffer, word by word
 163               	2:
 164               	    ; fill page flash from sram
 165 ???? 0D90      	    ld r0, X+
 166 ???? 1D90      	    ld r1, X+
 167 ???? 81E0      	    ldi r24, (1<<SPMEN)
 168 ???? 00D0      	    rcall _does_spm
 169 ???? 3296      	    adiw zpm_low, 2
 170               	    ; count down
 171 ???? 7A95      	    dec r23
 172 ???? 7A95      	    dec r23
 173 ???? 01F4      	    brne 2b
 174               	
 175               	;-----------------------------------------------------------------
 176               	
 177               	    ; load flash page address
 178               	
 179 ???? FD91 ED91 	    rspull zpm_low, zpm_high
 180               	
 181               	    ; write page
 182               	    ; r0:r1 is ignored, ATmega8L datasheet, pg 209
 183 ???? 85E0      	    ldi r24, (1<<PGWRT) | (1<<SPMEN)
 184 ???? 00D0      	    rcall _does_spm
 185               	
 186               	;-----------------------------------------------------------------
 187               	   ; enable
 188 ???? 81E1      	    ldi r24, 0x11
 189 ???? 00D0      	    rcall _does_spm
 190               	;-----------------------------------------------------------------
 191               	
 192               	    ; clean house
 193 ???? DD91 CD91 	    rspull psp_low, psp_high
 194 ???? 9991 8991 	    pspull tos_low, tos_high
 195 ???? 0C94 0000 	    POON
 196               	
 197               	;----------------------------------------------------------------------
 198               	;
 199               	; wrapper around optiboot code
 200               	;
 201               	 
 202               	; call spm in NWWM
 203               	_does_spm:
 204 ???? F894      	    cli
 205 ???? 2FB6      	    in r2, __SREG__
 206               	
 207               	#ifdef atmega8
 208               	; for a atmega8 with optiboot 512b
 209               	#define OPTI_DO_SPM_SHORT 0x1fca    ; in bytes
 210               	    rcall OPTI_DO_SPM_SHORT
 211               	#endif
 212               	
 213               	#ifdef atmega328
 214               	; for a atmega328 with optiboot 512b
 215               	#define OPTI_DO_SPM_SHORT 0x7fd2    ; in bytes
 216               	;#define OPTI_DO_SPM_SHORT 0x3FE9    ; in words
 217 ???? 0E94 E93F 	    call OPTI_DO_SPM_SHORT
 218               	#endif
 219               	
 220 ???? 2FBE      	    out __SREG__, r2
 221 ???? 7894      	    sei
 222               	; wait for complete
 223 ???? 07B6      	1:  in      r0, 0x37        ; 55
 224 ???? 00FC      	    sbrc    r0, 0
 225 ???? 00C0      	    rjmp    1b
 226 ???? 0895      	    ret
 227               	 
 228               	;----------------------------------------------------------------------
 229               	/* from optiboot version 8.2 listing, extra comments added
 159               	
 160               	;----------------------------------------------------------------------
 161               	.p2align 1, 0x00
 162               	#include "pictures.S"
   1               	;**********************************************************************
   2               	;
   3               	;   picture number routines adapted
   4               	;   from eForth, 1003_InsideF83, Dr. Ting
   5               	;   
   6               	;----------------------------------------------------------------------
   7               	;
   8               	; those are intented to use together, with no word creation inside.
   9               	;
  10               	;   <# # #S DIGIT HOLD SIGN #>
  11               	;
  12               	;----------------------------------------------------------------------
  13               	;   is DIGIT ( c -- true | false )
  14               	;   eg. 0-9~A-F in base 16, true
  15               	;   ok for bases 2 to 36
  16               	;   no sign or period inside
  17               	;
  18 ???? 0000 0544 	HEADER "DIGIT", "DIGIT",
  18      4947 4954 
  19 ???? 0000 3000 	    .word LIT, '0', MINUS
  19      0000 
  20 ???? 0000 0000 	    .word DUP, ZERO, LTHAN, ZBRANCH, 5f
  20      0000 0000 
  20      0000 
  21 ???? 0000 0000 	    .word DUP, LIT, 9, LTHAN, ZBRANCH, 6f
  21      0900 0000 
  21      0000 0000 
  22 ???? 0000 0000 	    .word DUP, LIT, 17, LTHAN, ZBRANCH, 5f
  22      1100 0000 
  22      0000 0000 
  23 ???? 0000 0700 	    .word LIT, 7, MINUS
  23      0000 
  24 ???? 0000 0000 	    .word DUP, BASE, MINUS, LTHAN, ZBRANCH, 6f 
  24      0000 0000 
  24      0000 0000 
  25 ???? 0000 0000 	5:  .word DROP, FFALSE, ENDS
  25      0000 
  26 ???? 0000 0000 	6:  .word DROP, FTRUE, ENDS
  26      0000 
  27               	
  28               	;----------------------------------------------------------------------
  29               	;   is <#
  30               	;
  31 ???? 0000 023C 	HEADER "<#", "LTSNUM",
  31      2320 
  32 ???? 0000 0000 	    .word PAD, LIT, HLD, TO, ENDS
  32      0000 0000 
  32      0000 
  33               	
  34               	;----------------------------------------------------------------------
  35               	;   is HOLD
  36               	;   : HOLD HLD @ CHAR- DUP HLD ! C! ; 
  37               	;
  38 ???? 0000 0448 	HEADER "HOLD", "HOLD",
  38      4F4C 4420 
  39 ???? 0000 0000 	    .word HLD, AT, CHARMINUS, DUP, HLD, TO, CTO, ENDS
  39      0000 0000 
  39      0000 0000 
  39      0000 0000 
  40               	
  41               	;----------------------------------------------------------------------
  42               	;   is #
  43               	;   : # 0 BASE @ UM/MOD >R BASE @ UM/MOD SWAP DIGIT HOLD R> ; 
  44               	;
  45 ???? 0000 0123 	HEADER "#", "SNUM",
  46 ???? 0000 0000 	    .word ZERO, BASE, AT, UMDIVMOD, TOR, BASE, AT, UMDIVMOD
  46      0000 0000 
  46      0000 0000 
  46      0000 0000 
  47 ???? 0000 0000 	    .word SWAP, DIGIT, HOLD, RTO, ENDS
  47      0000 0000 
  47      0000 
  48               	
  49               	;----------------------------------------------------------------------
  50               	;   is #S
  51               	;   : #S BEGIN # 2DUP OR 0= UNTIL ; 
  52               	;   do { ... } while
  53               	;
  54 ???? 0000 0223 	HEADER "#S", "SNUMS",
  54      5320 
  55 ???? 0000 0000 	    .word SNUM, TWODUP, OR, ZEQU, ZBRANCH, SNUMS, ENDS
  55      0000 0000 
  55      0000 0000 
  55      0000 
  56               	
  57               	;----------------------------------------------------------------------
  58               	;   is SIGN
  59               	;   : SIGN 0< IF [CHAR] - HOLD THEN ; 
  60               	;
  61 ???? 0000 0453 	HEADER "SIGN", "SIGN",
  61      4947 4E20 
  62 ???? 0000 0000 	    .word ZEROLT, ZBRANCH, 2f
  62      0000 
  63 ???? 0000 0000 	    .word [CHAR], MINUS, HOLD
  63      0000 
  64 ???? 0000      	2:  .word ENDS
  65               	
  66               	;----------------------------------------------------------------------
  67               	;   is #>
  68               	;
  69 ???? 0000 0223 	HEADER "#>", "SNUMGT",
  69      3E20 
  70 ???? 0000 0000 	    .word TWODROP, HLD, AT, PAD, OVER, MINUS, ENDS
  70      0000 0000 
  70      0000 0000 
  70      0000 
  71               	
  72               	;----------------------------------------------------------------------
  73               	
  74               	
  75               	;----------------------------------------------------------------------
  76               	;
  77               	; is  ( u1 u2 -- u3 )
  78               	;
  79 ???? 0000 0428 	HEADER "(U.)", "UDOTP",
  79      552E 2920 
  80 ???? 0000 0000 	    .word ZERO, LTSNUM, SNUMS, SNUMGT, ENDS
  80      0000 0000 
  80      0000 
  81               	
  82               	;----------------------------------------------------------------------
  83               	;
  84               	; is  ( u1 u2 -- u3 )
  85               	;
  86 ???? 0000 0255 	HEADER "U.", "UDOT",
  86      2E20 
  87 ???? 0000 0000 	    .word UDOTP, TYPE, SPACE, ENDS
  87      0000 0000 
  88               	
  89               	;----------------------------------------------------------------------
  90               	;
  91               	; is  ( u1 u2 -- u3 )
  92               	;
  93 ???? 0000 0355 	HEADER "U.R", "UDOTR",
  93      2E52 
  94 ???? 0000 0000 	    .word TOR, UDOTP, RTO, OVER, MINUS, SPACES, ENDS
  94      0000 0000 
  94      0000 0000 
  94      0000 
  95               	
  96               	;----------------------------------------------------------------------
  97               	;
  98               	; is  ( u1 u2 -- u3 )
  99               	;
 100 ???? 0000 0328 	HEADER "(.)", "DOTP",
 100      2E29 
 101 ???? 0000 0000 	    .word DUP, ABS, 0, LTSNUM, SNUMS, ROTU, SIGN, SNUMGT, ENDS
 101      0000 0000 
 101      0000 0000 
 101      0000 0000 
 101      0000 
 102               	
 103               	;----------------------------------------------------------------------
 104               	;
 105               	; is  ( u1 u2 -- u3 )
 106               	;
 107 ???? 0000 012E 	HEADER ".", "DOT",
 108 ???? 0000 0000 	    .word DOTP, TYPE, SPACE, ENDS
 108      0000 0000 
 109               	
 110               	;----------------------------------------------------------------------
 111               	;
 112               	; is  ( u1 u2 -- u3 )
 113               	;
 114 ???? 0000 013F 	HEADER "?", "QUESTION",
 115 ???? 0000 0000 	    .word AT, DOT, ENDS
 115      0000 
 116               	
 117               	;----------------------------------------------------------------------
 118               	;
 119               	; is  ( u1 u2 -- u3 )
 120               	;
 121 ???? 0000 022E 	HEADER ".R", "DOTR",
 121      5220 
 122 ???? 0000 0000 	    .word TOR, DOTP, RTO, OVER, MINUS, SPACES, TYPE, ENDS
 122      0000 0000 
 122      0000 0000 
 122      0000 0000 
 123               	
 124               	;----------------------------------------------------------------------
 125               	;
 126               	; is  ( u1 u2 -- u3 )
 127               	;
 128 ???? 0000 0528 	HEADER "(UD.)", "UDDOTP",
 128      5544 2E29 
 129 ???? 0000 0000 	    .word LTSNUM, SNUMS, SNUMGT, ENDS
 129      0000 0000 
 130               	
 131               	;----------------------------------------------------------------------
 132               	;
 133               	; is  ( u1 u2 -- u3 )
 134               	;
 135 ???? 0000 0355 	HEADER "UD.", "UDDOT",
 135      442E 
 136 ???? 0000 0000 	    .word UDDOTP, TYPE, SPACE, ENDS
 136      0000 0000 
 137               	
 138               	;----------------------------------------------------------------------
 139               	;
 140               	; is  ( u1 u2 -- u3 )
 141               	;
 142 ???? 0000 0455 	HEADER "UD.R", "UDDOTR",
 142      442E 5220 
 143 ???? 0000 0000 	    .word TOR, UDDOTP, RTO, OVER, MINUS, SPACES, TYPE, ENDS
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 144               	
 145               	;----------------------------------------------------------------------
 146               	;
 147               	; is  ( u1 u2 -- u3 )
 148               	;
 149 ???? 0000 0428 	HEADER "(D.)", "DDOTP",
 149      442E 2920 
 150 ???? 0000 0000 	    .word TUCK, DABS, LTSNUM, SNUMS, ROTU, SIGN, SNUMGT, ENDS
 150      0000 0000 
 150      0000 0000 
 150      0000 0000 
 151               	
 152               	;----------------------------------------------------------------------
 153               	;
 154               	; is  ( u1 u2 -- u3 )
 155               	;
 156 ???? 0000 0244 	HEADER "D.", "DDOT",
 156      2E20 
 157 ???? 0000 0000 	    .word DDOTP, TYPE, SPACE, ENDS
 157      0000 0000 
 158               	
 159               	;----------------------------------------------------------------------
 160               	;
 161               	; is  ( u1 u2 -- u3 )
 162               	;
 163 ???? 0000 0344 	HEADER "D.R", "DDOTR",
 163      2E52 
 164 ???? 0000 0000 	    .word TOR, DDOTP, ROTU, OVER, SPACES, TYPE, ENDS
 164      0000 0000 
 164      0000 0000 
 164      0000 
 165               	
 166               	;**********************************************************************
 167               	
 163               	
 164               	;----------------------------------------------------------------------
 165               	.p2align 1, 0x00
 166               	#include "interpreter.S"
   1               	 
   2               	/* 
   3               	 *  DISCLAIMER" 
   4               	 * 
   5               	 *  Copyright © 2020, Alvaro Gomes Sobral Barcellos, 
   6               	 * 
   7               	 *  Permission is hereby granted, free of charge, to any person obtaining 
   8               	 *  a copy of this software and associated documentation files (the 
   9               	 *  "Software"), to deal in the Software without restriction, including 
  10               	 *  without limitation the rights to use, copy, modify, merge, publish, 
  11               	 *  distribute, sublicense, and/or sell copies of the Software, and to 
  12               	 *  permit persons to whom the Software is furnished to do so, subject to 
  13               	 *  the following conditions" 
  14               	 * 
  15               	 *  The above copyright notice and this permission notice shall be 
  16               	 *  included in all copies or substantial portions of the Software. 
  17               	 * 
  18               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
  19               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
  20               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
  21               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
  22               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
  23               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
  24               	 * 
  25               	 */ 
  26               	 
  27               	;---------------------------------------------------------------------- 
  28               	; 
  29               	; minimal interpreter, aka sector forth 
  30               	; inside routines, not for user 
  31               	; 
  32               	;---------------------------------------------------------------------- 
  33               	 
  34               	.section .text
  35               	
  36               	;---------------------------------------------------------------------- 
  37               	;
  38               	; these (words) only works in sram
  39               	;
  40               	;---------------------------------------------------------------------- 
  41               	; 
  42               	; ok ( a1 c --- a2 | 0 ) internal 
  43               	;   skips chars in address while not equal to c or 0x0 
  44               	;   not standart, 0x0 ends buffer, works only in sram 
  45               	; 
  46 ???? 0000 0628 	HEADER "(skip)", "skipf", F_LEAP 
  46      736B 6970 
  46      2920 
  47               	    NOOP 
  48 ???? 9927      	    clr tos_high 
  49 ???? F991 E991 	    pspull zpm_low, zpm_high 
  50               	1: 
  51 ???? 6081      	    ld nos_low, Z 
  52               	    ; if \0 
  53 ???? 9617      	    cp tos_high, nos_low 
  54 ???? 01F0      	    breq 2f 
  55               	    ; if c 
  56 ???? 8617      	    cp tos_low, nos_low 
  57 ???? 01F0      	    breq 3f 
  58 ???? 3196      	    adiw zpm_low, 1 
  59 ???? 00C0      	    rjmp 1b 
  60               	2: 
  61 ???? EE27      	    clr zpm_low 
  62 ???? FF27      	    clr zpm_high 
  63               	3: 
  64 ???? CF01      	    movw tos_low, zpm_low 
  65 ???? 0C94 0000 	    POON 
  66               	 
  67               	;---------------------------------------------------------------------- 
  68               	; 
  69               	; ok ( a1 c --- a2 | 0 ) internal 
  70               	;   scan chars in address while equal to c or 0x0 
  71               	;   not standart, 0x0 ends buffer 
  72               	; 
  73 ???? 0000 0628 	HEADER "(scan)", "scanf", F_LEAP
  73      7363 616E 
  73      2920 
  74               	    NOOP 
  75 ???? 9927      	    clr tos_high 
  76 ???? F991 E991 	    pspull zpm_low, zpm_high 
  77               	1: 
  78 ???? 6081      	    ld nos_low, Z 
  79               	    ; if \0 
  80 ???? 9617      	    cp tos_high, nos_low 
  81 ???? 01F0      	    breq 2f 
  82               	    ; if c 
  83 ???? 8617      	    cp tos_low, nos_low 
  84 ???? 01F4      	    brne 3f 
  85 ???? 3196      	    adiw zpm_low, 1 
  86 ???? 00C0      	    rjmp 1b 
  87               	2: 
  88 ???? EE27      	    clr zpm_low 
  89 ???? FF27      	    clr zpm_high 
  90               	3: 
  91 ???? CF01      	    movw tos_low, zpm_low 
  92 ???? 0C94 0000 	    POON 
  93               	 
  94               	;---------------------------------------------------------------------- 
  95               	; 
  96               	; ok ( a1 a2 u --- flag ) internal 
  97               	;   compare u chars from a1 to a2, 
  98               	;   not standart, max 255, no check for overlaps, works only in sram 
  99               	; 
 100 ???? 0000 0628 	HEADER "(same)", "samef", F_LEAP 
 100      7361 6D65 
 100      2920 
 101               	    NOOP 
 102 ???? 9927      	    clr tos_high 
 103 ???? 7991 6991 	    pspull nos_low, nos_high 
 104 ???? F991 E991 	    pspull zpm_low, zpm_high 
 105               	 
 106 ???? CE93 DE93 	    rspush psp_low, psp_high 
 107 ???? EB01      	    movw psp_low, nos_low 
 108               	10: 
 109 ???? 882B      	    or tos_low, tos_low 
 110 ???? 01F0      	    breq 20f 
 111 ???? 8A95      	    dec tos_low 
 112               	 
 113 ???? 4191      	    ld wrk_low, Z+ 
 114 ???? 5991      	    ld wrk_high, Y+ 
 115 ???? 4517      	    cp wrk_low, wrk_high 
 116 ???? 01F0      	    breq 10b 
 117               	 
 118 ???? 8827      	    clr tos_low 
 119 ???? 00C0      	    rjmp 30f 
 120               	20: 
 121 ???? 8FEF      	    ser tos_low 
 122 ???? 9FEF      	    ser tos_high 
 123               	30: 
 124 ???? 0C94 0000 	    POON 
 125               	 
 126               	;---------------------------------------------------------------------- 
 127               	; 
 128               	; ok ( a1 a2 u --- a3 ) internal 
 129               	;   copy u chars from a1 into a2, forward copy, a3 = a1+u+1 
 130               	;   not standart, max 255, no check for overlaps, works only in sram 
 131               	; 
 132 ???? 0000 0628 	HEADER "(copy)", "copyf", F_LEAP 
 132      636F 7079 
 132      2920 
 133               	    NOOP 
 134 ???? 9927      	    clr tos_high 
 135 ???? 7991 6991 	    pspull nos_low, nos_high 
 136 ???? F991 E991 	    pspull zpm_low, zpm_high 
 137               	 
 138 ???? CE93 DE93 	    rspush psp_low, psp_high 
 139 ???? EB01      	    movw psp_low, nos_low 
 140               	10: 
 141 ???? 8817      	    cp tos_low, tos_low 
 142 ???? 01F0      	    brbs BIT_ZERO, 20f 
 143               	 
 144 ???? 6191      	    ld nos_low, Z+ 
 145 ???? 6993      	    st Y+, nos_low 
 146 ???? 8A95      	    dec tos_low 
 147 ???? 00C0      	    rjmp 10b 
 148               	20: 
 149 ???? DD91 CD91 	    rspull psp_low, psp_high 
 150 ???? CF01      	    movw tos_low, zpm_low 
 151 ???? 0C94 0000 	    POON 
 152               	 
 153               	;---------------------------------------------------------------------- 
 154               	; 
 155               	; ok ( a u --- u ) 
 156               	; 
 157               	;   refills address till u chars read, u < 256 
 158               	;   not standart: 
 159               	;   always read from USART 
 160               	;   only \n \r \b, all other control turns into space 
 161               	;   appends a bl at init and a bl at end 
 162               	; 
 163 ???? 0000 0828 	HEADER "(refill)", "refillf", F_LEAP 
 163      7265 6669 
 163      6C6C 2920 
 164               	    NOOP 
 165               	10: 
 166               	    ; get buffer pointer 
 167 ???? F991 E991 	    pspull zpm_low, zpm_high 
 168               	 
 169               	    ; keep a spc at start, so every word starts with spc, 
 170               	    ; used later to make a counted string 
 171               	 
 172               	    ; save for BL at end 
 173 ???? 8A95      	    dec tos_low 
 174               	 
 175               	    ; save for BL at init 
 176 ???? 8A95      	    dec tos_low 
 177               	 
 178               	    ; place a BL at init 
 179 ???? 40E2      	    ldi wrk_low, 32 
 180 ???? 4193      	    srsave wrk_low 
 181               	 
 182               	    ; clear count 
 183 ???? 9927      	    clr tos_high 
 184               	 
 185               	    ; clear last char 
 186 ???? 5527      	    clr wrk_high 
 187               	 
 188               	;   loop counts from 0 to u 
 189               	20: 
 190               	    ; end of buffer ? 
 191 ???? 8917      	    cp tos_low, tos_high 
 192 ???? 01F0      	    brbs BIT_ZERO, 70f 
 193               	 
 194               	;   getch 
 195               	30: 
 196               	1: 
 197               	    ; waits to receive 
 198 ???? 5F9B      	    sbis 0xb, 7 
 199 ???? 00C0      	    rjmp 1b 
 200               	 
 201               	    ; receive a char 
 202 ???? 4CB1      	    in wrk_low, 0xc 
 203               	 
 204               	    ; no 8bits 
 205 ???? 4038      	    cpi wrk_low, 128 
 206 ???? 04F4      	    brge 1b 
 207               	 
 208               	    ; need echo ? 
 209               	2: 
 210               	    ; wait to send 
 211 ???? 5D9B      	    sbis 0x0b, 5 
 212 ???? 00C0      	    rjmp 2b 
 213               	 
 214               	    ; send a char 
 215 ???? 4CB9      	    out 0x0c, wrk_low 
 216               	 
 217               	; process allowed control 
 218               	 
 219               	    ; not a control 
 220 ???? 4E31      	    cpi wrk_low, 30 
 221 ???? 04F4      	    brge 60f 
 222               	 
 223               	40: 
 224               	    ; verify CR \r 
 225 ???? 4D30      	    cpi wrk_low, 13 ; CR 
 226 ???? 01F0      	    breq 70f 
 227               	 
 228               	    ; verify LF \r 
 229 ???? 4A30      	    cpi wrk_low, 10 ; LF 
 230 ???? 01F0      	    breq 70f 
 231               	 
 232               	    ; verify VT \v 
 233 ???? 4B30      	    cpi wrk_low, 11 ; VT 
 234 ???? 01F0      	    breq 70f 
 235               	 
 236               	44: 
 237               	    ; verify BS \b 
 238 ???? 4830      	    cpi wrk_low, 8 ; BS 
 239 ???? 01F4      	    brne 50f 
 240               	 
 241               	    ; process BS 
 242               	    ; no char ? 
 243 ???? 9917      	    cp tos_high, tos_high 
 244 ???? 01F0      	    brbs BIT_ZERO, 30b 
 245               	 
 246               	    ; back one 
 247 ???? 9A95      	    dec tos_high 
 248 ???? 3197      	    sbiw zpm_low, 1 
 249 ???? 00C0      	    rjmp 30b 
 250               	 
 251               	50: 
 252               	    ; not allow more controls 
 253               	    ; magic to 32 
 254 ???? 40E2      	    ldi wrk_low, 32 
 255               	 
 256               	; process ASCII chars 
 257               	60: 
 258               	    ; is a spc ? 
 259 ???? 4032      	    cpi wrk_low, 32 
 260 ???? 01F4      	    brne 62f 
 261               	 
 262               	    ; highlander it ! 
 263               	    ; ( collapse spaces ) 
 264 ???? 4517      	    cp wrk_low, wrk_high 
 265 ???? 01F0      	    breq 30b 
 266               	 
 267               	62: 
 268               	.ifdef UPPERCASE 
 269               	    ; to uppercase 
 270               	    cpi wrk_low, 61 
 271               	    brge 64f 
 272               	    cpi wrk_low, 123 
 273               	    brge 64f 
 274               	    subi wrk_low, 32 
 275               	.endif 
 276               	 
 277               	64: 
 278               	    ; save char to buffer 
 279 ???? 9395      	    inc tos_high 
 280 ???? 4193      	    srsave wrk_low 
 281 ???? 542F      	    mov wrk_high, wrk_low 
 282 ???? 00C0      	    rjmp 20b 
 283               	 
 284               	70: 
 285               	    ; push counter 
 286               	    ; place a BL at end 
 287 ???? 40E2      	    ldi wrk_low, 32 
 288 ???? 4193      	    srsave wrk_low 
 289               	 
 290               	    ; save counter 
 291 ???? 892F      	    mov tos_low, tos_high 
 292 ???? 9927      	    clr tos_high 
 293 ???? 0C94 0000 	    POON 
 294               	 
 295               	 
 296               	;---------------------------------------------------------------------- 
 297               	; 
 298               	; ok ( a c --- a u | 0 ) 
 299               	;    find a word delimited by c 
 300               	;    returns address and u lenght or zero if no c or \0 
 301               	;    max lenght is 255 bytes 
 302               	; 
 303 ???? 0000 0628 	HEADER "(word)", "wordf", F_LEAP
 303      776F 7264 
 303      2920 
 304               	    NOOP 
 305               	    ; start at 
 306 ???? F991 E991 	    pspull zpm_low, zpm_high 
 307               	    ; for \0 check 
 308 ???? 9927      	    clr tos_high 
 309 ???? 00C0      	    rjmp _wsto 
 310               	 
 311               	;---------------------------------------------------------------------- 
 312               	; 
 313               	; ok ( a c --- a u | 0 ) 
 314               	;    find a for c 
 315               	;    returns address and u lenght or zero if no c or \0 
 316               	;    max lenght is 255 bytes 
 317               	; 
 318 ???? 0000 0728 	HEADER "(parse)", "parsef", F_LEAP
 318      7061 7273 
 318      6529 
 319               	    NOOP 
 320               	    ; start at 
 321 ???? F991 E991 	    pspull zpm_low, zpm_high 
 322               	    ; for \0 check 
 323 ???? 9927      	    clr tos_high 
 324 ???? 00C0      	    rjmp _tows; 
 325               	
 326               	;---------------------------------------------------------------------- 
 327               	; 
 328               	;   pass trhu 
 329               	; 
 330               	_wsto: 
 331               	1: 
 332               	    ; skips while equal delimiter 
 333 ???? 6081      	    ld nos_low, Z 
 334               	    ; if \0 
 335 ???? 9617      	    cp tos_high, nos_low 
 336 ???? 01F0      	    breq 10f 
 337 ???? 8617      	    cp tos_low, nos_low 
 338 ???? 01F4      	    brne 2f 
 339 ???? 3196      	    adiw zpm_low, 1 
 340 ???? 00C0      	    rjmp 1b 
 341               	 
 342               	_tows: 
 343               	2: 
 344               	    ; keep address 
 345 ???? AF01      	    movw wrk_low, zpm_low 
 346               	 
 347               	3: 
 348               	    ; scans while not equal delimiter 
 349 ???? 6081      	    ld nos_low, Z 
 350               	    ; if \0 
 351 ???? 9617      	    cp tos_high, nos_low 
 352 ???? 01F0      	    breq 10f 
 353 ???? 8617      	    cp tos_low, nos_low 
 354 ???? 01F0      	    breq 4f 
 355 ???? 3196      	    adiw zpm_low, 1 
 356 ???? 00C0      	    rjmp 3b 
 357               	 
 358               	_wsat: 
 359               	4: 
 360               	    ; found 
 361 ???? E41B      	    sub zpm_low, wrk_low 
 362 ???? F50B      	    sbc zpm_high, wrk_high 
 363 ???? 4A93 5A93 	    pspush wrk_low, wrk_high 
 364 ???? CF01      	    movw tos_low, zpm_low 
 365 ???? 00C0      	    rjmp 20f 
 366               	15: 
 367               	    ; end of buffer 
 368 ???? 8827      	    clr tos_low 
 369 ???? 9927      	    clr tos_high 
 370               	20: 
 371 ???? 0C94 0000 	    POON 
 372               	 
 373               	;---------------------------------------------------------------------- 
 374               	;   
 375               	;   verify if a value is a valid char in actual BASE
 376               	;   return FALSE or TRUE
 377               	;   eg. base 16, 0-9~A-F
 378               	;
 379 ???? 0000 0728 	HEADER "(digit)", "digitf", F_LEAP
 379      6469 6769 
 379      7429 
 380               	    NOOP 
 381               	    ; convert from ASCII
 382 ???? 8053      	    subi tos_low, '0'
 383               	    ; check for < 0
 384 ???? 8030      	    cpi tos_low, 0
 385 ???? 04F0      	    brlt 2f
 386               	    ; check for < 9
 387 ???? 8930      	    cpi tos_low, 9
 388 ???? 04F0      	    brlt 1f
 389               	    ; check for < A
 390 ???? 8131      	    cpi tos_low, 17
 391 ???? 04F0      	    brlt 2f
 392               	    ; convert 'A'
 393 ???? 8750      	    subi tos_low, 7
 394               	    ; get actual base 
 395 ???? 9091 0000 	    lds tos_high, BASE+0 
 396               	    ; check for < BASE
 397 ???? 9817      	    cp tos_high, tos_low
 398 ???? 04F4      	    brge 2f
 399               	    ; return true
 400 ???? 9FEF      	1:  ser tos_high
 401 ???? 8FEF      	    ser tos_low
 402               	    ; return false
 403 ???? 00C0      	    rjmp 3f
 404 ???? 9927      	2:  clr tos_high
 405 ???? 8827      	    clr tos_low
 406 ???? 0C94 0000 	3:  POON
 407               	
 408               	; too far for rjmp
 409               	;1:  rjmp _iftrue
 410               	;2:  rjmp _iffalse
 411               	
 412               	;---------------------------------------------------------------------- 
 413               	; 
 414               	;   not official ! (ud1 c-addr1 u1 -- ud2 c-addr2 u2) 
 415               	; 
 416               	;    ok ( a n -- u2 true | false ) 
 417               	;    assumes address n chars 
 418               	;    f flag is (Out-of-Range, Not-a-Number, Invalid-Number,) FALSE or TRUE 
 419               	;    uses all but X, Y 
 420               	;    tos, nos, wrk, Z, _zero_, _work_, r0, r1 
 421               	; 
 422 ???? 0000 0828 	HEADER "(number)", "numberf", F_LEAP
 422      6E75 6D62 
 422      6572 2920 
 423               	    NOOP 
 424               	 
 425               	    ; tst for c < 1 
 426               	 
 427 ???? 9927      	    clr tos_high 
 428 ???? 9817      	    cp tos_high, tos_low 
 429 ???? 04F0      	    brlt 10f 
 430               	 
 431               	    ; not valid size c < 1 
 432 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 433 ???? 00C0      	    rjmp 70f 
 434               	 
 435               	10: 
 436               	    ; pull address from 
 437 ???? F991 E991 	    pspull zpm_low, zpm_high 
 438               	 
 439               	    ; keep counter 
 440 ???? BC01      	    movw nos_low, tos_low 
 441               	 
 442               	    ; clear result 
 443 ???? 8827      	    clr tos_low 
 444 ???? 9927      	    clr tos_high 
 445               	 
 446               	    ; get actual base 
 447 ???? 7090 0000 	    lds _work_, BASE+0 
 448               	 
 449               	20: 
 450               	    ; test end of loop 
 451 ???? 6717      	    cp nos_low, nos_high 
 452 ???? 01F4      	    brne 30f 
 453 ???? 00C0      	    rjmp 80f 
 454               	 
 455               	30: 
 456               	    ; load a char 
 457 ???? 4191      	    srload wrk_low 
 458               	 
 459               	    ; allow first char change base 
 460 ???? 7723      	    tst nos_high 
 461 ???? 01F4      	    brne 40f 
 462               	 
 463               	    ; goes hexadecimal 
 464 ???? 4432      	    cpi wrk_low, '$' 
 465 ???? 01F4      	    brne 32f 
 466 ???? 40E1      	    ldi wrk_low, 16 
 467 ???? 742E      	    mov _work_, wrk_low 
 468 ???? 00C0      	    rjmp 20b 
 469               	 
 470               	32: 
 471               	    ; goes decimal 
 472 ???? 4332      	    cpi wrk_low, '#' 
 473 ???? 01F4      	    brne 34f 
 474 ???? 4AE0      	    ldi wrk_low, 10 
 475 ???? 742E      	    mov _work_, wrk_low 
 476 ???? 00C0      	    rjmp 20b 
 477               	 
 478               	34: 
 479               	    ; goes binary 
 480 ???? 4532      	    cpi wrk_low, '%' 
 481 ???? 01F4      	    brne 36f 
 482 ???? 42E0      	    ldi wrk_low, 2 
 483 ???? 742E      	    mov _work_, wrk_low 
 484 ???? 00C0      	    rjmp 20b 
 485               	 
 486               	36: 
 487               	    ; how do negative ? just two-complement at end 
 488 ???? 4D32      	    cpi wrk_low, '-' 
 489 ???? 01F4      	    brne 38f 
 490 ???? 51E0      	    ldi wrk_high, 1 
 491 ???? 7A95      	    dec nos_high 
 492 ???? 00C0      	    rjmp 20b 
 493               	 
 494               	38: 
 495               	    ; how do positive ? just no two-complement at end 
 496 ???? 4B32      	    cpi wrk_low, '+' 
 497 ???? 01F4      	    brne 40f 
 498 ???? 50E0      	    ldi wrk_high, 0 
 499 ???? 7A95      	    dec nos_high 
 500 ???? 00C0      	    rjmp 20b 
 501               	 
 502               	38: 
 503               	    ; no more bases, no octal, no duodecimal, no hexagesimal 
 504               	 
 505               	40: 
 506               	    ; paranoic test end 
 507               	 
 508 ???? 4030      	    cpi wrk_low, 0 
 509 ???? 01F0      	    breq 80f 
 510               	 
 511 ???? 4032      	    cpi wrk_low, 32 
 512 ???? 01F0      	    breq 80f 
 513               	 
 514               	    ; mask lowercases 
 515 ???? 4136      	    cpi wrk_low, 'a' 
 516 ???? 04F0      	    brlt 45f 
 517 ???? 4052      	    subi wrk_low, 32 
 518               	 
 519               	45: 
 520               	    ; reduce 
 521 ???? 4053      	    subi wrk_low, '0' 
 522               	 
 523               	    ; less than 0 ? 
 524 ???? 4030      	    cpi wrk_low, 0 
 525 ???? 04F0      	    brlt 70f 
 526               	 
 527               	    ; less than 9 ? 
 528 ???? 4A30      	    cpi wrk_low, 10 
 529 ???? 04F0      	    brlt 50f 
 530               	 
 531               	    ; mind the gap 0-9 ~ A-F 
 532 ???? 4750      	    subi wrk_low, 7 
 533               	 
 534               	50: 
 535               	    ; over base ? 
 536 ???? 4715      	    cp wrk_low, _work_ 
 537 ???? 04F4      	    brge 70f 
 538               	 
 539               	; easy way 
 540               	; bases 2, 8, 10, 16 
 541               	 
 542 ???? 840F      	    add tos_low, wrk_low 
 543 ???? 961D      	    adc tos_high, _zero_ 
 544               	 
 545               	    ; set value 
 546 ???? 0C01      	    movw R0, tos_low 
 547               	 
 548               	    ; set base 
 549 ???? 4715      	    cp wrk_low, _work_ 
 550               	 
 551               	; 2 
 552               	_bin_base: 
 553 ???? 000C      	    lsl R0 
 554 ???? 111C      	    rol R1 
 555 ???? 4230      	    cpi wrk_low, 2 
 556 ???? 01F0      	    breq _next_digit 
 557               	 
 558               	    ; keep for decimal or odds 
 559 ???? C001      	    movw tos_low, R0 
 560               	 
 561               	; 4 
 562               	_nib_base: 
 563 ???? 000C      	    lsl R0 
 564 ???? 111C      	    rol R1 
 565               	    ; cpi wrk_low, 4 
 566               	    ; breq _next_digit 
 567               	 
 568               	; 8 
 569               	_oct_base: 
 570 ???? 000C      	    lsl R0 
 571 ???? 111C      	    rol R1 
 572               	    ; cpi wrk_low, 8 
 573               	    ; breq _next_digit 
 574               	 
 575               	;10 
 576               	_dec_base: 
 577 ???? 4A30      	    cpi wrk_low, 10 
 578 ???? 01F4      	    brne _hex_base 
 579               	 
 580 ???? 080E      	    add R0, tos_low 
 581 ???? 191E      	    adc R1, tos_high 
 582 ???? 00C0      	    rjmp _next_digit 
 583               	 
 584               	; 16 
 585               	_hex_base: 
 586 ???? 000C      	    lsl R0 
 587 ???? 111C      	    rol R1 
 588 ???? 4031      	    cpi wrk_low, 16 
 589 ???? 01F0      	    breq _next_digit 
 590               	 
 591               	; overflow ? 
 592 ???? 00F4      	    brcc _next_digit 
 593 ???? 00C0      	    rjmp 70f 
 594               	 
 595               	; next digit 
 596               	_next_digit: 
 597 ???? C001      	    movw tos_low, R0 
 598               	 
 599               	60: 
 600               	    ; count digits 
 601 ???? 7395      	    inc nos_high 
 602               	 
 603               	    ; next digit 
 604 ???? 00C0      	    rjmp 10b 
 605               	 
 606               	70: 
 607               	    ; (Underflow, Overflow, Not_a_Number, Out_of_Range, Invalid_numeric_Argument) 
 608 ???? 4427      	    clr wrk_low 
 609 ???? 5527      	    clr wrk_high 
 610 ???? 00C0      	    rjmp 100f 
 611               	 
 612               	80: 
 613               	    ; if positive 
 614 ???? 5030      	    cpi wrk_high, 0 
 615 ???? 01F0      	    breq 90f 
 616               	 
 617               	    ; 2's complement 
 618 ???? 8095      	    com tos_low 
 619 ???? 9095      	    com tos_high 
 620 ???? 0196      	    adiw tos_low, 1 
 621               	 
 622               	    ; underflow 
 623 ???? 00F0      	    brcs 70b 
 624               	 
 625               	90: 
 626               	    ; push result 
 627 ???? 8A93 9A93 	    pspush tos_low, tos_high 
 628               	 
 629               	    ; made true 
 630 ???? 4FEF      	    ser wrk_low 
 631 ???? 5FEF      	    ser wrk_high 
 632               	 
 633               	100: 
 634               	    ; push digits 
 635 ???? CA01      	    movw tos_low, wrk_low 
 636 ???? 0C94 0000 	    POON 
 637               	 
 638               	;---------------------------------------------------------------------- 
 639               	; 
 640               	; ok find a word in a vocabulary 
 641               	;   ( aw u ad -- xt f | a 0 ) 
 642               	;    ad link to dictionary 
 643               	;    aw address to word 
 644               	;    u  length 
 645               	;   f is  1 if word is immediate 
 646               	;   f is -1 if word is normal 
 647               	;   f is  0 if word not found 
 648               	;   names are 15 maximum 
 649               	; 
 650               	;   dictionary is in flash and word is in sram 
 651               	; 
 652 ???? 0000 0628 	HEADER "(find)", "findf", F_LEAP
 652      6669 6E64 
 652      2920 
 653               	    NOOP 
 654               	 
 655               	    ; load address dictionary 
 656 ???? FC01      	    movw zpm_low, tos_low 
 657               	 
 658               	    ; load counter 
 659 ???? 9991 8991 	    pspull tos_low, tos_high 
 660               	 
 661               	    ; load address word 
 662 ???? 7991 6991 	    pspull nos_low, nos_high 
 663               	 
 664               	    ; save stack 
 665 ???? CE93 DE93 	    rspush psp_low, psp_high 
 666               	 
 667               	    ; save address word 
 668 ???? 6E93 7E93 	    rspush nos_low, nos_high 
 669               	 
 670               	    ; move address to Y ! always check in macros.S 
 671 ???? EB01      	    movw psp_low, nos_low 
 672               	 
 673               	    ; prepare loop 
 674               	 
 675               	    ; save word count 
 676 ???? 982F      	    mov tos_high, tos_low 
 677               	 
 678               	    ; push aword for first loop 
 679 ???? CE93 DE93 	    rspush psp_low, psp_high 
 680               	 
 681               	    ; push alist for first loop 
 682 ???? EE93 FE93 	    rspush zpm_low, zpm_high 
 683               	 
 684               	10: 
 685               	    ; load link 
 686 ???? FD91 ED91 	    rspull zpm_low, zpm_high 
 687               	 
 688               	    ; load address 
 689 ???? EE0F FF1F 	    pmload wrk_low, wrk_high 
 689      4591 5591 
 689      F795 E795 
 690               	 
 691               	    ; if null, list ends 
 692 ???? 4517      	    cp wrk_low, wrk_high 
 693 ???? 01F0      	    brbs BIT_ZERO, 26f 
 694               	 
 695               	    ; save next link 
 696 ???? 4E93 5E93 	    rspush wrk_low, wrk_high 
 697               	 
 698               	    ; load size and first char 
 699 ???? EE0F FF1F 	    pmload nos_low, nos_high 
 699      6591 7591 
 699      F795 E795 
 700               	 
 701               	    ; save for flags 
 702 ???? 562F      	    mov wrk_high, nos_low 
 703               	 
 704               	    ; must ummask 
 705 ???? 6F70      	    andi nos_low, F_UNMASK 
 706               	 
 707               	    ; ping-pong 
 708               	    ; verify sizes 
 709 ???? 6817      	    cp nos_low, tos_low 
 710 ???? 01F4      	    brne 10b 
 711               	 
 712               	    ; points to a1 
 713 ???? 4991      	    ld wrk_low, Y+ 
 714               	 
 715               	    ; verify first char 
 716 ???? 4717      	    cp wrk_low, nos_high 
 717 ???? 01F4      	    brne 10b 
 718               	 
 719               	    ; prepare count down 
 720 ???? 892F      	    mov tos_low, tos_high 
 721               	 
 722               	14: 
 723               	    ; verify next chars 
 724 ???? 8A95      	    dec tos_low 
 725 ???? 01F0      	    brbs BIT_ZERO, 20f 
 726               	 
 727 ???? EE0F FF1F 	    pmload nos_low, nos_high 
 727      6591 7591 
 727      F795 E795 
 728               	 
 729 ???? 4991      	    ld wrk_low, Y+ 
 730 ???? 4617      	    cp wrk_low, nos_low 
 731 ???? 01F4      	    brne 10b 
 732               	 
 733 ???? 8A95      	    dec tos_low 
 734 ???? 01F0      	    brbs BIT_ZERO, 20f 
 735               	 
 736 ???? 4991      	    ld wrk_low, Y+ 
 737 ???? 4717      	    cp wrk_low, nos_high 
 738 ???? 01F4      	    brne 10b 
 739               	 
 740               	    ; next chars 
 741 ???? 00C0      	    rjmp 14b 
 742               	 
 743               	20: 
 744               	    ; found 
 745               	    ; anyway zpm is ever even 
 746               	 
 747               	    ; return flags 
 748 ???? 5074      	    andi wrk_high, F_IMMEDIATE 
 749 ???? 01F4      	    brne 24f 
 750               	 
 751               	22: 
 752               	    ; immediate (1) 
 753 ???? 8827      	    clr tos_low 
 754 ???? 9927      	    clr tos_high 
 755 ???? 8395      	    inc tos_low 
 756 ???? 00C0      	    rjmp 30f 
 757               	24: 
 758               	    ; common (-1) 
 759 ???? 8FEF      	    ser tos_low 
 760 ???? 9FEF      	    ser tos_high 
 761 ???? 00C0      	    rjmp 30f 
 762               	26: 
 763               	    ; not found (0) 
 764 ???? 8827      	    clr tos_low 
 765 ???? 8827      	    clr tos_low 
 766               	30: 
 767               	    ; drops references 
 768 ???? 5D91 4D91 	    rspull wrk_low, wrk_high 
 769 ???? 5D91 4D91 	    rspull wrk_low, wrk_high 
 770               	 
 771               	    ; copy wt 
 772 ???? 5D91 4D91 	    rspull wrk_low, wrk_high 
 773               	 
 774 ???? 8030      	    cpi tos_low, 0 
 775 ???? 01F0      	    brbs BIT_ZERO, 40f 
 776               	 
 777               	    ; copy (xt) 
 778 ???? AF01      	    movw wrk_low, zpm_low 
 779               	 
 780               	40: 
 781               	    ; restore psp 
 782 ???? DD91 CD91 	    rspull psp_low, psp_high 
 783               	 
 784               	    ; push result address 
 785 ???? 4A93 5A93 	    pspush wrk_low, wrk_high 
 786               	 
 787               	    ; save results 
 788 ???? 0C94 0000 	    POON 
 789               	 
 790               	;---------------------------------------------------------------------- 
 791               	; 
 792               	; is NULLS 
 793               	; Dr Ting 'coyote'
 794               	;
 795 ???? 0000 044E 	HEADER "NULL", "NULL", 
 795      554C 4C20 
 796 ???? 0000      	    .word 0x0
 797 ???? 636F 796F 	    .asciz "coyote"
 797      7465 00
 798 ???? 0000      	    .word ENDS 
 799               	 
 800               	;********************************************************************** 
 801               	; 
 802               	; almost figforth, http://forthfiles.net/ting/sysguidefig.pdf, pg 84 
 803               	; 
 804               	;---------------------------------------------------------------------- 
 805               	 
 806               	;----------------------------------------------------------------------
 807               	;
 808               	; ok error scopes
 809               	;
 810               	;----------------------------------------------------------------------
 811               	;
 812               	;   ok ( f n -- )
 813               	;   FALSE is 0
 814               	;   
 815 ???? 0000 0006 	HEADER "?ERROR", "QERROR", 
 815      3F45 5252 
 815      4F52 20
 816 ???? 0000 0000 	    .word SWAP, ZBRANCH, 2f
 816      0000 
 817 ???? 0000 0000 	    .word DROP, BRANCH, 4f
 817      0000 
 818 ???? 0000 0000 	2:  .word NONEN, DOT, CR, QUIT
 818      0000 0000 
 819 ???? 0000      	4:  .word ENDS
 820               	
 821               	;----------------------------------------------------------------------
 822               	; not compiling
 823 ???? 0000 053F 	HEADER "?COMP", "QCOMP", 
 823      434F 4D50 
 824 ???? 0000 0000 	    .word STATE, AT, ZEQU, LIT, 11, QERROR, ENDS
 824      0000 0000 
 824      0B00 0000 
 824      0000 
 825               	
 826               	; not executing
 827 ???? 0000 053F 	HEADER "?EXEC", "QEXEC", 
 827      4558 4543 
 828 ???? 0000 0000 	    .word STATE, AT, ONEMINUS, ZEQU, LIT, 12, QERROR, ENDS
 828      0000 0000 
 828      0000 0C00 
 828      0000 0000 
 829               	
 830               	;----------------------------------------------------------------------
 831 ???? 0000 043F 	HEADER "?CSP", "QCSP", 
 831      4353 5020 
 832 ???? 0000 0000 	    .word PSAT, CSP, AT, MINUS, LIT, 14, QERROR, ENDS
 832      0000 0000 
 832      0000 0E00 
 832      0000 0000 
 833               	
 834               	; parameter stack underflow or overflow
 835 ???? 0000 063F 	HEADER "?STACK", "QSTACK", 
 835      5354 4143 
 835      4B20 
 836 ???? 0000 0000 	    .word PSAT, PS0, GTHAN, LIT, 1, QERROR ; underflow
 836      0000 0000 
 836      0100 0000 
 837 ???? 0000 0000 	    .word PSAT, PS0, MINUS, LIT, STACK_SIZE, MINUS, LIT, 7, QERROR ; overflow 
 837      0000 0000 
 837      2400 0000 
 837      0000 0700 
 837      0000 
 838 ???? 0000      	    .word ENDS 
 839               	
 840               	;----------------------------------------------------------------------
 841 ???? 0000 053F 	HEADER "?PAIR", "QPAIR", 
 841      5041 4952 
 842 ???? 0000 0000 	    .word MINUS, LIT, 13, QERROR, ENDS
 842      0D00 0000 
 842      0000 
 843               	
 844               	; stack not same 
 845               	; conditionals match
 846               	; 1 hook back
 847               	; 2 if else then endif
 848               	; 3 begin again until
 849               	; 4 while repeat
 850               	; 5 for next
 851               	; 6 case endcase
 852               	; 7 of endof
 853               	; 8 do loop +loop -loop leave
 854               	;
 855 ???? 0000 6448 	HEADER "HOOK", "XHOOK", F_IMMEDIATE | F_COMPILE
 855      4F4F 4B20 
 856 ???? 0000 0000 	    .word QCOMP, HOOK, LIT, 0x01, ENDS
 856      0000 0100 
 856      0000 
 857               	
 858 ???? 0000 6442 	HEADER "BACK", "XBACK", F_IMMEDIATE | F_COMPILE
 858      4143 4B20 
 859 ???? 0000 0000 	    .word QCOMP, LIT, 0x01, QPAIR, BACK, ENDS
 859      0100 0000 
 859      0000 0000 
 860               	
 861 ???? 0000 6551 	HEADER "QBACK", "XQBACK", F_IMMEDIATE | F_COMPILE
 861      4241 434B 
 862 ???? 0000 0000 	    .word QCOMP, LIT, 0x01, QPAIR, BACK, ENDS
 862      0100 0000 
 862      0000 0000 
 863               	
 864 ???? 0000 6249 	HEADER "IF", "XIF", F_IMMEDIATE | F_COMPILE
 864      4620 
 865 ???? 0000 0000 	    .word QCOMP, IF, LIT, 0x02, ENDS
 865      0000 0200 
 865      0000 
 866               	
 867 ???? 0000 6445 	HEADER "ELSE", "XELSE", F_IMMEDIATE | F_COMPILE
 867      4C53 4520 
 868 ???? 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, LIT, 0x02, ELSE, ENDS
 868      0200 0000 
 868      0000 0200 
 868      0000 0000 
 869               	
 870 ???? 0000 6545 	HEADER "ENDIF", "XENDIF", F_IMMEDIATE | F_COMPILE
 870      4E44 4946 
 871 ???? 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, ENDIF, ENDS
 871      0200 0000 
 871      0000 0000 
 872               	
 873 ???? 0000 6454 	HEADER "THEN", "XTHEN", F_IMMEDIATE | F_COMPILE
 873      4845 4E20 
 874 ???? 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, ENDIF, ENDS
 874      0200 0000 
 874      0000 0000 
 875               	
 876 ???? 0000 6541 	HEADER "AHEAD", "XAHEAD", F_IMMEDIATE | F_COMPILE
 876      4845 4144 
 877 ???? 0000 0000 	    .word QCOMP, GO, LIT, 0x02, ENDS
 877      0000 0200 
 877      0000 
 878               	
 879 ???? 0000 6341 	HEADER "AFT", "XAFT", F_IMMEDIATE | F_COMPILE
 879      4654 
 880 ???? 0000 0000 	    .word QCOMP, LIT, 0x02, QPAIR, AFT, LIT, 0x02, ENDS
 880      0200 0000 
 880      0000 0000 
 880      0200 0000 
 881               	
 882 ???? 0000 6542 	HEADER "BEGIN", "XBEGIN", F_IMMEDIATE | F_COMPILE
 882      4547 494E 
 883 ???? 0000 0000 	    .word QCOMP, BEGIN, LIT, 0x03, ENDS
 883      0000 0300 
 883      0000 
 884               	
 885 ???? 0000 6541 	HEADER "AGAIN", "XAGAIN", F_IMMEDIATE | F_COMPILE
 885      4741 494E 
 886 ???? 0000 0000 	    .word QCOMP, LIT, 0x03, QPAIR, AGAIN, ENDS
 886      0300 0000 
 886      0000 0000 
 887               	
 888 ???? 0000 6555 	HEADER "UNTIL", "XUNTIL", F_IMMEDIATE | F_COMPILE
 888      4E54 494C 
 889 ???? 0000 0000 	    .word QCOMP, LIT, 0x03, QPAIR, UNTIL, ENDS
 889      0300 0000 
 889      0000 0000 
 890               	
 891 ???? 0000 6557 	HEADER "WHILE", "XWHILE", F_IMMEDIATE | F_COMPILE
 891      4849 4C45 
 892 ???? 0000 0000 	    .word QCOMP, LIT, 0x03, QPAIR, WHILE, LIT, 0x04, ENDS
 892      0300 0000 
 892      0000 0000 
 892      0400 0000 
 893               	
 894 ???? 0000 6652 	HEADER "REPEAT", "XREPEAT", F_IMMEDIATE | F_COMPILE
 894      4550 4541 
 894      5420 
 895 ???? 0000 0000 	    .word QCOMP, LIT, 0x04, QPAIR, REPEAT, ENDS
 895      0400 0000 
 895      0000 0000 
 896               	
 897 ???? 0000 6346 	HEADER "FOR", "XFOR", F_IMMEDIATE | F_COMPILE
 897      4F52 
 898 ???? 0000 0000 	    .word QCOMP, FOR, LIT, 0x05, ENDS
 898      0000 0500 
 898      0000 
 899               	
 900 ???? 0000 644E 	HEADER "NEXT", "XNEXT", F_IMMEDIATE | F_COMPILE
 900      4558 5420 
 901 ???? 0000 0000 	    .word QCOMP, LIT, 0x05, QPAIR, NEXT, ENDS
 901      0500 0000 
 901      0000 0000 
 902               	
 903 ???? 0000 6443 	HEADER "CASE", "XCASE", F_IMMEDIATE | F_COMPILE
 903      4153 4520 
 904 ???? 0000 0000 	    .word QCOMP, CASE, LIT, 0x06, ENDS
 904      0000 0600 
 904      0000 
 905               	
 906 ???? 0000 6745 	HEADER "ENDCASE", "XENDCASE", F_IMMEDIATE | F_COMPILE
 906      4E44 4341 
 906      5345 
 907 ???? 0000 0000 	    .word QCOMP, LIT, 0x06, QPAIR, ENDCASE, ENDS
 907      0600 0000 
 907      0000 0000 
 908               	
 909 ???? 0000 624F 	HEADER "OF", "XOF", F_IMMEDIATE | F_COMPILE
 909      4620 
 910 ???? 0000 0000 	    .word QCOMP, LIT, 0x06, OF, QPAIR, 0x07, ENDS
 910      0600 0000 
 910      0000 0700 
 910      0000 
 911               	
 912 ???? 0000 6545 	HEADER "ENDOF", "XENDOF", F_IMMEDIATE | F_COMPILE
 912      4E44 4F46 
 913 ???? 0000 0000 	    .word QCOMP, LIT, 0x07, QPAIR, ENDOF, LIT, 0x06, ENDS
 913      0700 0000 
 913      0000 0000 
 913      0600 0000 
 914               	
 915 ???? 0000 6244 	HEADER "DO", "XDO", F_IMMEDIATE | F_COMPILE
 915      4F20 
 916 ???? 0000 0000 	    .word QCOMP, DO, LIT, 0x08, ENDS
 916      0000 0800 
 916      0000 
 917               	
 918 ???? 0000 644C 	HEADER "LOOP", "XLOOP", F_IMMEDIATE | F_COMPILE
 918      4F4F 5020 
 919 ???? 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, LOOP, ENDS
 919      0800 0000 
 919      0000 0000 
 920               	
 921 ???? 0000 652B 	HEADER "+LOOP", "XPLOOP", F_IMMEDIATE | F_COMPILE
 921      4C4F 4F50 
 922 ???? 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, PLOOP, ENDS
 922      0800 0000 
 922      0000 0000 
 923               	
 924 ???? 0000 654C 	HEADER "LEAVE", "XLEAVE", F_IMMEDIATE | F_COMPILE
 924      4541 5645 
 925 ???? 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, LEAVE, LIT, 0x08, ENDS
 925      0800 0000 
 925      0000 0000 
 925      0800 0000 
 926               	
 927 ???? 0000 6655 	HEADER "UNLOOP", "XUNLOOP", F_IMMEDIATE | F_COMPILE
 927      4E4C 4F4F 
 927      5020 
 928 ???? 0000 0000 	    .word QCOMP, LIT, 0x08, QPAIR, UNLOOP, LIT, 0x08, ENDS
 928      0800 0000 
 928      0000 0000 
 928      0800 0000 
 929               	
 930               	
 931               	;********************************************************************** 
 932               	; 
 933               	; almost forth94 
 934               	; 
 935               	;---------------------------------------------------------------------- 
 936               	 
 937               	;----------------------------------------------------------------------
 938               	;
 939               	; ok make a value ( w -- )
 940               	; header|lit|value|ends
 941               	; zzzz
 942 ???? 0000 0556 	HEADER "VALUE", "VALUE", 
 942      414C 5545 
 943 ???? 0000 0000 	    .word CREATE, DROP, LITERAL, ENDS
 943      0000 0000 
 944               	
 945               	;----------------------------------------------------------------------
 946               	;
 947               	; ok make a to value 
 948               	; change value 
 949 ???? 0000 4254 	HEADER "TO", "TOVALUE", F_IMMEDIATE
 949      4F20 
 950 ???? 0000 0000 	    .word FIND, CELLPLUS, TO, ENDS
 950      0000 0000 
 951               	
 952               	;----------------------------------------------------------------------
 953               	;
 954               	; ok make a defer
 955               	; defaults to UNDEF
 956               	; 
 957 ???? 0000 0544 	HEADER "DEFER", "DEFER", 
 957      4546 4552 
 958 ???? 0000 0000 	    .word CREATE, LIT, UNDEF, LIT, BRANCH, COMMA, COMMA, ENDS
 958      0000 0000 
 958      0000 0000 
 958      0000 0000 
 959               	
 960               	;----------------------------------------------------------------------
 961               	;
 962               	; ok make a is 
 963               	;
 964 ???? 0000 4249 	HEADER "IS", "ISDEFER", F_IMMEDIATE
 964      5320 
 965 ???? 0000 0000 	    .word FIND, CELLPLUS, SWAP, TO, ENDS
 965      0000 0000 
 965      0000 
 966               	
 967               	;---------------------------------------------------------------------- 
 968               	; 
 969               	; ok SLASHMOVE (a1 a2 u -- ) 
 970               	;   moves CELLS ! backwards
 971 ???? 0000 0653 	HEADER "SSMOVE", "SSMOVE", 
 971      534D 4F56 
 971      4520 
 972 ???? 0000 0000 		.word ZDUP, ZBRANCH, 80f
 972      0000 
 973 ???? 0000 0000 		.word DUP, TOR, DUP, OVER, PLUS					
 973      0000 0000 
 973      0000 
 974 ???? 0000 0000 		.word TOR, PLUS, RTO, RTO
 974      0000 0000 
 975 ???? 0000 0000 	1:  .word ZDUP, ZBRANCH, 80f
 975      0000 
 976 ???? 0000 0000 	    .word ONEMINUS, TOR
 977 ???? 0000 0000 	    .word OVER, AT 
 978               	    
 979               	    ; escaped controls allowed
 980               	
 981 ???? 0000 0000 	    .word DUP, LIT, '\', EQUAL, ZBRANCH, 60f
 981      2700 0000 
 981      0000 0000 
 982 ???? 0000 0000 	10:    .word DUP, LIT, 'a', EQUAL, ZBRANCH,  12  ; BEL bell
 982      6100 0000 
 982      0000 0C00 
 983 ???? 0000 0000 	    .word DROP, LIT, 7, BRANCH, 60f
 983      0700 0000 
 983      0000 
 984 ???? 0000 0000 	12:    .word DUP, LIT, 'b', EQUAL, ZBRANCH,  14  ; BS backspace
 984      6200 0000 
 984      0000 0E00 
 985 ???? 0000 0000 	    .word DROP, LIT, 8, BRANCH, 60f
 985      0800 0000 
 985      0000 
 986 ???? 0000 0000 	14:    .word DUP, LIT, 'e', EQUAL, ZBRANCH,  16  ; ESC escape
 986      6500 0000 
 986      0000 1000 
 987 ???? 0000 0000 	    .word DROP, LIT, 27, BRANCH, 60f
 987      1B00 0000 
 987      0000 
 988 ???? 0000 0000 	16:    .word DUP, LIT, 'f', EQUAL, ZBRANCH,  18  ; FF form feed
 988      6600 0000 
 988      0000 1200 
 989 ???? 0000 0000 	    .word DROP, LIT, 12, BRANCH, 60f
 989      0C00 0000 
 989      0000 
 990 ???? 0000 0000 	18:    .word DUP, LIT, 'l', EQUAL, ZBRANCH,  20  ; LF line feed
 990      6C00 0000 
 990      0000 1400 
 991 ???? 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 991      0A00 0000 
 991      0000 
 992 ???? 0000 0000 	20:    .word DUP, LIT, 'n', EQUAL, ZBRANCH,  22  ; NL new line 
 992      6E00 0000 
 992      0000 1600 
 993 ???? 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 993      0A00 0000 
 993      0000 
 994 ???? 0000 0000 	22:    .word DUP, LIT, 'q', EQUAL, ZBRANCH,  24  ; double quote
 994      7100 0000 
 994      0000 1800 
 995 ???? 0000 0000 	    .word DROP, LIT, 34, BRANCH, 60f
 995      2200 0000 
 995      0000 
 996 ???? 0000 0000 	24:    .word DUP, LIT, 'r', EQUAL, ZBRANCH,  26  ; CR carriage return
 996      7200 0000 
 996      0000 1A00 
 997 ???? 0000 0000 	    .word DROP, LIT, 13, BRANCH, 60f
 997      0D00 0000 
 997      0000 
 998 ???? 0000 0000 	26:    .word DUP, LIT, 't', EQUAL, ZBRANCH,  28  ; HT horizontal tab
 998      7400 0000 
 998      0000 1C00 
 999 ???? 0000 0000 	    .word DROP, LIT, 9, BRANCH, 60f
 999      0900 0000 
 999      0000 
 1000 ???? 0000 0000 	28:    .word DUP, LIT, 'v', EQUAL, ZBRANCH,  30  ; VT vertical tab
 1000      7600 0000 
 1000      0000 1E00 
 1001 ???? 0000 0000 	    .word DROP, LIT, 11, BRANCH, 60f
 1001      0B00 0000 
 1001      0000 
 1002 ???? 0000 0000 	30:    .word DUP, LIT, 'z', EQUAL, ZBRANCH,  32  ; NUL no char 0x0
 1002      7A00 0000 
 1002      0000 2000 
 1003 ???? 0000 0000 	    .word DROP, LIT, 0, BRANCH, 60f
 1003      0000 0000 
 1003      0000 
 1004 ???? 0000 0000 	32:    .word DUP, LIT, '\"', EQUAL, ZBRANCH, 34  ; double quote
 1004      2200 0000 
 1004      0000 2200 
 1005 ???? 0000 0000 	    .word DROP, LIT, 34, BRANCH, 60f
 1005      2200 0000 
 1005      0000 
 1006 ???? 0000 0000 	34:    .word DUP, LIT, '\\', EQUAL, ZBRANCH,  36  ; backslash
 1006      5C00 0000 
 1006      0000 2400 
 1007 ???? 0000 0000 	    .word DROP, LIT, 92, BRANCH, 60f
 1007      5C00 0000 
 1007      0000 
 1008               	
 1009               	     ; dual chars zzzz
 1010               	
 1011 ???? 0000 0000 	36:    .word DUP, LIT, 'x', EQUAL, ZBRANCH,  38  ; hexdigit hexdigit
 1011      7800 0000 
 1011      0000 2600 
 1012 ???? 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 1012      0A00 0000 
 1012      0000 
 1013 ???? 0000 0000 	38:    .word DUP, LIT, 'm', EQUAL, ZBRANCH,  40  ; pair cr/lf  
 1013      6D00 0000 
 1013      0000 2800 
 1014 ???? 0000 0000 	    .word DROP, LIT, 10, BRANCH, 60f
 1014      0A00 0000 
 1014      0000 
 1015               	    ; else clear to space
 1016               	40: 
 1017 ???? 0000 0000 	    .word DROP, LIT, 32
 1017      2000 
 1018               	
 1019 ???? 0000 0000 	60: .word OVER, TO
 1020 ???? 0000 0000 	    .word ONEMINUS, SWAP, ONEMINUS, SWAP
 1020      0000 0000 
 1021 ???? 0000 0000 	    .word BRANCH, 1b
 1022 ???? 0000 0000 	80: .word DROP, DROP, ENDS 
 1022      0000 
 1023               	 
 1024               	;---------------------------------------------------------------------- 
 1025               	; 
 1026               	; ok MOVE (a1 a2 u -- ) 
 1027               	;   moves CELLS ! backwards
 1028 ???? 0000 044D 	HEADER "MOVE", "MOVE", 
 1028      4F56 4520 
 1029 ???? 0000 0000 		.word ZDUP, ZBRANCH, 2f
 1029      0000 
 1030 ???? 0000 0000 		.word DUP, TOR, DUP, OVER, PLUS					
 1030      0000 0000 
 1030      0000 
 1031 ???? 0000 0000 		.word TOR, PLUS, RTO, RTO
 1031      0000 0000 
 1032 ???? 0000 0000 	1:  .word ZDUP, ZBRANCH, 2f
 1032      0000 
 1033 ???? 0000 0000 	    .word ONEMINUS, TOR
 1034 ???? 0000 0000 	    .word OVER, AT, OVER, TO
 1034      0000 0000 
 1035 ???? 0000 0000 	    .word ONEMINUS, SWAP, ONEMINUS, SWAP
 1035      0000 0000 
 1036 ???? 0000 0000 	    .word BRANCH, 1b
 1037 ???? 0000 0000 	2:  .word DROP, DROP, ENDS 
 1037      0000 
 1038               	 
 1039               	;---------------------------------------------------------------------- 
 1040               	; 
 1041               	; ok MOVE (a1 a2 u -- ) 
 1042               	;   moves CHARS ! and align from backwards
 1043 ???? 0000 0543 	HEADER "CMOVE", "CMOVE", 
 1043      4D4F 5645 
 1044 ???? 0000 0000 		.word ZDUP, ZBRANCH, 2f
 1044      0000 
 1045 ???? 0000 0000 		.word SHR, ONE, PLUS, MOVE, ENDS					
 1045      0000 0000 
 1045      0000 
 1046 ???? 0000 0000 	2:  .word DROP, DROP, ENDS 
 1046      0000 
 1047               	 
 1048               	;---------------------------------------------------------------------- 
 1049               	; 
 1050               	; ok FILL (a u c -- ) 
 1051               	; fills CHARS
 1052 ???? 0000 0446 	HEADER "FILL", "FILL", 
 1052      494C 4C20 
 1053 ???? 0000 0000 		.word SWAP, ZDUP, ZBRANCH, 2f
 1053      0000 0000 
 1054 ???? 0000 0000 	    .word TOR, SWAP
 1055 ???? 0000 0000 	1:  .word RTO, ZDUP, ZBRANCH, 2f
 1055      0000 0000 
 1056 ???? 0000 0000 	    .word ONEMINUS, TOR
 1057 ???? 0000 0000 	    .word OVER, OVER, CTO, ONEPLUS 
 1057      0000 0000 
 1058 ???? 0000 0000 	    .word BRANCH, 1b 
 1059 ???? 0000 0000 	2:  .word DROP, DROP, ENDS 
 1059      0000 
 1060               	 
 1061               	;---------------------------------------------------------------------- 
 1062               	; 
 1063               	; is \] to compile 
 1064               	; 
 1065 ???? 0000 015D 	HEADER "]", "RBRAC", 
 1066 ???? 0000 0000 	    .word ONE, STATE, TO, ENDS 
 1066      0000 0000 
 1067               	 
 1068               	;---------------------------------------------------------------------- 
 1069               	; 
 1070               	; is \[ to interpret 
 1071               	; 
 1072 ???? 0000 415B 	HEADER "[", "LBRAC", F_IMMEDIATE 
 1073 ???? 0000 0000 	    .word ZERO, STATE, TO, ENDS 
 1073      0000 0000 
 1074               	 
 1075               	;---------------------------------------------------------------------- 
 1076               	; 
 1077               	; is TOGGLE ( a f -- ) 
 1078               	; 
 1079 ???? 0000 0654 	HEADER "TOGGLE", "TOGGLE", 
 1079      4F47 474C 
 1079      4520 
 1080 ???? 0000 0000 	    .word OVER, AT, XOR, SWAP, TO, ENDS 
 1080      0000 0000 
 1080      0000 0000 
 1081               	 
 1082               	;---------------------------------------------------------------------- 
 1083               	; 
 1084               	; is >NFA ( a f -- ) 
 1085               	; from link to c_name 
 1086               	; 
 1087 ???? 0000 043E 	HEADER ">NFA", "TONFA", 
 1087      4E46 4120 
 1088 ???? 0000 0000 	    .word CELL, PLUS, ENDS 
 1088      0000 
 1089               	 
 1090               	;---------------------------------------------------------------------- 
 1091               	; 
 1092               	; is >CFA ( a f -- ) 
 1093               	; from link to code 
 1094 ???? 0000 043E 	HEADER ">CFA", "TOCFA", 
 1094      4346 4120 
 1095 ???? 0000 0000 	    .word TONFA, DUP, AT, F_UNMASK, AND, PLUS, ALIGN, ENDS 
 1095      0000 0F00 
 1095      0000 0000 
 1095      0000 0000 
 1096               	 
 1097               	;---------------------------------------------------------------------- 
 1098               	; 
 1099               	; is HIDDEN 
 1100               	; 
 1101 ???? 0000 0648 	HEADER "HIDDEN", "HIDDEN", 
 1101      4944 4445 
 1101      4E20 
 1102 ???? 0000 0000 	    .word LATEST, TONFA, F_HIDDEN, TOGGLE, ENDS 
 1102      1000 0000 
 1102      0000 
 1103               	 
 1104               	;---------------------------------------------------------------------- 
 1105               	; 
 1106               	; is IMMEDIATE 
 1107               	; 
 1108 ???? 0000 0949 	HEADER "IMMEDIATE", "IMMEDIATE", 
 1108      4D4D 4544 
 1108      4941 5445 
 1109 ???? 0000 0000 	    .word LATEST, TONFA, F_IMMEDIATE, TOGGLE, ENDS 
 1109      4000 0000 
 1109      0000 
 1110               	 
 1111               	;---------------------------------------------------------------------- 
 1112               	; 
 1113               	; is COMP_ONLY 
 1114               	; 
 1115 ???? 0000 0C43 	HEADER "COMPILE_ONLY", "COMPILE_ONLY", 
 1115      4F4D 5049 
 1115      4C45 5F4F 
 1115      4E4C 5920 
 1116 ???? 0000 0000 	    .word LATEST, TONFA, F_COMPILE, TOGGLE, ENDS 
 1116      2000 0000 
 1116      0000 
 1117               	 
 1118               	;---------------------------------------------------------------------- 
 1119               	; 
 1120               	; is HANDLER 
 1121               	; 
 1122 ???? 0000 0748 	HEADER "HANDLER", "HANDLER", 
 1122      414E 444C 
 1122      4552 
 1123 ???? 0000 0000 	    .word LIT, HAND, ENDS 
 1123      0000 
 1124               	 
 1125               	;---------------------------------------------------------------------- 
 1126               	; 
 1127               	; is CATCH 
 1128               	; 
 1129 ???? 0000 0543 	HEADER "CATCH", "CATCH", 
 1129      4154 4348 
 1130 ???? 0000 0000 	    .word PSAT, TOR, HANDLER, AT, TOR, RSAT, HANDLER, TO 
 1130      0000 0000 
 1130      0000 0000 
 1130      0000 0000 
 1131 ???? 0000 0000 	    .word EXEC, RTO, HANDLER, TO, RTO, DROP, ZERO
 1131      0000 0000 
 1131      0000 0000 
 1131      0000 
 1132 ???? 0000      	    .word ENDS 
 1133               	 
 1134               	;---------------------------------------------------------------------- 
 1135               	; 
 1136               	; is THROW 
 1137               	; 
 1138 ???? 0000 0554 	HEADER "THROW", "THROW", 
 1138      4852 4F57 
 1139 ???? 0000 0000 	    .word ZDUP, ZBRANCH, 1f 
 1139      0000 
 1140 ???? 0000 0000 	    .word HANDLER, AT, RSTO, RTO, HANDLER, TO 
 1140      0000 0000 
 1140      0000 0000 
 1141 ???? 0000 0000 	    .word RTO, SWAP, TOR, PSTO, DROP, RTO 
 1141      0000 0000 
 1141      0000 0000 
 1142 ???? 0000      	1:  .word ENDS 
 1143               	
 1144               	;---------------------------------------------------------------------- 
 1145               	; 
 1146               	; is FATAL 
 1147               	; 
 1148 ???? 0000 0B46 	HEADER "FATAL-CATCH", "FATAL", 
 1148      4154 414C 
 1148      2D43 4154 
 1148      4348 
 1149 ???? 0000 0000 		.word CATCH, ZDUP, ZBRANCH, 40f
 1149      0000 0000 
 1150               	2:
 1151 ???? 0000 0000 		.word DUP, LIT,  -1, EQUAL, ZBRANCH, 4f ; -1 of " Aborted" cr endof
 1151      FFFF 0000 
 1151      0000 0000 
 1152 ???? 0000      		.word SQUOTE 
 1153 ???? 0920 4162 	    STRINGS " Aborted"
 1153      6F72 7465 
 1153      6400 
 1154 ???? 0000 0000 		.word BRANCH, 20f 
 1155               	4:
 1156 ???? 0000 0000 		.word DUP, LIT,  -3, EQUAL, ZBRANCH, 6f ; -3 of " Stack overflow" cr endof
 1156      FDFF 0000 
 1156      0000 0000 
 1157 ???? 0000      		.word SQUOTE 
 1158 ???? 1020 5374 		STRINGS " Stack overflow" 
 1158      6163 6B20 
 1158      6F76 6572 
 1158      666C 6F77 
 1158      0000 
 1159 ???? 0000 0000 		.word BRANCH, 20f 
 1160               	6:
 1161 ???? 0000 0000 		.word DUP, LIT,  -4, EQUAL, ZBRANCH, 8f ; -4 of " Stack underflow" cr endof
 1161      FCFF 0000 
 1161      0000 0000 
 1162 ???? 0000      		.word SQUOTE 
 1163 ???? 1120 5374 		STRINGS " Stack underflow" 
 1163      6163 6B20 
 1163      756E 6465 
 1163      7266 6C6F 
 1163      7700 
 1164 ???? 0000 0000 		.word BRANCH, 20f 
 1165               	8:
 1166 ???? 0000 0000 		.word DUP, LIT, -10, EQUAL, ZBRANCH, 10f ; -10 of " Division by zero" cr endof
 1166      F6FF 0000 
 1166      0000 0000 
 1167 ???? 0000      		.word SQUOTE 
 1168 ???? 1220 4469 		STRINGS " Division by zero"
 1168      7669 7369 
 1168      6F6E 2062 
 1168      7920 7A65 
 1168      726F 0000 
 1169 ???? 0000 0000 		.word BRANCH, 20f 
 1170               	10:
 1171 ???? 0000 0000 		.word DUP, LIT, -13, EQUAL, ZBRANCH, 12f ; -13 of " Unknown word" cr endof
 1171      F3FF 0000 
 1171      0000 0000 
 1172 ???? 0000      		.word SQUOTE 
 1173 ???? 0E20 556E 		STRINGS " Unknown word" 
 1173      6B6E 6F77 
 1173      6E20 776F 
 1173      7264 0000 
 1174 ???? 0000 0000 		.word BRANCH, 20f 
 1175               	12:
 1176 ???? 0000 0000 		.word DUP, LIT, -14, EQUAL, ZBRANCH, 14f ; -14 of " Compile-only word" cr endof
 1176      F2FF 0000 
 1176      0000 0000 
 1177 ???? 0000      		.word SQUOTE 
 1178 ???? 1320 436F 		STRINGS " Compile-only word"
 1178      6D70 696C 
 1178      652D 6F6E 
 1178      6C79 2077 
 1178      6F72 6400 
 1179 ???? 0000 0000 		.word BRANCH, 20f 
 1180               	14:
 1181 ???? 0000      		.word SQUOTE 
 1182 ???? 2520 4F63 		STRINGS " Ocurred an unexpected error of code"
 1182      7572 7265 
 1182      6420 616E 
 1182      2075 6E65 
 1182      7870 6563 
 1183 ???? 0000 0000 	    .word DUP, DOT 
 1184               	20:
 1185 ???? 0000 0000 		.word CR, BRANCH, ABORT
 1185      0000 
 1186               	40:
 1187 ???? 0000      		.word ENDS	
 1188               	;---------------------------------------------------------------------- 
 1189               	; 
 1190               	; is ABORT 
 1191               	; 
 1192 ???? 0000 0541 	HEADER "ABORT", "ABORT" 
 1192      424F 5254 
 1193 ???? 0000 FFFF 	    .word LIT, -1, THROW, ENDS 
 1193      0000 0000 
 1194               	 
 1195               	;---------------------------------------------------------------------- 
 1196               	; 
 1197               	; is ACCEPT is a refill with edit capabilities 
 1198               	; 
 1199 ???? 0000 0641 	HEADER "ACCEPT", "ACCEPT", 
 1199      4343 4550 
 1199      5420 
 1200 ???? 0000 0000 	    .word ZZZZ, ENDS 
 1201               	 
 1202               	;---------------------------------------------------------------------- 
 1203               	; 
 1204               	; is 
 1205               	; 
 1206 ???? 0000 054F 	HEADER "OVERT", "OVERT", 
 1206      5645 5254 
 1207               	    ;.word LATEST, AT, CURRENT, AT, TO, ENDS 
 1208 ???? 0000 0000 	    .word ZZZZ, ENDS 
 1209               	 
 1210               	;---------------------------------------------------------------------- 
 1211               	; 
 1212               	; is COLON 
 1213               	; 
 1214 ???? 0000 413A 	HEADER ":", "COLON", F_IMMEDIATE 
 1215 ???? 0000 0000 	    .word CREATE, RBRAC, ENDS 
 1215      0000 
 1216               	 
 1217               	;---------------------------------------------------------------------- 
 1218               	; 
 1219               	; is SEMIS
 1220               	; 
 1221 ???? 0000 013B 	HEADER ";", "SEMIS", 
 1222 ???? 0000 0000 	    .word EXIT, LBRAC, OVERT, ENDS 
 1222      0000 0000 
 1223               	 
 1224               	;---------------------------------------------------------------------- 
 1225               	; 
 1226               	; is SOURCE 
 1227               	;   place terminal buffer address and length in stack 
 1228               	;   no standart: also place a \0 at end :) 
 1229               	; 
 1230 ???? 0000 0653 	HEADER "SOURCE", "SOURCE", 
 1230      4F55 5243 
 1230      4520 
 1231 ???? 0000 0000 	    .word LIT, TIB0, LIT, TIB_SIZE 
 1231      0000 5000 
 1232 ???? 0000 0000 	    .word OVER, OVER, PLUS, LIT, ZERO, SWAP, TO, ONE, MINUS 
 1232      0000 0000 
 1232      0000 0000 
 1232      0000 0000 
 1232      0000 
 1233 ???? 0000      	    .word ENDS 
 1234               	 
 1235               	;---------------------------------------------------------------------- 
 1236               	; 
 1237               	; is SOURCE+ 
 1238               	; 
 1239 ???? 0000 0753 	HEADER "SOURCE+", "SOURCEPLUS", 
 1239      4F55 5243 
 1239      452B 
 1240 ???? 0000 0000 	    .word SOURCE, DROP, TOIN, PLUS, ENDS 
 1240      0000 0000 
 1240      0000 
 1241               	 
 1242               	;---------------------------------------------------------------------- 
 1243               	; 
 1244               	; is  REFILL ( -- a n ), toin = 0 
 1245               	; wrapper refill inside (xon - xoff)
 1246               	;
 1247 ???? 0000 0652 	HEADER "REFILL", "REFILL", 
 1247      4546 494C 
 1247      4C20 
 1248 ???? 0000 1100 	    .word LIT, XON_, EMIT 
 1248      0000 
 1249 ???? 0000 0000 	    .word SOURCE, refillf 
 1250 ???? 0000 1300 	    .word LIT, XOFF_, EMIT
 1250      0000 
 1251 ???? 0000 0000 	    .word ZERO, TOIN, TO, ENDS 
 1251      0000 0000 
 1252               	 
 1253               	;---------------------------------------------------------------------- 
 1254               	; 
 1255               	; is PARSE ( "<chars>ccc" c -- a n ) 
 1256               	;   no counted-string 
 1257               	; 
 1258 ???? 0000 0550 	HEADER "PARSE", "PARSE" 
 1258      4152 5345 
 1259 ???? 0000 0000 	    .word SOURCEPLUS, SWAP 
 1260 ???? 0000 0000 	    .word parsef, ZDUP, ZBRANCH, 2f 
 1260      0000 0000 
 1261 ???? 0000 0000 	    .word DUP, TOIN, PLUSTO, ENDS 
 1261      0000 0000 
 1262 ???? 0000 0000 	2:  .word REFILL, BRANCH, PARSE ; perfect loop 
 1262      0000 
 1263               	 
 1264               	;---------------------------------------------------------------------- 
 1265               	; 
 1266               	; is \ also comments
 1267               	; 
 1268 ???? 0000 415C 	HEADER "\\", "BACKSLASH", F_IMMEDIATE 
 1269 ???? 0000 5000 	    .word LIT, TIB_SIZE, TOIN, TO, ENDS 
 1269      0000 0000 
 1269      0000 
 1270               	
 1271               	;---------------------------------------------------------------------- 
 1272               	; 
 1273               	; is PAREN ( "<chars>ccc" c -- ) also comments
 1274               	; 
 1275 ???? 0000 4128 	HEADER "(", "PAREN", F_IMMEDIATE 
 1276 ???? 0000 2900 	    .word LIT, ')', PARSE, DROP, DROP, ENDS 
 1276      0000 0000 
 1276      0000 0000 
 1277               	
 1278               	;---------------------------------------------------------------------- 
 1279               	; 
 1280               	; is DOTPAREN .( "<chars>ccc" c -- a n ) also types
 1281               	;   not standart, no multi-task support
 1282               	;
 1283 ???? 0000 022E 	HEADER ".(", "DOTPAREN" 
 1283      2820 
 1284 ???? 0000 2900 	    .word LIT, ')', PARSE, ENDS ;
 1284      0000 0000 
 1285               	
 1286               	;---------------------------------------------------------------------- 
 1287               	; 
 1288               	; is S BACK SLASH QUOTE S\" ( -- )
 1289               	;   not standart, 
 1290               	;	zzzz differ ???
 1291 ???? 0000 0353 	HEADER "S\\\"", "SBSQUOTE" 
 1291      5C22 
 1292 ???? 0000 0000 	    .word RTO, DUP, COUNT, TYPE
 1292      0000 0000 
 1293               		; skip chars bytes 
 1294 ???? 0000 0000 	    .word DUP, AT, ONE, PLUS, PLUS 
 1294      0000 0000 
 1294      0000 
 1295 ???? 0000 0000 	    .word CELL, PLUS, ALIGNED, TOR, ENDS
 1295      0000 0000 
 1295      0000 
 1296               	
 1297               	;---------------------------------------------------------------------- 
 1298               	; 
 1299               	; is SQUOTE S" ( -- )
 1300               	;   not standart, 
 1301 ???? 0000 4253 	HEADER "S\"", "SQUOTE", F_IMMEDIATE 
 1301      2220 
 1302 ???? 0000 0000 	    .word RTO, DUP, COUNT, TYPE
 1302      0000 0000 
 1303               		; skip chars bytes 
 1304 ???? 0000 0000 	    .word DUP, AT, ONE, PLUS, PLUS 
 1304      0000 0000 
 1304      0000 
 1305 ???? 0000 0000 	    .word CELL, PLUS, ALIGNED, TOR, ENDS
 1305      0000 0000 
 1305      0000 
 1306               	
 1307               	;---------------------------------------------------------------------- 
 1308               	; 
 1309               	; is DOTQUOTE .\" ( "<chars>ccc" c -- a n )
 1310               	;   not standart, 
 1311               	;   parse returns chars
 1312               	;   bad things if no ending "
 1313               	;
 1314 ???? 0000 422E 	HEADER ".\"", "DOTQUOTE", F_IMMEDIATE 
 1314      2220 
 1315 ???? 0000 2200 	    .word LIT, QT_, PARSE
 1315      0000 
 1316 ???? 0000 0000 	    .word STATE, AT, ZBRANCH, TYPE
 1316      0000 0000 
 1317 ???? 0000 0000 	    .word COMP, SQUOTE, DUP, CCOMMA
 1317      0000 0000 
 1318 ???? 0000 0000 	    .word HERE, OVER, DUP, ALLOT, ALIGN
 1318      0000 0000 
 1318      0000 
 1319 ???? 0000 0000 	    .word CMOVE, ENDS  
 1320               	
 1321               	;---------------------------------------------------------------------- 
 1322               	; 
 1323               	; is  PARSE-NAME ( "ccc<chars>ccc" c -- a n ), toin = 0 
 1324               	;   no counted-string 
 1325               	; 
 1326 ???? 0000 0A50 	HEADER "PARSE-NAME", "PARSEN", 
 1326      4152 5345 
 1326      2D4E 414D 
 1326      4520 
 1327 ???? 0000 0000 	    .word SOURCEPLUS, SWAP 
 1328 ???? 0000 0000 	    .word wordf, ZDUP, ZBRANCH, 2f 
 1328      0000 0000 
 1329 ???? 0000 0000 	    .word DUP, TOIN, PLUSTO, ENDS 
 1329      0000 0000 
 1330 ???? 0000 0000 	2:  .word REFILL, BRANCH, PARSEN  ; perfect loop 
 1330      0000 
 1331               	 
 1332               	;---------------------------------------------------------------------- 
 1333               	; 
 1334               	; is FIND-NAME ( a n -- a 0 | xt -1 | xt 1 ) 
 1335               	;   no counted-string 
 1336               	;   no vocabularies 
 1337               	; 
 1338 ???? 0000 0946 	HEADER "FIND-NAME", "FINDN", 
 1338      494E 442D 
 1338      4E41 4D45 
 1339 ???? 0000 0000 	    .word LATEST, AT, findf, ENDS 
 1339      0000 0000 
 1340               	 
 1341               	;---------------------------------------------------------------------- 
 1342               	; 
 1343               	; is FIND ( "ccc<chars>ccc" -- a 0 | xt -1 | xt 1 ) 
 1344               	; 
 1345 ???? 0000 0446 	HEADER "FIND", "FIND", 
 1345      494E 4420 
 1346 ???? 0000 0000 	    .word PARSEN, FINDN
 1347 ???? 0000 0000 	    .word ZBRANCH, ABORT 
 1348 ???? 0000 0000 	    .word DROP, ENDS 
 1349               	 
 1350               	;---------------------------------------------------------------------- 
 1351               	; 
 1352               	; is  CHAR ( "ccc<chars>ccc" -- n)  
 1353               	; 
 1354 ???? 0000 0443 	HEADER "CHAR", "CHAR", 
 1354      4841 5220 
 1355 ???? 0000 0000 	    .word PARSEN, DROP, AT, ENDS 
 1355      0000 0000 
 1356               	 
 1357               	;---------------------------------------------------------------------- 
 1358               	; 
 1359               	; is  NONAME ( "" ), toin = 0 
 1360               	; 
 1361 ???? 0000 073A 	HEADER ":NONAME", "NONAME", 
 1361      4E4F 4E41 
 1361      4D45 
 1362 ???? 0000 0000 	    .word ZERO, ZERO, CREATE, RBRAC, ENDS 
 1362      0000 0000 
 1362      0000 
 1363               	 
 1364               	;---------------------------------------------------------------------- 
 1365               	; 
 1366               	; is CREATE ( "ccc<str>ccc" -- xt ) 
 1367               	; parse next word and compile a header 
 1368               	; 
 1369 ???? 0000 0643 	HEADER "CREATE", "CREATE", 
 1369      5245 4154 
 1369      4520 
 1370 ???? 0000 0000 	    .word PARSEN, LIT, UH0 
 1370      0000 
 1371 ???? 0000 0000 	    .word DUP, LATEST, AT, SWAP, TO, CELLPLUS 
 1371      0000 0000 
 1371      0000 0000 
 1372 ???? 0000 0000 	    .word OVER, OVER, TO, ONEPLUS, SWAP, DUP 
 1372      0000 0000 
 1372      0000 0000 
 1373 ???? 0000 0000 	    .word TOR, copyf, RTO 
 1373      0000 
 1374 ???? 0000 0000 	    .word DUP, ONE, AND, ZEQU, ZBRANCH, 2f 
 1374      0000 0000 
 1374      0000 0000 
 1375 ???? 0000 0000 	    .word DUP, BL, SWAP, TO, ONE, PLUS 
 1375      0000 0000 
 1375      0000 0000 
 1376 ???? 0000      	2:  .word ENDS 
 1377               	 
 1378               	;---------------------------------------------------------------------- 
 1379               	; 
 1380               	; is DOES> ( xt -- ) 
 1381               	; 
 1382 ???? 0000 4544 	HEADER "DOES>", "DOESTO", F_IMMEDIATE 
 1382      4F45 533E 
 1383 ???? 0000 0000 	    .word LIT, BRANCH, COMMA, HERE, COMMA, ENDS 
 1383      0000 0000 
 1383      0000 0000 
 1384               	
 1385               	;---------------------------------------------------------------------- 
 1386               	; 
 1387               	; is CONSTANT ( "ccc<caddr>ccc" w -- ) 
 1388               	; constants go to eeprom
 1389               	; EP points next word free
 1390               	; 
 1391               	; std: : variable create 0 , ;
 1392               	; zzzz
 1393 ???? 0000 0843 	 HEADER "CONSTANT", "CONSTANT", 
 1393      4F4E 5354 
 1393      414E 5420 
 1394 ???? 0000 0000 	    .word CREATE, EPP, AT
 1394      0000 
 1395 ???? 0000 0000 	    .word DUP, TOR, ETO, RTO
 1395      0000 0000 
 1396 ???? 0000 0000 	    .word DUP, CELL, PLUS, EPP, TO
 1396      0000 0000 
 1396      0000 
 1397 ???? 0000 0000 	    .word COMMA, DOESTO, ENDS 
 1397      0000 
 1398               	    
 1399               	;---------------------------------------------------------------------- 
 1400               	; 
 1401               	; is VARIABLE ( "ccc<caddr>ccc"  -- ) 
 1402               	; variables go to high adress sram
 1403               	; UP maps next word free
 1404               	;
 1405               	; std: : constant create , does> @ ;
 1406               	; zzzz
 1407 ???? 0000 0856 	HEADER "VARIABLE", "VARIABLE", 
 1407      4152 4941 
 1407      424C 4520 
 1408 ???? 0000 0000 	    .word CREATE, UPP, AT
 1408      0000 
 1409 ???? 0000 0000 	    .word DUP, TOR, TO, RTO
 1409      0000 0000 
 1410 ???? 0000 0000 	    .word DUP, CELL, MINUS, UPP, TO
 1410      0000 0000 
 1410      0000 
 1411 ???? 0000 0000 	    .word COMMA, DOESTO, ENDS 
 1411      0000 
 1412               	    
 1413               	;---------------------------------------------------------------------- 
 1414               	; 
 1415               	; is TICK ( "ccc<caddr>ccc" -- xt | 0 ) 
 1416               	; 
 1417 ???? 0000 0127 	HEADER "'", "TICK", 
 1418 ???? 0000 0000 	    .word PARSEN, FINDN, DUP 
 1418      0000 
 1419 ???? 0000 0000 	    .word ZEQU, ZBRANCH, 2f 
 1419      0000 
 1420 ???? 0000      	    .word SWAP 
 1421 ???? 0000 0000 	2:  .word DROP, ENDS 
 1422               	 
 1423               	;---------------------------------------------------------------------- 
 1424               	; 
 1425               	; ok unconditional compile next word 
 1426               	;   warning: no check if 0x0 zzzz 
 1427               	; 
 1428 ???? 0000 4850 	HEADER "POSTPONE", "POSTPONE", F_IMMEDIATE | F_CORE 
 1428      4F53 5450 
 1428      4F4E 4520 
 1429 ???? 0000 0000 	    .word TICK, COMMA, ENDS 
 1429      0000 
 1430               	 
 1431               	;----------------------------------------------------------------------
 1432               	;
 1433               	; is ['] ( w -- ) 
 1434               	; zzzz
 1435 ???? 0000 435B 	HEADER "[']", "KTICK", F_IMMEDIATE | F_CORE
 1435      275D 
 1436 ???? 0000 0000 	    .word LIT, POSTPONE, LITERAL, ENDS 
 1436      0000 0000 
 1437               	 
 1438               	;----------------------------------------------------------------------
 1439               	;
 1440               	; ok compile real
 1441               	;
 1442 ???? 0000 4743 	HEADER "COMPILE", "COMPILE", F_IMMEDIATE
 1442      4F4D 5049 
 1442      4C45 
 1443 ???? 0000 0000 	    .word DOVAR, AT, COMMA, ENDS
 1443      0000 0000 
 1444               	
 1445               	;---------------------------------------------------------------------- 
 1446               	; 
 1447               	; is  NUMBN ( a n -- w true | a n false ) 
 1448               	; 
 1449 ???? 0000 054E 	HEADER "NUMBN", "NUMBN", 
 1449      554D 424E 
 1450 ???? 0000 0000 	    .word OVER, OVER, numberf, ZBRANCH, 2f 
 1450      0000 0000 
 1450      0000 
 1451 ???? 0000 0000 	    .word TOR, DROP, DROP, RTO, FTRUE, BRANCH, 4f 
 1451      0000 0000 
 1451      0000 0000 
 1451      0000 
 1452 ???? 0000      	2:  .word FFALSE 
 1453 ???? 0000      	4:  .word ENDS 
 1454               	 
 1455               	;---------------------------------------------------------------------- 
 1456               	; 
 1457               	; is  NONEN ( a n -- ) 
 1458               	; 
 1459 ???? 0000 054E 	HEADER "NONEN", "NONEN", 
 1459      4F4E 454E 
 1460 ???? 0000 0000 	    .word CR, TYPE, LIT, question, LIT, 4, TYPE, ENDS 
 1460      0000 0000 
 1460      0000 0400 
 1460      0000 0000 
 1461               	
 1462               	;---------------------------------------------------------------------- 
 1463               	; 
 1464               	; is 
 1465               	; 
 1466 ???? 0000 0445 	HEADER "EVAL", "EVAL", 
 1466      5641 4C20 
 1467 ???? 0000      	    .word PARSEN
 1468               	100:
 1469               	    ; is a word 
 1470 ???? 0000 0000 	    .word FINDN, ZBRANCH, 200f
 1470      0000 
 1471               	    ; is -1 normal 1 immediate 
 1472 ???? 0000 0000 	    .word ONEMINUS, ZEQU, ZBRANCH, 120f 
 1472      0000 0000 
 1473 ???? 0000 0000 	    .word STATE, AT, ZBRANCH, 120f
 1473      0000 0000 
 1474               	110:
 1475 ???? 0000 0000 	    .word COMMA, BRANCH, EVAL 
 1475      0000 
 1476               	120:
 1477 ???? 0000 0000 	    .word EXEC, BRANCH, EVAL 
 1477      0000 
 1478               	    
 1479               	    ; is a number ? 
 1480 ???? 0000 0000 	200: .word NUMBN, ZBRANCH, 300f 
 1480      0000 
 1481 ???? 0000 0000 	    .word STATE, AT, ZBRANCH, EVAL 
 1481      0000 0000 
 1482 ???? 0000 0000 	    .word LIT, LIT, COMMA, COMMA
 1482      0000 0000 
 1483 ???? 0000 0000 	    .word BRANCH, EVAL 
 1484               	300: 
 1485               	    ; not okey
 1486 ???? 0000 0000 	    .word NONEN, BRANCH, EVAL 
 1486      0000 
 1487               	 400:
 1488 ???? 0000      	    .word ENDS
 1489               	;---------------------------------------------------------------------- 
 1490               	; 
 1491               	; is 
 1492               	; 
 1493 ???? 0000 0451 	HEADER "QUIT", "QUIT", 
 1493      5549 5420 
 1494               	1: 
 1495 ???? 0000      	    .word LBRAC 
 1496 ???? 0000 0000 	    .word RS0, RSTO 
 1497 ???? 0000      	    .word REFILL 
 1498               	2: 
 1499 ???? 0000 0000 	    .word EVAL, CATCH 
 1500 ???? 0000 0000 	    .word DUP, LIT, 0, EQUAL, ZBRANCH, 3f 
 1500      0000 0000 
 1500      0000 0000 
 1501 ???? 0000 0000 	    .word STATE, AT, ZEQU, ZBRANCH, 5f 
 1501      0000 0000 
 1501      0000 
 1502 ???? 0000 0000 	    .word LIT, prompt, LIT, 4, TYPE, BRANCH, 5f 
 1502      0000 0400 
 1502      0000 0000 
 1502      0000 
 1503 ???? 0000 0000 	    .word CR, BRANCH, 2b 
 1503      0000 
 1504               	3: 
 1505 ???? 0000 0000 	    .word DUP, LIT, -1, EQUAL, ZBRANCH, 4f 
 1505      FFFF 0000 
 1505      0000 0000 
 1506 ???? 0000 0000 	    .word LIT, abort, LIT, 8, TYPE, BRANCH, 5f 
 1506      0000 0800 
 1506      0000 0000 
 1506      0000 
 1507               	4: 
 1508 ???? 0000 0000 	    .word DUP, LIT, -2, EQUAL, ZBRANCH, 5f 
 1508      FEFF 0000 
 1508      0000 0000 
 1509 ???? 0000 0000 	    .word LIT, exception, LIT, 12, TYPE, DOT, BRANCH, 5f 
 1509      0000 0C00 
 1509      0000 0000 
 1509      0000 0000 
 1510               	5: 
 1511 ???? 0000 0000 	    .word CR, BRANCH, 2b 
 1511      0000 
 1512 ???? 0000      	    .word ENDS 
 1513               	 
 1514               	;---------------------------------------------------------------------- 
 1515               	; 
 1516               	; 
 1517               	...
 167               	
 168               	;----------------------------------------------------------------------
 169               	;
 170               	; is ZZZZ, hook for incompleteness 
 171               	;
 172 ???? 0000 0555 	HEADER "UNDEF", "UNDEF",
 172      4E44 4546 
 173               	ZZZZ:
 174 ???? 0000 0000 	    .word LIT, undefined, LIT, 12, TYPE, CR, ENDS 
 174      0000 0C00 
 174      0000 0000 
 174      0000 
 175               	 
 176               	;----------------------------------------------------------------------
 177               	.p2align 1, 0x00
 178               	.equ free_flash, .
 179               	
 180               	;********************************************************************** 
 181               	
 182               	;----------------------------------------------------------------------
DEFINED SYMBOLS
              main.S:36     *ABS*:000000000000000c version
              main.S:172    .text:00000000000022b0 _link_
            macros.S:133    *ABS*:000000000000013b _last_
            macros.S:249    *ABS*:0000000000000050 TIB_SIZE
            macros.S:253    *ABS*:0000000000000050 PAD_SIZE
            macros.S:257    *ABS*:0000000000000024 HDS_SIZE
            macros.S:261    *ABS*:0000000000000024 STACK_SIZE
            macros.S:265    *ABS*:0000000000000002 CELL_SIZE
            macros.S:269    *ABS*:000000000000000f WORD_SIZE
            macros.S:273    *ABS*:0000000000000010 BASE_DEFAULT
            macros.S:300    *ABS*:0000000000000080 F_RESERVED
            macros.S:301    *ABS*:0000000000000040 F_IMMEDIATE
            macros.S:302    *ABS*:0000000000000020 F_COMPILE
            macros.S:303    *ABS*:0000000000000010 F_HIDDEN
            macros.S:305    *ABS*:00000000000000f0 F_TOMASK
            macros.S:306    *ABS*:000000000000000f F_UNMASK
            macros.S:309    *ABS*:0000000000000000 F_LEAP
            macros.S:310    *ABS*:0000000000000000 F_CORE
            macros.S:316    *ABS*:0000000000000000 NO_ERROR
            macros.S:317    *ABS*:fffffffffffffff7 INVALID_MEMORY
            macros.S:318    *ABS*:fffffffffffffff5 OUT_OF_RANGE
            macros.S:319    *ABS*:fffffffffffffff3 INVALID_WORD
            macros.S:320    *ABS*:ffffffffffffffec TO_READ_ONLY
            macros.S:321    *ABS*:ffffffffffffffe8 NOT_A_NUMBER
            macros.S:334    *ABS*:0000000000000011 XON_
            macros.S:335    *ABS*:0000000000000013 XOFF_
            macros.S:337    *ABS*:000000000000000d CR_
            macros.S:338    *ABS*:000000000000000a LF_
            macros.S:339    *ABS*:0000000000000009 TB_
            macros.S:340    *ABS*:000000000000000b VT_
            macros.S:341    *ABS*:0000000000000008 BS_
            macros.S:342    *ABS*:0000000000000020 BL_
            macros.S:344    *ABS*:0000000000000022 QT_
            macros.S:350    *ABS*:0000000000000000 BIT_CARRY
            macros.S:352    *ABS*:0000000000000001 BIT_ZERO
            macros.S:354    *ABS*:0000000000000002 BIT_NEG
            macros.S:382    *ABS*:0000000000000080 SPM_SIZE
            macros.S:384    *ABS*:0000000000000100 SRAM_START
            macros.S:386    *ABS*:00000000000008ff SRAM_END
            macros.S:388    *ABS*:0000000000000000 FLASH_RWW
            macros.S:390    *ABS*:0000000000003e00 FLASH_NRWW
            macros.S:392    *ABS*:0000000000003fff FLASH_END
            macros.S:394    *ABS*:00000000000003ff E2P_END
            macros.S:400    *ABS*:0000000000000004 E2P_PAGESIZE
            macros.S:402    *ABS*:0000000000000000 E2P_START
            macros.S:406    *ABS*:000000000000001e SIGNATURE_000
            macros.S:407    *ABS*:0000000000000095 SIGNATURE_001
            macros.S:410    *ABS*:000000000000000f SIGNATURE_002
            macros.S:412    *ABS*:000000000000000f SIGNATURE_003
            macros.S:414    *ABS*:0000000000000016 SIGNATURE_004
              bios.S:267    .text:0000000000000088 HALT
            macros.S:419    *ABS*:0000000000000001 IDLE
            macros.S:420    *ABS*:0000000000000002 BUSY
            macros.S:421    *ABS*:0000000000000003 WAIT
            macros.S:423    *ABS*:0000000000000004 GIVE
            macros.S:424    *ABS*:0000000000000008 TAKE
              main.S:47     .eeprom:0000000000000000 e_void
              main.S:48     .eeprom:0000000000000002 e_live
              main.S:49     .eeprom:0000000000000004 e_turn
              main.S:50     .eeprom:0000000000000006 e_rest
              main.S:51     .eeprom:0000000000000008 e_last
              main.S:52     .eeprom:000000000000000a e_dp
              main.S:53     .eeprom:000000000000000c e_up
              main.S:54     .eeprom:000000000000000e e_ep
              main.S:56     .eeprom:0000000000000010 EP0
              main.S:64     data:0000000000000100 TIB0
              main.S:68     data:0000000000000150 SPZ
              main.S:69     data:0000000000000174 SP0
              main.S:70     data:0000000000000174 PSZ
              main.S:71     data:0000000000000198 PS0
              main.S:72     data:0000000000000198 RSZ
              main.S:73     data:00000000000001bc RS0
              main.S:77     data:00000000000001bc VOID
              main.S:78     data:00000000000001be LIVE
              main.S:80     data:00000000000001c0 TURN
              main.S:81     data:00000000000001c2 REST
              main.S:83     data:00000000000001c4 LAST
              main.S:84     data:00000000000001c6 VDP
              main.S:86     data:00000000000001c8 VUP
              main.S:87     data:00000000000001ca VEP
              main.S:91     data:00000000000001cc VHP
              main.S:92     data:00000000000001ce SEED
              main.S:94     data:00000000000001d0 STAT
              main.S:95     data:00000000000001d2 RADX
              main.S:97     data:00000000000001d4 TOIN
              main.S:98     data:00000000000001d6 SPAN
              main.S:100    data:00000000000001d8 SCRS
              main.S:101    data:00000000000001da BLKS
              main.S:103    data:00000000000001dc HAND
              main.S:104    data:00000000000001de CSPP
              main.S:106    data:00000000000001e0 CURR
              main.S:107    data:00000000000001e2 CTXT
              main.S:109    data:00000000000001e4 HLD
              main.S:110    data:00000000000001e6 HLDS
              main.S:112    data:00000000000001e8 WARN
              main.S:113    data:00000000000001ea ERRN
              main.S:115    data:00000000000001ec TMP0
              main.S:116    data:00000000000001ee TMP1
              main.S:117    data:00000000000001f0 TMP2
              main.S:118    data:00000000000001f2 TMP3
              main.S:121    data:00000000000001f4 UH0
              main.S:123    *ABS*:00000000000008ff US0
              bios.S:39     *ABS*:000000000000003f __SREG__
              bios.S:40     *ABS*:000000000000003e __SP_H__
              bios.S:41     *ABS*:000000000000003d __SP_L__
              bios.S:44     *ABS*:0000000000000009 UBRRL
              bios.S:45     *ABS*:0000000000000020 UCSRC
              bios.S:46     *ABS*:000000000000000a UCSRB
              bios.S:47     *ABS*:000000000000000b UCSRA
              bios.S:50     *ABS*:0000000000000021 WDTCR
              bios.S:53     *ABS*:0000000000000032 TCNT0
              bios.S:54     *ABS*:0000000000000033 TCCR0
              bios.S:55     *ABS*:0000000000000039 TIMSK
              bios.S:58     *ABS*:0000000000000037 SPMCR
              bios.S:61     *ABS*:0000000000000007 SPMIE
              bios.S:62     *ABS*:0000000000000006 RWWSB
              bios.S:64     *ABS*:0000000000000004 RWWSRE
              bios.S:65     *ABS*:0000000000000003 BLBSET
              bios.S:66     *ABS*:0000000000000002 PGWRT
              bios.S:67     *ABS*:0000000000000001 PGERS
              bios.S:68     *ABS*:0000000000000000 SPMEN
              bios.S:75     *ABS*:000000000000001f EEARH
              bios.S:76     *ABS*:000000000000001e EEARL
              bios.S:77     *ABS*:000000000000001d EEDR
              bios.S:78     *ABS*:000000000000001c EECR
              bios.S:79     *ABS*:0000000000000001 EEWE
              bios.S:80     *ABS*:0000000000000002 EEMWE
              bios.S:81     *ABS*:0000000000000000 EERE
              bios.S:85     *ABS*:0000000000000035 MCUCR
              bios.S:101    .text:0000000000000000 boot
              bios.S:127    .text:0000000000000026 RESET
              bios.S:242    .text:0000000000000072 TIM0_OVF
              bios.S:164    *ABS*:000000000000008f OFFSETCNT
              bios.S:166    .text:0000000000000036 TIMER0_SET
              bios.S:188    .text:000000000000004c WATCHDOG_SET
              bios.S:199    .text:0000000000000054 USART_SET
              bios.S:215    .text:000000000000006c GOOD
       forth-twigs.S:932    .text:0000000000000e78 COLD
              bios.S:251    .text:000000000000007c TIM0_ADJ
          messages.S:28     .text:0000000000000094 disclaimer
          messages.S:36     .text:000000000000016f prompt
          messages.S:40     .text:0000000000000174 question
          messages.S:44     .text:0000000000000179 undefined
          messages.S:48     .text:0000000000000186 exception
          messages.S:52     .text:0000000000000193 abort
          messages.S:55     .text:000000000000019d roullete
       forth-leafs.S:89     .text:00000000000001e8 __forth__
       forth-leafs.S:99     .text:00000000000001e8 is_ENDS
       forth-leafs.S:99     .text:00000000000001f0 ENDS
       forth-leafs.S:106    .text:00000000000001f0 _unnest
       forth-leafs.S:111    .text:00000000000001f4 _next
       forth-leafs.S:115    .text:0000000000000200 _pick
       forth-leafs.S:127    .text:000000000000020e _jump
       forth-leafs.S:121    .text:0000000000000206 _nest
       forth-leafs.S:133    .text:0000000000000212 _link
       forth-leafs.S:140    .text:0000000000000214 is_NO_OP
       forth-leafs.S:140    .text:000000000000021c NO_OP
       forth-leafs.S:153    .text:0000000000000220 is_KEY
       forth-leafs.S:153    .text:0000000000000226 KEY
       forth-leafs.S:169    .text:0000000000000236 is_QKEY
       forth-leafs.S:169    .text:000000000000023e QKEY
       forth-leafs.S:377    .text:000000000000031c _iffalse
       forth-leafs.S:365    .text:0000000000000308 _iftrue
       forth-leafs.S:181    .text:0000000000000244 is_EMIT
       forth-leafs.S:181    .text:000000000000024c EMIT
       forth-leafs.S:196    .text:000000000000025a is_QEMIT
       forth-leafs.S:196    .text:0000000000000262 QEMIT
       forth-leafs.S:209    .text:0000000000000268 is_PUPTO
       forth-leafs.S:209    .text:0000000000000272 PUPTO
       forth-leafs.S:219    .text:0000000000000276 is_PDNTO
       forth-leafs.S:219    .text:0000000000000280 PDNTO
       forth-leafs.S:228    .text:0000000000000284 is_ECTO
       forth-leafs.S:228    .text:000000000000028a ECTO
       forth-leafs.S:232    .text:000000000000028e _ee_write
       forth-leafs.S:263    .text:00000000000002a8 is_ECAT
       forth-leafs.S:263    .text:00000000000002ae ECAT
       forth-leafs.S:267    .text:00000000000002b2 _ee_read
       forth-leafs.S:289    .text:00000000000002c4 is_PCAT
       forth-leafs.S:289    .text:00000000000002ca PCAT
       forth-leafs.S:291    .text:00000000000002ca _peek
       forth-leafs.S:303    .text:00000000000002d4 is_PCTO
       forth-leafs.S:303    .text:00000000000002da PCTO
       forth-leafs.S:305    .text:00000000000002da _poke
       forth-leafs.S:316    .text:00000000000002e6 is_MILLIS
       forth-leafs.S:316    .text:00000000000002f0 MILLIS
       forth-leafs.S:362    .text:00000000000002fc is_FTRUE
       forth-leafs.S:362    .text:0000000000000304 FTRUE
       forth-leafs.S:374    .text:0000000000000310 is_FFALSE
       forth-leafs.S:374    .text:0000000000000318 FFALSE
       forth-leafs.S:386    .text:0000000000000324 is_ZEQU
       forth-leafs.S:386    .text:000000000000032a ZEQU
       forth-leafs.S:397    .text:0000000000000334 is_ZLTH
       forth-leafs.S:397    .text:000000000000033a ZLTH
       forth-leafs.S:411    .text:0000000000000344 is_UMLESS
       forth-leafs.S:411    .text:000000000000034a UMLESS
       forth-leafs.S:429    .text:000000000000035e is_UMPLUS
       forth-leafs.S:429    .text:0000000000000364 UMPLUS
       forth-leafs.S:451    .text:000000000000037e is_TO
       forth-leafs.S:451    .text:0000000000000382 TO
       forth-leafs.S:465    .text:0000000000000394 is_AT
       forth-leafs.S:465    .text:0000000000000398 AT
       forth-leafs.S:478    .text:00000000000003a2 is_ATAT
       forth-leafs.S:478    .text:00000000000003a8 ATAT
       forth-leafs.S:501    .text:00000000000003ba is_TOR
       forth-leafs.S:501    .text:00000000000003c0 TOR
       forth-leafs.S:514    .text:00000000000003d4 is_RTO
       forth-leafs.S:514    .text:00000000000003da RTO
       forth-leafs.S:527    .text:00000000000003ee is_RAT
       forth-leafs.S:527    .text:00000000000003f4 RAT
       forth-leafs.S:540    .text:000000000000040c is_RSTO
       forth-leafs.S:540    .text:0000000000000412 RSTO
       forth-leafs.S:550    .text:000000000000041c is_PSTO
       forth-leafs.S:550    .text:0000000000000422 PSTO
       forth-leafs.S:561    .text:000000000000042c is_RSAT
       forth-leafs.S:561    .text:0000000000000432 RSAT
       forth-leafs.S:572    .text:000000000000043c is_PSAT
       forth-leafs.S:572    .text:0000000000000442 PSAT
       forth-leafs.S:583    .text:000000000000044c is_DROP
       forth-leafs.S:583    .text:0000000000000454 DROP
       forth-leafs.S:585    .text:0000000000000454 PULL
       forth-leafs.S:593    .text:000000000000045c is_DUP
       forth-leafs.S:593    .text:0000000000000462 DUP
       forth-leafs.S:595    .text:0000000000000462 PUSH
       forth-leafs.S:603    .text:000000000000046a is_SWAP
       forth-leafs.S:603    .text:0000000000000472 SWAP
       forth-leafs.S:614    .text:0000000000000480 is_OVER
       forth-leafs.S:614    .text:0000000000000488 OVER
       forth-leafs.S:626    .text:000000000000049a is_ROT
       forth-leafs.S:626    .text:00000000000004a0 ROT
       forth-leafs.S:640    .text:00000000000004b6 is_ZDUP
       forth-leafs.S:640    .text:00000000000004be ZDUP
       forth-leafs.S:652    .text:00000000000004ca is_LTHAN
       forth-leafs.S:652    .text:00000000000004ce LTHAN
       forth-leafs.S:668    .text:00000000000004e0 is_PLUS
       forth-leafs.S:668    .text:00000000000004e4 PLUS
       forth-leafs.S:681    .text:00000000000004f2 is_MINUS
       forth-leafs.S:681    .text:00000000000004f6 MINUS
       forth-leafs.S:694    .text:0000000000000506 is_NAND
       forth-leafs.S:694    .text:000000000000050e NAND
       forth-leafs.S:707    .text:000000000000051e is_AND
       forth-leafs.S:707    .text:0000000000000524 AND
       forth-leafs.S:718    .text:0000000000000530 is_OR
       forth-leafs.S:718    .text:0000000000000536 OR
       forth-leafs.S:729    .text:0000000000000542 is_XOR
       forth-leafs.S:729    .text:0000000000000548 XOR
       forth-leafs.S:741    .text:0000000000000554 is_INVERT
       forth-leafs.S:741    .text:000000000000055e INVERT
       forth-leafs.S:743    .text:000000000000055e _inv
       forth-leafs.S:753    .text:0000000000000566 is_NEGATE
       forth-leafs.S:753    .text:0000000000000570 NEGATE
       forth-leafs.S:755    .text:0000000000000570 _neg
       forth-leafs.S:764    .text:0000000000000578 is_SHL
       forth-leafs.S:764    .text:000000000000057e SHL
       forth-leafs.S:766    .text:000000000000057e _shl
       forth-leafs.S:776    .text:0000000000000588 is_SHR
       forth-leafs.S:776    .text:000000000000058e SHR
       forth-leafs.S:778    .text:000000000000058e _shr
       forth-leafs.S:788    .text:0000000000000598 is_ENDIAN
       forth-leafs.S:788    .text:000000000000059e ENDIAN
       forth-leafs.S:799    .text:00000000000005a8 is_BRANCH
       forth-leafs.S:799    .text:00000000000005b2 BRANCH
       forth-leafs.S:801    .text:00000000000005b2 _branch
       forth-leafs.S:812    .text:00000000000005ca is_ZBRANCH
       forth-leafs.S:812    .text:00000000000005d4 ZBRANCH
       forth-leafs.S:830    .text:00000000000005ec is_LIT
       forth-leafs.S:830    .text:00000000000005f2 LIT
       forth-leafs.S:845    *ABS*:fffffffffffffffe rounds
       forth-leafs.S:847    .text:000000000000060e is_ALIGNED
       forth-leafs.S:847    .text:0000000000000618 ALIGNED
       forth-leafs.S:858    .text:0000000000000620 is_CELL
       forth-leafs.S:858    .text:0000000000000628 CELL
       forth-leafs.S:870    .text:0000000000000634 is_CTO
       forth-leafs.S:870    .text:000000000000063a CTO
       forth-leafs.S:883    .text:000000000000064a is_CAT
       forth-leafs.S:883    .text:0000000000000650 CAT
       forth-leafs.S:895    .text:000000000000065a is_JUMP
       forth-leafs.S:895    .text:0000000000000662 JUMP
       forth-leafs.S:909    .text:0000000000000666 is_ZERO
       forth-leafs.S:909    .text:000000000000066a ZERO
       forth-leafs.S:920    .text:0000000000000676 is_ONE
       forth-leafs.S:920    .text:000000000000067a ONE
       forth-leafs.S:931    .text:0000000000000686 is_TWO
       forth-leafs.S:931    .text:000000000000068a TWO
       forth-twigs.S:69     .text:0000000000000696 is_ETO
       forth-twigs.S:69     .text:000000000000069c ETO
       forth-twigs.S:80     .text:00000000000006b0 is_EAT
       forth-twigs.S:80     .text:00000000000006b6 EAT
       forth-twigs.S:95     .text:00000000000006d2 is_NIP
       forth-twigs.S:95     .text:00000000000006d8 NIP
       forth-twigs.S:102    .text:00000000000006de is_SWIP
       forth-twigs.S:102    .text:00000000000006e6 SWIP
       forth-twigs.S:116    .text:00000000000006ee is_ROTU
       forth-twigs.S:116    .text:00000000000006f4 ROTU
       forth-twigs.S:123    .text:00000000000006fa is_ROTD
       forth-twigs.S:123    .text:0000000000000702 ROTD
       forth-twigs.S:130    .text:0000000000000708 is_TUCK
       forth-twigs.S:130    .text:0000000000000710 TUCK
       forth-twigs.S:137    .text:0000000000000716 is_FLIP
       forth-twigs.S:137    .text:000000000000071e FLIP
       forth-twigs.S:144    .text:0000000000000726 is_EQUAL
       forth-twigs.S:144    .text:000000000000072a EQUAL
       forth-twigs.S:151    .text:0000000000000730 is_NOTEQUAL
       forth-twigs.S:151    .text:0000000000000736 NOTEQUAL
       forth-twigs.S:158    .text:000000000000073c is_GTHAN
       forth-twigs.S:158    .text:0000000000000740 GTHAN
       forth-twigs.S:164    .text:0000000000000746 is_ZEROGT
       forth-twigs.S:164    .text:000000000000074c ZEROGT
       forth-twigs.S:170    .text:0000000000000752 is_ZEROLT
       forth-twigs.S:170    .text:0000000000000758 ZEROLT
       forth-twigs.S:178    .text:0000000000000760 is_CELLS
       forth-twigs.S:178    .text:0000000000000768 CELLS
       forth-twigs.S:185    .text:000000000000076c is_CELLPLUS
       forth-twigs.S:185    .text:0000000000000774 CELLPLUS
       forth-twigs.S:192    .text:000000000000077a is_CELLMINUS
       forth-twigs.S:192    .text:0000000000000782 CELLMINUS
       forth-twigs.S:199    .text:0000000000000788 is_ONEPLUS
       forth-twigs.S:199    .text:000000000000078e ONEPLUS
       forth-twigs.S:206    .text:0000000000000794 is_ONEMINUS
       forth-twigs.S:206    .text:000000000000079a ONEMINUS
       forth-twigs.S:213    .text:00000000000007a0 is_TWOPLUS
       forth-twigs.S:213    .text:00000000000007a6 TWOPLUS
       forth-twigs.S:220    .text:00000000000007ac is_TWOMINUS
       forth-twigs.S:220    .text:00000000000007b2 TWOMINUS
       forth-twigs.S:227    .text:00000000000007b8 is_PLUSTO
       forth-twigs.S:227    .text:00000000000007be PLUSTO
       forth-twigs.S:234    .text:00000000000007cc is_CHARPLUS
       forth-twigs.S:234    .text:00000000000007d4 CHARPLUS
       forth-twigs.S:241    .text:00000000000007d8 is_CHARMINUS
       forth-twigs.S:241    .text:00000000000007e0 CHARMINUS
       forth-twigs.S:249    .text:00000000000007e4 is_CHARS
       forth-twigs.S:249    .text:00000000000007ec CHARS
       forth-twigs.S:260    .text:00000000000007ee is_TIB
       forth-twigs.S:260    .text:00000000000007f4 TIB
       forth-twigs.S:268    .text:00000000000007fe is_STATE
       forth-twigs.S:268    .text:0000000000000806 STATE
       forth-twigs.S:275    .text:000000000000080c is_BASE
       forth-twigs.S:275    .text:0000000000000814 BASE
       forth-twigs.S:282    .text:000000000000081a is_CSP
       forth-twigs.S:282    .text:0000000000000820 CSP
       forth-twigs.S:289    .text:0000000000000826 is_EPP
       forth-twigs.S:289    .text:000000000000082c EPP
       forth-twigs.S:296    .text:0000000000000832 is_DPP
       forth-twigs.S:296    .text:0000000000000838 DPP
       forth-twigs.S:303    .text:000000000000083e is_HPP
       forth-twigs.S:303    .text:0000000000000844 HPP
       forth-twigs.S:311    .text:000000000000084a is_UPP
       forth-twigs.S:311    .text:0000000000000850 UPP
       forth-twigs.S:319    .text:0000000000000856 is_BUFF
       forth-twigs.S:319    .text:000000000000085e BUFF
       forth-twigs.S:327    .text:0000000000000866 is_PAD
       forth-twigs.S:327    .text:000000000000086c PAD
       forth-twigs.S:349    .text:0000000000000874 is_DEPTH
       forth-twigs.S:349    .text:000000000000087c DEPTH
       forth-twigs.S:356    .text:0000000000000886 is_RDEPTH
       forth-twigs.S:356    .text:0000000000000890 RDEPTH
       forth-twigs.S:367    .text:000000000000089a is_CURRENT
       forth-twigs.S:367    .text:00000000000008a4 CURRENT
       forth-twigs.S:371    .text:00000000000008aa is_CONTEXT
       forth-twigs.S:371    .text:00000000000008b4 CONTEXT
       forth-twigs.S:375    .text:00000000000008ba is_DEFINITIONS
       forth-twigs.S:375    .text:00000000000008c8 DEFINITIONS
       forth-twigs.S:379    .text:00000000000008d2 is_LATEST
       forth-twigs.S:379    .text:00000000000008dc LATEST
       forth-twigs.S:403    .text:00000000000008e2 is_UHERE
       forth-twigs.S:403    .text:00000000000008ea UHERE
       forth-twigs.S:410    .text:00000000000008f0 is_HERE
       forth-twigs.S:410    .text:00000000000008f8 HERE
       forth-twigs.S:418    .text:00000000000008fe is_ALLOT
       forth-twigs.S:418    .text:0000000000000906 ALLOT
       forth-twigs.S:429    .text:000000000000091e is_ALIGN
       forth-twigs.S:429    .text:0000000000000926 ALIGN
       forth-twigs.S:438    .text:000000000000093c is_CCOMMA
       forth-twigs.S:438    .text:0000000000000942 CCOMMA
       forth-twigs.S:445    .text:000000000000094c is_COMMA
       forth-twigs.S:445    .text:0000000000000950 COMMA
       forth-twigs.S:454    .text:000000000000095a is_TOMMA
       forth-twigs.S:454    .text:0000000000000960 TOMMA
       forth-twigs.S:465    .text:000000000000096c is_DOVAR
       forth-twigs.S:465    .text:0000000000000974 DOVAR
       forth-twigs.S:476    .text:0000000000000980 is_DOCON
       forth-twigs.S:476    .text:0000000000000988 DOCON
       forth-twigs.S:483    .text:0000000000000990 is_LITERAL
       forth-twigs.S:483    .text:000000000000099a LITERAL
       forth-twigs.S:491    .text:00000000000009a4 is_COMP
       forth-twigs.S:491    .text:00000000000009ac COMP
       forth-twigs.S:498    .text:00000000000009ba is_EXIT
       forth-twigs.S:498    .text:00000000000009c2 EXIT
       forth-twigs.S:505    .text:00000000000009c8 is_EXEC
       forth-twigs.S:505    .text:00000000000009d2 EXEC
       forth-twigs.S:513    .text:00000000000009d6 is_RECURSE
       forth-twigs.S:513    .text:00000000000009e0 RECURSE
       forth-twigs.S:529    .text:00000000000009ea is_MARKTO
       forth-twigs.S:529    .text:00000000000009f4 MARKTO
       forth-twigs.S:538    .text:00000000000009fc is_TOMARK
       forth-twigs.S:538    .text:0000000000000a06 TOMARK
       forth-twigs.S:545    .text:0000000000000a0e is_BEGIN
       forth-twigs.S:545    .text:0000000000000a16 BEGIN
       forth-twigs.S:552    .text:0000000000000a1a is_AGAIN
       forth-twigs.S:552    .text:0000000000000a22 AGAIN
       forth-twigs.S:559    .text:0000000000000a2a is_UNTIL
       forth-twigs.S:559    .text:0000000000000a32 UNTIL
       forth-twigs.S:566    .text:0000000000000a3a is_UNLESS
       forth-twigs.S:566    .text:0000000000000a44 UNLESS
       forth-twigs.S:573    .text:0000000000000a4a is_IF
       forth-twigs.S:573    .text:0000000000000a50 IF
       forth-twigs.S:580    .text:0000000000000a58 is_GO
       forth-twigs.S:580    .text:0000000000000a5e GO
       forth-twigs.S:587    .text:0000000000000a66 is_THEN
       forth-twigs.S:587    .text:0000000000000a6e THEN
       forth-twigs.S:594    .text:0000000000000a7a ENDIF
       forth-twigs.S:594    .text:0000000000000a72 is_ENDIF
       forth-twigs.S:601    .text:0000000000000a7e is_ELSE
       forth-twigs.S:601    .text:0000000000000a86 ELSE
       forth-twigs.S:608    .text:0000000000000a8e is_WHILE
       forth-twigs.S:608    .text:0000000000000a96 WHILE
       forth-twigs.S:615    .text:0000000000000a9c is_REPEAT
       forth-twigs.S:615    .text:0000000000000aa6 REPEAT
       forth-twigs.S:623    .text:0000000000000aac is_AHEAD
       forth-twigs.S:623    .text:0000000000000ab4 AHEAD
       forth-twigs.S:630    .text:0000000000000ab8 is_AFT
       forth-twigs.S:630    .text:0000000000000abe AFT
       forth-twigs.S:637    .text:0000000000000ac8 is_HOOK
       forth-twigs.S:637    .text:0000000000000ad0 HOOK
       forth-twigs.S:644    .text:0000000000000ad6 is_BACK
       forth-twigs.S:644    .text:0000000000000ade BACK
       forth-twigs.S:651    .text:0000000000000ae4 is_QBACK
       forth-twigs.S:651    .text:0000000000000aec QBACK
       forth-twigs.S:658    .text:0000000000000af2 is_FOR
       forth-twigs.S:658    .text:0000000000000af8 FOR
       forth-twigs.S:665    .text:0000000000000b00 is_TXEN
       forth-twigs.S:665    .text:0000000000000b08 TXEN
       forth-twigs.S:675    .text:0000000000000b16 is_NEXT
       forth-twigs.S:675    .text:0000000000000b1e NEXT
       forth-twigs.S:697    .text:0000000000000b26 is_CASE
       forth-twigs.S:697    .text:0000000000000b2e CASE
       forth-twigs.S:704    .text:0000000000000b32 is_OF
       forth-twigs.S:704    .text:0000000000000b38 OF
       forth-twigs.S:711    .text:0000000000000b4c is_ENDOF
       forth-twigs.S:711    .text:0000000000000b54 ENDOF
       forth-twigs.S:718    .text:0000000000000b5a is_DEFAULT
       forth-twigs.S:718    .text:0000000000000b64 DEFAULT
       forth-twigs.S:725    .text:0000000000000b72 is_ENDCASE
       forth-twigs.S:725    .text:0000000000000b7c ENDCASE
       forth-twigs.S:733    .text:0000000000000b8a is_DOIT
       forth-twigs.S:733    .text:0000000000000b92 DOIT
       forth-twigs.S:741    .text:0000000000000ba2 is_LOOPN
       forth-twigs.S:741    .text:0000000000000bac LOOPN
       forth-twigs.S:753    .text:0000000000000bcc is_LOOPI
       forth-twigs.S:753    .text:0000000000000bd4 LOOPI
       forth-twigs.S:761    .text:0000000000000bda is_DO
       forth-twigs.S:761    .text:0000000000000be0 DO
       forth-twigs.S:768    .text:0000000000000be8 is_I
       forth-twigs.S:768    .text:0000000000000bec I
       forth-twigs.S:775    .text:0000000000000bf4 is_J
       forth-twigs.S:775    .text:0000000000000bf8 J
       forth-twigs.S:783    .text:0000000000000c0c is_LEAVE
       forth-twigs.S:783    .text:0000000000000c14 LEAVE
       forth-twigs.S:804    .text:0000000000000c44 UNLOOP
       forth-twigs.S:790    .text:0000000000000c1a is_LOOP
       forth-twigs.S:790    .text:0000000000000c22 LOOP
       forth-twigs.S:797    .text:0000000000000c2a is_PLOOP
       forth-twigs.S:797    .text:0000000000000c32 PLOOP
       forth-twigs.S:804    .text:0000000000000c3a is_UNLOOP
       forth-twigs.S:812    .text:0000000000000c4e is_BL
       forth-twigs.S:812    .text:0000000000000c54 BL
       forth-twigs.S:819    .text:0000000000000c5c is_CR
       forth-twigs.S:819    .text:0000000000000c62 CR
       forth-twigs.S:826    .text:0000000000000c6a is_LF
       forth-twigs.S:826    .text:0000000000000c70 LF
       forth-twigs.S:834    .text:0000000000000c78 is_PACE
       forth-twigs.S:834    .text:0000000000000c80 PACE
       forth-twigs.S:841    .text:0000000000000c88 is_BELL
       forth-twigs.S:841    .text:0000000000000c90 BELL
       forth-twigs.S:848    .text:0000000000000c98 is_SPACE
       forth-twigs.S:848    .text:0000000000000ca0 SPACE
       forth-twigs.S:855    .text:0000000000000ca8 is_SPACES
       forth-twigs.S:855    .text:0000000000000cb2 SPACES
       forth-twigs.S:864    .text:0000000000000cc2 is_COUNT
       forth-twigs.S:864    .text:0000000000000cca COUNT
       forth-twigs.S:871    .text:0000000000000cd6 is_TYPE
       forth-twigs.S:871    .text:0000000000000cde TYPE
       forth-twigs.S:881    .text:0000000000000cfc is_UMMINUS
       forth-twigs.S:881    .text:0000000000000d02 UMMINUS
       forth-twigs.S:887    .text:0000000000000d08 is_COLDZERO
       forth-twigs.S:887    .text:0000000000000d10 COLDZERO
              main.S:173    .text:00000000000022b8 ZZZZ
              main.S:178    .text:00000000000022c6 free_flash
       forth-twigs.S:904    .text:0000000000000d6c is_EELOAD
       forth-twigs.S:904    .text:0000000000000d76 EELOAD
       forth-twigs.S:918    .text:0000000000000de6 is_EESAVE
       forth-twigs.S:918    .text:0000000000000df0 EESAVE
       forth-twigs.S:932    .text:0000000000000e70 is_COLD
       forth-twigs.S:936    .text:0000000000000e88 _safe
       forth-twigs.S:947    .text:0000000000000ec4 WARM
       forth-twigs.S:947    .text:0000000000000ebc is_WARM
       interpreter.S:1493   .text:000000000000223c QUIT
       forth-twigs.S:955    .text:0000000000000ed0 is_BYE
       forth-twigs.S:955    .text:0000000000000ed6 BYE
           doubles.S:33     .text:0000000000000ee4 is_FOUR
           doubles.S:33     .text:0000000000000ee8 FOUR
           doubles.S:40     .text:0000000000000eee is_FOURPLUS
           doubles.S:40     .text:0000000000000ef4 FOURPLUS
           doubles.S:47     .text:0000000000000efc is_FOURMINUS
           doubles.S:47     .text:0000000000000f02 FOURMINUS
           doubles.S:55     .text:0000000000000f0a is_TWOTO
           doubles.S:55     .text:0000000000000f10 TWOTO
           doubles.S:61     .text:0000000000000f1c is_TWOAT
           doubles.S:61     .text:0000000000000f22 TWOAT
           doubles.S:68     .text:0000000000000f2e is_TWOTOR
           doubles.S:68     .text:0000000000000f34 TWOTOR
           doubles.S:75     .text:0000000000000f3c is_TWORTO
           doubles.S:75     .text:0000000000000f42 TWORTO
           doubles.S:82     .text:0000000000000f4a is_TWORAT
           doubles.S:82     .text:0000000000000f50 TWORAT
           doubles.S:89     .text:0000000000000f60 is_TWODROP
           doubles.S:89     .text:0000000000000f68 TWODROP
           doubles.S:96     .text:0000000000000f6e is_TWODUP
           doubles.S:96     .text:0000000000000f76 TWODUP
           doubles.S:103    .text:0000000000000f7c is_TWOSWAP
           doubles.S:103    .text:0000000000000f84 TWOSWAP
           doubles.S:110    .text:0000000000000f8e is_TWOOVER
           doubles.S:110    .text:0000000000000f96 TWOOVER
           doubles.S:117    .text:0000000000000fa4 is_TWOUROT
           doubles.S:117    .text:0000000000000fac TWOUROT
           doubles.S:124    .text:0000000000000fb6 is_DPLUS
           doubles.S:124    .text:0000000000000fbc DPLUS
           doubles.S:131    .text:0000000000000fce is_DMINUS
           doubles.S:131    .text:0000000000000fd4 DMINUS
           doubles.S:138    .text:0000000000000fe6 is_DNEG
           doubles.S:138    .text:0000000000000ff0 DNEG
           doubles.S:145    .text:0000000000001000 is_DABS
           doubles.S:145    .text:0000000000001008 DABS
              math.S:36     *ABS*:0000000000001505 djbHASH
              math.S:37     .text:0000000000001014 is_HASH
              math.S:37     .text:000000000000101c HASH
              math.S:89     .text:000000000000104e is_RANDOM
              math.S:89     .text:0000000000001058 RANDOM
              math.S:110    .text:0000000000001078 _seed
              math.S:106    .text:000000000000106a is_RAND
              math.S:106    .text:0000000000001072 RAND
              math.S:119    .text:0000000000001084 is_ABS
              math.S:119    .text:000000000000108a ABS
              math.S:128    .text:0000000000001096 is_MAX
              math.S:128    .text:000000000000109c MAX
              math.S:137    .text:00000000000010aa is_MIN
              math.S:137    .text:00000000000010b0 MIN
              math.S:144    .text:00000000000010b6 is_WITHIN
              math.S:144    .text:00000000000010c0 WITHIN
              math.S:155    .text:00000000000010ce is_UMPASS
              math.S:155    .text:00000000000010d8 UMPASS
              math.S:165    .text:00000000000010ea is_UMDIVMOD
              math.S:165    .text:00000000000010f4 UMDIVMOD
              math.S:182    .text:0000000000001142 is_MDIVMOD
              math.S:182    .text:000000000000114a MDIVMOD
              math.S:195    .text:000000000000117e is_DIVMOD
              math.S:195    .text:0000000000001186 DIVMOD
              math.S:202    .text:0000000000001190 is_MOD
              math.S:202    .text:0000000000001196 MOD
              math.S:209    .text:000000000000119c is_DIV
              math.S:209    .text:00000000000011a0 DIV
              math.S:218    .text:00000000000011a8 is_UMSTAR
              math.S:218    .text:00000000000011ae UMSTAR
              math.S:230    .text:00000000000011d2 is_STAR
              math.S:230    .text:00000000000011d6 STAR
              math.S:237    .text:00000000000011dc is_MSTAR
              math.S:237    .text:00000000000011e2 MSTAR
              math.S:247    .text:00000000000011fe is_STARDIVMOD
              math.S:247    .text:0000000000001206 STARDIVMOD
              math.S:254    .text:0000000000001210 is_STARDIV
              math.S:254    .text:0000000000001216 STARDIV
             flush.S:81     .text:000000000000121e is_LDFLASH
             flush.S:81     .text:000000000000122e LDFLASH
             flush.S:123    .text:0000000000001254 is_SVFLASH
             flush.S:123    .text:0000000000001264 SVFLASH
             flush.S:203    .text:00000000000012a6 _does_spm
          pictures.S:18     .text:00000000000012ba is_DIGIT
          pictures.S:18     .text:00000000000012c2 DIGIT
          pictures.S:31     .text:0000000000001308 is_LTSNUM
          pictures.S:31     .text:000000000000130e LTSNUM
          pictures.S:38     .text:0000000000001318 is_HOLD
          pictures.S:38     .text:0000000000001320 HOLD
          pictures.S:45     .text:0000000000001330 is_SNUM
          pictures.S:45     .text:0000000000001334 SNUM
          pictures.S:54     .text:000000000000134e is_SNUMS
          pictures.S:54     .text:0000000000001354 SNUMS
          pictures.S:61     .text:0000000000001362 is_SIGN
          pictures.S:61     .text:000000000000136a SIGN
       interpreter.S:1354   .text:0000000000002096 CHAR
          pictures.S:69     .text:0000000000001378 is_SNUMGT
          pictures.S:69     .text:000000000000137e SNUMGT
          pictures.S:79     .text:000000000000138c is_UDOTP
          pictures.S:79     .text:0000000000001394 UDOTP
          pictures.S:86     .text:000000000000139e is_UDOT
          pictures.S:86     .text:00000000000013a4 UDOT
          pictures.S:93     .text:00000000000013ac is_UDOTR
          pictures.S:93     .text:00000000000013b2 UDOTR
          pictures.S:100    .text:00000000000013c0 is_DOTP
          pictures.S:100    .text:00000000000013c6 DOTP
          pictures.S:107    .text:00000000000013d8 is_DOT
          pictures.S:107    .text:00000000000013dc DOT
          pictures.S:114    .text:00000000000013e4 is_QUESTION
          pictures.S:114    .text:00000000000013e8 QUESTION
          pictures.S:121    .text:00000000000013ee is_DOTR
          pictures.S:121    .text:00000000000013f4 DOTR
          pictures.S:128    .text:0000000000001404 is_UDDOTP
          pictures.S:128    .text:000000000000140c UDDOTP
          pictures.S:135    .text:0000000000001414 is_UDDOT
          pictures.S:135    .text:000000000000141a UDDOT
          pictures.S:142    .text:0000000000001422 is_UDDOTR
          pictures.S:142    .text:000000000000142a UDDOTR
          pictures.S:149    .text:000000000000143a is_DDOTP
          pictures.S:149    .text:0000000000001442 DDOTP
          pictures.S:156    .text:0000000000001452 is_DDOT
          pictures.S:156    .text:0000000000001458 DDOT
          pictures.S:163    .text:0000000000001460 is_DDOTR
          pictures.S:163    .text:0000000000001466 DDOTR
       interpreter.S:46     .text:0000000000001474 is_skipf
       interpreter.S:46     .text:000000000000147e skipf
       interpreter.S:73     .text:000000000000149c is_scanf
       interpreter.S:73     .text:00000000000014a6 scanf
       interpreter.S:100    .text:00000000000014c4 is_samef
       interpreter.S:100    .text:00000000000014ce samef
       interpreter.S:132    .text:00000000000014f8 is_copyf
       interpreter.S:132    .text:0000000000001502 copyf
       interpreter.S:163    .text:0000000000001528 is_refillf
       interpreter.S:163    .text:0000000000001534 refillf
       interpreter.S:303    .text:0000000000001594 is_wordf
       interpreter.S:303    .text:000000000000159e wordf
       interpreter.S:330    .text:00000000000015b8 _wsto
       interpreter.S:318    .text:00000000000015a6 is_parsef
       interpreter.S:318    .text:00000000000015b0 parsef
       interpreter.S:342    .text:00000000000015c6 _tows
       interpreter.S:358    .text:00000000000015d6 _wsat
       interpreter.S:379    .text:00000000000015ea is_digitf
       interpreter.S:379    .text:00000000000015f4 digitf
       interpreter.S:422    .text:000000000000161a is_numberf
       interpreter.S:422    .text:0000000000001626 numberf
       interpreter.S:552    .text:00000000000016a4 _bin_base
       interpreter.S:596    .text:00000000000016cc _next_digit
       interpreter.S:562    .text:00000000000016ae _nib_base
       interpreter.S:569    .text:00000000000016b2 _oct_base
       interpreter.S:576    .text:00000000000016b6 _dec_base
       interpreter.S:585    .text:00000000000016c0 _hex_base
       interpreter.S:652    .text:00000000000016f2 is_findf
       interpreter.S:652    .text:00000000000016fc findf
       interpreter.S:795    .text:00000000000017a4 is_NULL
       interpreter.S:795    .text:00000000000017ac NULL
       interpreter.S:815    .text:00000000000017b7 is_QERROR
       interpreter.S:815    .text:00000000000017c2 QERROR
       interpreter.S:1459   .text:00000000000021d6 NONEN
       interpreter.S:823    .text:00000000000017d8 is_QCOMP
       interpreter.S:823    .text:00000000000017e0 QCOMP
       interpreter.S:827    .text:00000000000017ee is_QEXEC
       interpreter.S:827    .text:00000000000017f6 QEXEC
       interpreter.S:831    .text:0000000000001806 is_QCSP
       interpreter.S:831    .text:000000000000180e QCSP
       interpreter.S:835    .text:000000000000181e is_QSTACK
       interpreter.S:835    .text:0000000000001828 QSTACK
       interpreter.S:841    .text:0000000000001848 is_QPAIR
       interpreter.S:841    .text:0000000000001850 QPAIR
       interpreter.S:855    .text:000000000000185a is_XHOOK
       interpreter.S:855    .text:0000000000001862 XHOOK
       interpreter.S:858    .text:000000000000186c is_XBACK
       interpreter.S:858    .text:0000000000001874 XBACK
       interpreter.S:861    .text:0000000000001880 is_XQBACK
       interpreter.S:861    .text:0000000000001888 XQBACK
       interpreter.S:864    .text:0000000000001894 is_XIF
       interpreter.S:864    .text:000000000000189a XIF
       interpreter.S:867    .text:00000000000018a4 is_XELSE
       interpreter.S:867    .text:00000000000018ac XELSE
       interpreter.S:870    .text:00000000000018bc is_XENDIF
       interpreter.S:870    .text:00000000000018c4 XENDIF
       interpreter.S:873    .text:00000000000018d0 is_XTHEN
       interpreter.S:873    .text:00000000000018d8 XTHEN
       interpreter.S:876    .text:00000000000018e4 is_XAHEAD
       interpreter.S:876    .text:00000000000018ec XAHEAD
       interpreter.S:879    .text:00000000000018f6 is_XAFT
       interpreter.S:879    .text:00000000000018fc XAFT
       interpreter.S:882    .text:000000000000190c is_XBEGIN
       interpreter.S:882    .text:0000000000001914 XBEGIN
       interpreter.S:885    .text:000000000000191e is_XAGAIN
       interpreter.S:885    .text:0000000000001926 XAGAIN
       interpreter.S:888    .text:0000000000001932 is_XUNTIL
       interpreter.S:888    .text:000000000000193a XUNTIL
       interpreter.S:891    .text:0000000000001946 is_XWHILE
       interpreter.S:891    .text:000000000000194e XWHILE
       interpreter.S:894    .text:000000000000195e is_XREPEAT
       interpreter.S:894    .text:0000000000001968 XREPEAT
       interpreter.S:897    .text:0000000000001974 is_XFOR
       interpreter.S:897    .text:000000000000197a XFOR
       interpreter.S:900    .text:0000000000001984 is_XNEXT
       interpreter.S:900    .text:000000000000198c XNEXT
       interpreter.S:903    .text:0000000000001998 is_XCASE
       interpreter.S:903    .text:00000000000019a0 XCASE
       interpreter.S:906    .text:00000000000019aa is_XENDCASE
       interpreter.S:906    .text:00000000000019b4 XENDCASE
       interpreter.S:909    .text:00000000000019c0 is_XOF
       interpreter.S:909    .text:00000000000019c6 XOF
       interpreter.S:912    .text:00000000000019d4 is_XENDOF
       interpreter.S:912    .text:00000000000019dc XENDOF
       interpreter.S:915    .text:00000000000019ec is_XDO
       interpreter.S:915    .text:00000000000019f2 XDO
       interpreter.S:918    .text:00000000000019fc is_XLOOP
       interpreter.S:918    .text:0000000000001a04 XLOOP
       interpreter.S:921    .text:0000000000001a10 is_XPLOOP
       interpreter.S:921    .text:0000000000001a18 XPLOOP
       interpreter.S:924    .text:0000000000001a24 is_XLEAVE
       interpreter.S:924    .text:0000000000001a2c XLEAVE
       interpreter.S:927    .text:0000000000001a3c is_XUNLOOP
       interpreter.S:927    .text:0000000000001a46 XUNLOOP
       interpreter.S:942    .text:0000000000001a56 is_VALUE
       interpreter.S:942    .text:0000000000001a5e VALUE
       interpreter.S:1369   .text:00000000000020bc CREATE
       interpreter.S:949    .text:0000000000001a66 is_TOVALUE
       interpreter.S:949    .text:0000000000001a6c TOVALUE
       interpreter.S:1345   .text:0000000000002082 FIND
       interpreter.S:957    .text:0000000000001a74 is_DEFER
       interpreter.S:957    .text:0000000000001a7c DEFER
              main.S:172    .text:00000000000022b8 UNDEF
       interpreter.S:964    .text:0000000000001a8c is_ISDEFER
       interpreter.S:964    .text:0000000000001a92 ISDEFER
       interpreter.S:971    .text:0000000000001a9c is_SSMOVE
       interpreter.S:971    .text:0000000000001aa6 SSMOVE
       interpreter.S:1028   .text:0000000000001c3e is_MOVE
       interpreter.S:1028   .text:0000000000001c46 MOVE
       interpreter.S:1043   .text:0000000000001c82 is_CMOVE
       interpreter.S:1043   .text:0000000000001c8a CMOVE
       interpreter.S:1052   .text:0000000000001ca0 is_FILL
       interpreter.S:1052   .text:0000000000001ca8 FILL
       interpreter.S:1065   .text:0000000000001cd2 is_RBRAC
       interpreter.S:1065   .text:0000000000001cd6 RBRAC
       interpreter.S:1072   .text:0000000000001cde is_LBRAC
       interpreter.S:1072   .text:0000000000001ce2 LBRAC
       interpreter.S:1079   .text:0000000000001cea is_TOGGLE
       interpreter.S:1079   .text:0000000000001cf4 TOGGLE
       interpreter.S:1087   .text:0000000000001d00 is_TONFA
       interpreter.S:1087   .text:0000000000001d08 TONFA
       interpreter.S:1094   .text:0000000000001d0e is_TOCFA
       interpreter.S:1094   .text:0000000000001d16 TOCFA
       interpreter.S:1101   .text:0000000000001d26 is_HIDDEN
       interpreter.S:1101   .text:0000000000001d30 HIDDEN
       interpreter.S:1108   .text:0000000000001d3a is_IMMEDIATE
       interpreter.S:1108   .text:0000000000001d46 IMMEDIATE
       interpreter.S:1115   .text:0000000000001d50 is_COMPILE_ONLY
       interpreter.S:1115   .text:0000000000001d60 COMPILE_ONLY
       interpreter.S:1122   .text:0000000000001d6a is_HANDLER
       interpreter.S:1122   .text:0000000000001d74 HANDLER
       interpreter.S:1129   .text:0000000000001d7a is_CATCH
       interpreter.S:1129   .text:0000000000001d82 CATCH
       interpreter.S:1138   .text:0000000000001da2 is_THROW
       interpreter.S:1138   .text:0000000000001daa THROW
       interpreter.S:1148   .text:0000000000001dca is_FATAL
       interpreter.S:1148   .text:0000000000001dd8 FATAL
       interpreter.S:1301   .text:0000000000001ff8 SQUOTE
       interpreter.S:1192   .text:0000000000001eee ABORT
       interpreter.S:1192   .text:0000000000001ee6 is_ABORT
       interpreter.S:1199   .text:0000000000001ef6 is_ACCEPT
       interpreter.S:1199   .text:0000000000001f00 ACCEPT
       interpreter.S:1206   .text:0000000000001f04 is_OVERT
       interpreter.S:1206   .text:0000000000001f0c OVERT
       interpreter.S:1214   .text:0000000000001f10 is_COLON
       interpreter.S:1214   .text:0000000000001f14 COLON
       interpreter.S:1221   .text:0000000000001f1a is_SEMIS
       interpreter.S:1221   .text:0000000000001f1e SEMIS
       interpreter.S:1230   .text:0000000000001f26 is_SOURCE
       interpreter.S:1230   .text:0000000000001f30 SOURCE
       interpreter.S:1239   .text:0000000000001f4c is_SOURCEPLUS
       interpreter.S:1239   .text:0000000000001f56 SOURCEPLUS
       interpreter.S:1247   .text:0000000000001f60 is_REFILL
       interpreter.S:1247   .text:0000000000001f6a REFILL
       interpreter.S:1258   .text:0000000000001f82 is_PARSE
       interpreter.S:1258   .text:0000000000001f8a PARSE
       interpreter.S:1268   .text:0000000000001fa4 is_BACKSLASH
       interpreter.S:1268   .text:0000000000001fa8 BACKSLASH
       interpreter.S:1275   .text:0000000000001fb2 is_PAREN
       interpreter.S:1275   .text:0000000000001fb6 PAREN
       interpreter.S:1283   .text:0000000000001fc2 is_DOTPAREN
       interpreter.S:1283   .text:0000000000001fc8 DOTPAREN
       interpreter.S:1291   .text:0000000000001fd0 is_SBSQUOTE
       interpreter.S:1291   .text:0000000000001fd6 SBSQUOTE
       interpreter.S:1301   .text:0000000000001ff2 is_SQUOTE
       interpreter.S:1314   .text:0000000000002014 is_DOTQUOTE
       interpreter.S:1314   .text:000000000000201a DOTQUOTE
       interpreter.S:1326   .text:000000000000203e is_PARSEN
       interpreter.S:1326   .text:000000000000204c PARSEN
       interpreter.S:1338   .text:0000000000002066 is_FINDN
       interpreter.S:1338   .text:0000000000002072 FINDN
       interpreter.S:1345   .text:000000000000207a is_FIND
       interpreter.S:1354   .text:000000000000208e is_CHAR
       interpreter.S:1361   .text:000000000000209e is_NONAME
       interpreter.S:1361   .text:00000000000020a8 NONAME
       interpreter.S:1369   .text:00000000000020b2 is_CREATE
       interpreter.S:1382   .text:00000000000020fa is_DOESTO
       interpreter.S:1382   .text:0000000000002102 DOESTO
       interpreter.S:1393   .text:000000000000210e is_CONSTANT
       interpreter.S:1393   .text:000000000000211a CONSTANT
       interpreter.S:1407   .text:0000000000002138 is_VARIABLE
       interpreter.S:1407   .text:0000000000002144 VARIABLE
       interpreter.S:1417   .text:0000000000002162 is_TICK
       interpreter.S:1417   .text:0000000000002166 TICK
       interpreter.S:1428   .text:0000000000002178 is_POSTPONE
       interpreter.S:1428   .text:0000000000002184 POSTPONE
       interpreter.S:1435   .text:000000000000218a is_KTICK
       interpreter.S:1435   .text:0000000000002190 KTICK
       interpreter.S:1442   .text:0000000000002198 is_COMPILE
       interpreter.S:1442   .text:00000000000021a2 COMPILE
       interpreter.S:1449   .text:00000000000021aa is_NUMBN
       interpreter.S:1449   .text:00000000000021b2 NUMBN
       interpreter.S:1459   .text:00000000000021ce is_NONEN
       interpreter.S:1466   .text:00000000000021e6 is_EVAL
       interpreter.S:1466   .text:00000000000021ee EVAL
       interpreter.S:1493   .text:0000000000002234 is_QUIT
              main.S:172    .text:00000000000022b0 is_UNDEF

UNDEFINED SYMBOLS
mov
ijmp
